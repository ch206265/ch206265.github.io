{"meta":{"title":"清醒即活着","subtitle":"天下古今之庸人，皆以一懒字致之","description":null,"author":"ch206265","url":"http://ch206265.github.io","root":"/"},"pages":[{"title":"关于","date":"2019-06-04T13:39:41.000Z","updated":"2019-11-21T16:51:23.034Z","comments":true,"path":"about/index.html","permalink":"http://ch206265.github.io/about/index.html","excerpt":"","text":"这是一些自我介绍"},{"title":"收藏夹","date":"2019-07-31T14:04:44.000Z","updated":"2019-11-21T16:51:23.036Z","comments":true,"path":"favorite/index.html","permalink":"http://ch206265.github.io/favorite/index.html","excerpt":"","text":"站点收藏 奇迹秀-创意导航 MikuTools - 一个轻量的工具集合 今日热榜官网"},{"title":"分类","date":"2019-06-04T13:39:04.000Z","updated":"2019-11-21T16:51:23.035Z","comments":true,"path":"categories/index.html","permalink":"http://ch206265.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-05-31T07:05:01.000Z","updated":"2019-11-21T16:51:23.038Z","comments":false,"path":"tags/index.html","permalink":"http://ch206265.github.io/tags/index.html","excerpt":"","text":""},{"title":"时光碎语","date":"2019-07-31T15:05:22.000Z","updated":"2019-12-16T15:29:22.862Z","comments":true,"path":"timesaying/index.html","permalink":"http://ch206265.github.io/timesaying/index.html","excerpt":"","text":"2019/12/16 23:11 最近没有动力，没有目标…… 以后写博客，少些图，多些文字；少些流程类的，多些总结感受；少些大而全的，多些小而精的东西 2019/11/26 17:03 自己一个人的时候还好，但是走向社会，基本的法律知识以及法律纠纷中的常识还是要了解的，法律是个强大的武器，但是要用好这个武器也不是那么容易……网易回应暴力裁员事件并道歉！程序员曝亲身经历逼迫、算计、监视、陷害、威胁，甚至被保安赶出公司。 2019/11/22 19:25 2019/11/22 01:51 多端实现hexo博客的功能实现了，感觉这个过程学习到了很多其他的东西 真的是不要想太多而不动手，千里之行始于足下，着眼于一个点，然后钻研、耕耘慢慢的就好了，重要的是行动起来 2019/11/08 21:20 现在社会，除了自身实力之外，真的就是在比拼信息差啊，去贫穷限制了我们的想象，多么痛的领悟 以后要早点休息，熬夜使人变笨🤣 2019/11/08 09:14 可以先简单了解一下Go语言; 学会分辨正确但无用的知识”——以写作调身心博客中的一句话 焦虑过程中也不要放弃坚持一些习惯，再迷茫也不要什么事情都不做 敢于面对真实的自己 处处留心皆学问，身边事，要善于观察和记忆，身边人，要多择其善者而从之，其不善者而改之 有知识≠有文化≠有智慧，知识，文化和智慧是不同等级的东西 不要想着所有东西都要归纳于一张大网之中，也不要想着总结出某单一模式解释或者套用在所有东西上，这是对创造性的打压，对灵性的毁灭。 记忆容量是有限的，不要什么都想着往脑袋里装。 2019/11/07 09:41 学习要小题大做，不要大题小做。有时候一味求大、求全反而不好，铺开的面太大了不好驾驭或者说无法深入，还不如找好一个小点，然后深入钻研。 工作之前要有一个全局观，一定要明确所干之事的定位，合理分配时间和精力的投资， 2019/11/06 13:37 记录下word里面很有用的一个快捷键，F4或者Ctrl+Y，重复上一次的操作 慈不掌兵 不要眼前的基本的东西都还没有搞好，就在慌更远的更陌生的东西——不要好高骛远，要脚踏实地 处处思取巧，终弄巧成拙 2019/11/06 00:11 心胸狭隘的人看到的都是威胁 想的太多干的太少 2019/11/02 19:29 感觉自己现在的学习状态就是东一榔头西一棒槌，基础上的东西缺的太多了，想要达到的目标就在眼前，但是第一步太艰难了，不管从哪里开始，都是会陷入到问题的无底洞——所以，补基础，先不要想着完成多么高大上的目标——但是，补基础难道就是抱着一本厚厚的书把上面的内容从头看到尾吗？——其实，自己什么都没有做，就已经开始想这么多了，人啊…… 2019/11/02 15:46 博客完善计划： 这个站点的访问量计数有问题，每刷新一次页面就会增加一次访问 学习一下怎么在两台电脑上实现对博客的发布和更改。有时候在机房电脑上写好文章没法及时发布，基本就会一直拖拉下去，导致写作时间和发布时间有点混乱，不是很舒服…… 修改一下这个博客的链接样式，改成类似知乎的卡片风格 尝试添加一下私密文章的访问设置但是还有一些小BUG，会使文章目录消失不见 收藏夹页面更改一下，除了一些工具网站的收藏外，添加一些友链 尝试把归档页面的卡片样式改成时间轴样式，主要是卡片太大了，不能展现归档后想要的那种整体概览性…… 尝试修改一下文章中的图片显示风格 现在句子中穿插的链接以及代码块颜色是粉红色，修改一下 怎样给hexo摘要配上插图 2019/11/02 15:15 可以减少留给自己工作的时间以提高学习效率，😊，减少的那部分当然是要留给生活啦🤣 2019/10/31 16:27 归根结底还是自己的动手能力差，编程总是没有能够脱离书本，也明白要找项目锻炼，为什么还是深入不下去，是内心深处对动手实践的抵触吗？ 选择的前提，就是知道你现在在哪，将来要去哪，一定要清醒的认识自己，以及当下手里握的资源，把自己重新审视清楚，做好定位。认清自己要走的路之后，在什么阶段，就把这个阶段的事做好，才是最佳的选择； 扩大眼界的方法，多读书，多旅行；改变自己，一是要从精神层面、二是要从生活层面 2019/10/30 21:54 火鸡问题，最开始是在此网站了解到的。文中说到，“火鸡问题”的本质，是我们强行从本没有规律的事件中寻找规律，或者基于有限的小样本去总结规律。这主要是对归纳主义者的讽刺。我在想，平时生活中我似乎也是有点过于归纳主义了。 *2019/10/28 20:16 * 生活的余地越宽阔，活的就会越优雅 习惯于早起的人比喜欢熬夜的人更可怕 总是在用事后的眼光抱怨着昨天的短视，却很少有人想着干好眼前的事，这样只会产生更多的遗憾 感觉在空虚浮躁的时候，就去看书和跑步，刷剧看新闻玩游戏只会制造更多的空虚 2019-10-08 在给别人交代任务或请求他人帮忙的时候，一定要果断，干脆利落 有个好习惯，修改文件后在文件名后面加修改日期，对于需要长期进行的工作创建文件夹时也可以以时间命名，继续保持 每次都是想的计划的很好，但是执行很差，归根结底就是自制力的问题/(ㄒoㄒ)/~~。现在，明确，要养成的习惯，多读书，多喝水，多运动。关于熬夜，援引知乎上丁香医生的回答“睡得晚不一定是熬夜，睡不够、睡不好，才是真正的熬夜”，其实关键是看第二天的安排，要有精力保证第二天的工作。究竟几点之后才算熬夜？丁香医生的回答 - 知乎 2019-09-14 大多数人的努力程度之低，根本轮不上拼天赋。 最近找了本书，逻辑思维的《成大事者不纠结》，读过《高效能人士的七个习惯》，不会轻易对这种鸡汤标题的书做出评价，到底怎么样，读过之后才知道 2019-08-3 老师突然询问我要不要换一下方向，现在这个方向依托的项目没立下来？？😵😵😵 2019-08-29 有一堆事情要做，那就赶快去做，而不是一直在沮丧的情绪中不去行动；处理消极情绪最糟糕的方法就是躲避真正的问题，不要做鸵鸟人。 2019-08-07 最近在整理之前写在有道云笔记中的东西。发现现在要时刻自我提醒的东西，其实早在4年前就已经反思过了。已经发现的问题，如果没有任何改进和变化，做这么多的反思和总结，又有什么用？ 2019-08-03 博客中存在的大问题终于解决的差不多了 换了个主题indigo，发现和主题作者同城，并且离的超近😂； 侧边栏加了几个自定义菜单，并且配上了 fontawesome图标，也给站点配了个ico小图标； 解决了博客里面的图片问题：从失效的七牛云中下载图片，改用GitHub图床； 接下来，添加评论系统，文章浏览量，站点运行计时等功能慢慢加…… 2017-05-31 当你心中没有积淀的时候，恐惧会使外来的所有都变成威胁；当你有强大的实力的时候，眼光会使外来的所有都变成启发。没有积淀，没有真本领的人，会特别在意别人的目光，有真才实学的人，别人的目光会自动聚向他那里，而他只需要坚持自己的道路一直走下去。 2016-12-06 先要搞清楚什么叫专业和非专业，难道就是因为你在80年或者更长的人生中，有三四年或者五六年学了一个所谓的专业，剩下的人生中就要一直从事这个专业吗？其实这是自己给自己画的一个圈而已。学习是终身的事情，自学是很重要的途径。[原话出处] 2016-03-31 对于我来说，保持好的生活状态有两种方法：看书，学习新东西。专心致志。 2015-11-27 世上没有所谓的玩笑，所有玩笑都有认真的成分。 2015-06-17 天下古今之庸人，皆以一懒字致之 2015-05-02 知识性的东西会随着时间而不断更新，但思想性的东西、智慧性的东西，越经过时间的沉淀，就越有魅力。 2015-04-15 就像打游戏，不要只会打顺风局一样，与人相处，也不要只会你好我好，相安无事，多在矛盾与冲突中应对与成长，拒绝做事后诸葛。 2015-01-09 有些事情不需要你在事前想象，策划那么多，很累并且想的那些也不一定能够用上，等于说是白忙活，有点眉目和思路时就可以去做了，剩下的部分靠你在真正的实践中去摸索总结。其实在你做的过程中，方法就越来越清晰了，这时候，你再顺水推舟，因风吹火，效果好还不费力。一句话，就是实践出真知。 当然，这并不是否决提前策划想象的必要性，如果能够在策划归纳总结中实践，在实践中总结，二者同步还是挺不错的。我也只是想给自己说，不能始终沉浸在一个自我的小世界里面，想象地再完美也是空想都是白搭。"},{"title":"标签","date":"2019-06-04T13:39:29.000Z","updated":"2019-11-21T16:51:23.037Z","comments":true,"path":"tags/index-1.html","permalink":"http://ch206265.github.io/tags/index-1.html","excerpt":"","text":""}],"posts":[{"title":"somethinng_about_talents","slug":"somethinng-about-talents","date":"2020-01-09T13:27:58.000Z","updated":"2020-01-10T05:54:11.566Z","comments":true,"path":"2020/01/09/somethinng-about-talents/","link":"","permalink":"http://ch206265.github.io/2020/01/09/somethinng-about-talents/","excerpt":"","text":"在[SooPat]这个网站上查询一些专利的基本信息。国际专利分类号（IPC）国际专利分类号是什么，推荐参考[这篇文章]。首先有个将专利文献（也就是专利说明书）进行分类的方法，叫做国际专利分类法。用它分类专利文献而得到的分类号，称为国际专利分类号，通常缩写为IPC号（International Patent Classification）。国际专利分类号揭示了专利文献的主题。我们可以在检索专利文献时，较为灵活的运用国际专利分类号中所蕴含的信息。 关于IPC号的结构可以参看[这篇文章]。将整个研究领域分为8各部，然后以“部-大类-小类-大组-小组”进行5级划分，用英文或者阿拉伯数字进行表示。在小组之后的更细节的划分使用“.”的个数进行确定。 举个例子： 再举个例子，国际专利分类号C07D301/32， 部的类号是C，即C部，类名是化学、冶金。 大类的类号是C07，类名是有机化学。 小类的类号是C07D，类名是杂环化合物。 大组的类号是C07D301/00，类名是环氧乙烷的制备。 小组的类号是C07D301/32，类名是环氧乙烷的分离和提取。 申请号、受理号、公开号、专利号、优先权号、优先权日推荐参考[这个文章]，原文来自[这里]，是一本叫做《专利法一本通》的书。关于申请号、公开号、公告号、专利号的区分推荐参考[这篇文章]。优先权号见此。 它们之间的关系：专利申请号是申请专利时的编号，对应的是专利申请文献，是专利申请时的专利的身份证。专利公开号是专利审查文本的身份证，通过这个公开号，可以对应到专利唯一的文本内容和日期。专利号是最后专利证书下发时，对专利证书的编号。 专利申请号。 用12位阿拉伯数字表示，包括申请年号、申请种类号和申请流水号三个部分。按照由左向右的次序，专利中请号中的第1-4位数字表示受理专利申请的年号，第5位教字表示专利申请的种类，第6-12位教字（共7位）为申请流水号，表示受理专利申请的相对顺序。专利中请号中使用的每一位阿拉伯数字均为十进制。 申请种类号。专利申请号中的申请种类号用1位数字表示，所使用数字的含义规定如下：1表示发明专利申请；2表示实用新型专利申请；3表示外观设计专利申请；8表示进入中国国家阶段的PCT发明专利申请；9表示进入中国国家阶段的PCT 实用新型专利申请。上述申请种类号中未包含的其他阿拉伯数字在作为种类号使用时的含义由国家知识产权局另行规定。 申请流水号。专利申请号中的申请流水号用7位连续数字表示，一般按照升序使用，例如从0000001开始，顺序递增，直至9999999。每一自然年度的专利申请号中的申请流水号重新编排，即从每年1月1日起，新发放的专利申请号中的申请流水号不延续上一年度所使用的申请流水号，而是从0000001重新开始编排。 国家知识产权局在受理专利申请时给予专利申请号和校验位。校验位位于专利申请号之后，在专利申请号与校验位之间使用一个下标单字节实心圆点符号作为间隔符。除法律法规和行政规章另有规定以外，在专利法、专利法实施细则及其他相关法规规定的各种法定程序中均应将专利申请号与校验位（包括两者之间的间隔符）联合使用。 发明人、申请人、专利权人之间的关系推荐参考[这篇文章]。首先简单了解一下这几个此的基本含义：发明人只能是自然人；申请人既可以是自然人、法人或者其他组织，如果专利申请成功了，那么专利申请人就变成专利权人了；专利权人是指拥有这份专利的所有人及持有人。更具体地来讲： 专利发明人只能是个人不能是单位，享有获得奖励、报酬的权利和署名的权利，却没有独自使用、占有、处分专利的权利，只能变更不能转让 专利申请人或专利权人可以为个人和单位，拥有独占权(独占实施本专利)、许可权(许可他人实施本专利)、转让权(专利申请权和专利权可以转让) 专利发明人不一定是专利权人，因为这里牵扯到一个职务发明的问题，职务发明的专利权属于单位，当然如果之前有约定，从其约定 在权利上，发明人只有姓名表示权，如果发明人与申请人是雇主/受雇关系，发明人可以要求申请人给予奖励。在申请专利的时候，发明人可以填写多人、专利申请人也可以填写多个单位或多个个人或是单位跟个人共写，专利授权后，在专利权的分配上就是所有专利权人共有。","categories":[{"name":"不会白白经历的事","slug":"不会白白经历的事","permalink":"http://ch206265.github.io/categories/%E4%B8%8D%E4%BC%9A%E7%99%BD%E7%99%BD%E7%BB%8F%E5%8E%86%E7%9A%84%E4%BA%8B/"}],"tags":[{"name":"专利相关","slug":"专利相关","permalink":"http://ch206265.github.io/tags/%E4%B8%93%E5%88%A9%E7%9B%B8%E5%85%B3/"}]},{"title":"python语言基础要素","slug":"pandas-datastructure","date":"2019-11-29T02:14:11.000Z","updated":"2020-01-09T13:37:57.232Z","comments":true,"path":"2019/11/29/pandas-datastructure/","link":"","permalink":"http://ch206265.github.io/2019/11/29/pandas-datastructure/","excerpt":"简单了解一下数值、字符串、正则表达式与模式匹配、日期、列表、元组、字典、控制流等概念 数值python中常用的数值类型主要有：整数、浮点数、长整数和复数 print语句中的.formatformat函数中两个比较重要的 符号：{}和: {}是一个占位符，表示这里将要传入print语句一个具体的值，可以按照默认顺序接受也可以设定接收指定位置的数据； :是用来分隔传入的值和它的格式。","text":"简单了解一下数值、字符串、正则表达式与模式匹配、日期、列表、元组、字典、控制流等概念 数值python中常用的数值类型主要有：整数、浮点数、长整数和复数 print语句中的.formatformat函数中两个比较重要的 符号：{}和: {}是一个占位符，表示这里将要传入print语句一个具体的值，可以按照默认顺序接受也可以设定接收指定位置的数据； :是用来分隔传入的值和它的格式。 具体数字格式化以及使用实例参考：python format 格式化函数 需要知道的是，数值处理时会用到几种标准库模块和内置函数与模块来进行常见的数学计算。其中，标准库模块需要引入才能使用，比如，想要使用math模块中的一些函数：exp、log、sqrt，需要from math import exp, log, sqrt。 字符串字符串可以包含在单引号、双引号、3个单引号或者3个双引号之间。 用来管理字符串的标准模块、内置函数和操作符也有很多，常用的操作符和函数包括：+、*、len。 处理字符串的一个常用标准库模块是string。在string模块中可以使用多个函数，如：split、join、strip、replace和lower、upper、capitalize等来有效管理字符串。 字符串与引号单引号、双引号如果想要print输出I&#39;m enjoying learning python这句话，那么单引号，或者双引号的如法区别如下： print(&quot;Output #14: {0:s}&quot;.format(&#39;I\\&#39;m enjoying learning Python.&#39;)) print(&quot;Output #14: {0:s}&quot;.format(&quot;I&#39;m enjoying learning Python.&quot;)) 即，如果使用单引号来包含z这个字符串的话，就不需要在&quot;I&#39;m&quot;的单引号前面使用反斜杠了。 长字符串的换行使用反斜杠\\对长字符串进行换行处理，需要注意的是： 反斜杠必须是每一行最后一个字符 如果意外按下一个看不见的空格键，脚本就会抛出语法错误，不能正常运行 三个单引号和三个双引号使用三个单引号或者三个双引号，就是为了避免使用反斜杠对长字符串进行分行的，但是它们之间的的分行效果也有差异： 反斜杠换行：即使在print中换行了，输出在屏幕上长字符串仍然是一行 三个单引号或者三个双引号换行：在print中式如何换行的，输出在屏幕上就是怎么换行的 字符串的一些操作符和内置函数+操作符+操作符是将两个z字符串按照原样相加，所以如果想要连接两个字符串成一个句子的话，需要注意在连接出加上空格 *操作符*操作符是将字符串重复一定的次数，格式也比较简单，例如&quot;this is a string&quot;*4 内置函数len内置函数len用来确定字符串中字符的数量，它会将空格和标点符号也计算在内 string模块中的一些函数splitjoinstripreplacelower、upper、capitalize列表list创建列表用方括号创建列表，用len()计算列表中元素的数量，用max()和min()找出最大值和最小值，用count()计算出列表中某个值出现的次数 列表索引值使用列表索引值可以访问列表中的特定元素，其中[0]是第一个元素，[-1]是最后一个元素 列表切片使用列表切片访问列表元素的一个子集，从开头开始切片，可以省略第一个索引值，一直切片到末尾们可以省略第二个索引值，例如： 1234a_list = [1, 2, 3, 4]print(\"&#123;&#125;\".format(a_list[0:2])) # 1，2 print(\"&#123;&#125;\".format(a_list[:2]))# 1，2print(\"&#123;&#125;\".format(a_list[1:3]))# 2，3 列表复制使用[:]复制一个列表，例如，下文中复制列表a_list中的内容给a_new_list，语句为：a_new_list = a_list[:] 列表连接使用+将两个或者更多个列表连接起来 :a_longer_list = a_list + another_list 使用in和not in使用in和not in来检查列表中是否有特定元素：a = 2 in a_list或b = 2 not in a_list，这些语句的返回值是True或者False 追加、删除和弹出元素 使用append()向列表末尾追加一个新元素； 用remove()从列表中删除一个特定元素； 使用pop()从列表末尾删除一个元素； 列表反转使用reverse()原地反转一个列表，但是这样会修改原列表；想要反转列表同时又不修改原列表，可以先复制列表，然后对列表副本进行reverse操作。使用格式是： 1234a_list = [1, 2, 3, 4]copy_list = a_list[:]copy_list.reverse()print(copy_list) 列表排序使用sort()对列表进行原地排序，这样会修改原列表；想要排序但同时不修改原列表，可以先复制列表，然后对列表副本进行sort操作。使用的格式和reverse类似：copy_list.sort()，如果是数字排序后则从小到大排列。 sorted排序函数使用sorted()函数对一个列表集合按照列表中某个位置的元素进行排序。与sort()函数不同的是，sorted()函数返回一个新的排好序的列表，并不改变原列表的元素顺序 eg1:sorted()函数和lambda()函数的配合使用123my_lists = [[1,2,3,4],[4,3,2,1],[2,4,1,3]]my_lists_sorted_by_index_3 = sorted(my_lists, key=lambda index_value:index_value[3])print(\"&#123;&#125;\".format(my_lists_sorted_by_index_3)) 则输出为 [[4, 3, 2, 1], [2, 4, 1, 3], [1, 2, 3, 4]] 在这个示例中，关键字是一个lambda函数，表示使用索引位置为3的值（也就是列表中的第四个元素）对列表进行排序。 eg2:使用operator模块中的itemgetter函数导入operator模块中的itemgetter函数，使用每个列表中多个索引位置的值对列表集合进行排序 123456#!/usr/bin/env python3from operator import itemgettermylist = [[123, 2, 2, 444], [22, 6, 6, 444], [354, 4, 4, 678], [235, 5, 5, 678],\\ [578, 1, 1, 290], [461, 1, 1, 290]]my_list_sorted_by_index_3_and_0 = sorted(mylist, key=itemgetter(3,0))print(\"&#123;&#125;\".format(my_list_sorted_by_index_3_and_0)) 则输出为 [[461, 1, 1, 290], [578, 1, 1, 290], [22, 6, 6, 444], [123, 2, 2, 444], [235, 5, 5, 678], [354, 4, 4, 678]] 元组元组除了不能被修改之外其余地方和列表非常相似，应用于列表的函数和操作符，比如：len函数返回元组中元素的个数，元组索引和元组切片可以引用元组中特定的元素，+操作符可以连接多个元组。 创建元组、元组解包及元组转换成列表（或列表转换成元组）12345678#使用圆括号创建元组，方括号创建列表my_tuple = ('x', 'y', 'z')my_list = [1, 2, 3]#使用赋值操作符左边的变量对元组进行解包one, two, three = my_tuple#list()将元组转换成列表，tuple()将列表转化成元组print(\"&#123;&#125;\".format(tuple(my_list)))print(\"&#123;&#125;\".format(list(my_tuple))) 字典python中字典的本质是包含带有唯一标识符的成对信息的列表。 列表和字典的区别 在列表中，可以使用被称为索引或索引值的连续整数来引用某个列表值。在字典中，要引用一个字典值，则可以使用整数、字符串或其他python对象，这些统称为字典键。在唯一键值比连续整数更能反映出变量值含义的情况下，这个特点使字典比列表更实用。 列表中，列表值是隐式排序的，因为索引是连续整数。在字典中，字典值则没有排序，因为索引不仅仅只是数值。你可以为字典中的项目定义排序操作，但是字典确实没有内置排序。 在列表中，为一个不存在的位置（索引）赋值是非法的。在字典中，则可以在必要的时候创建新的位置（键）。 因为没有排序，所以当你进行搜索或添加新值时，字典的响应时间更快（当你插入一个新项目时，计算机不需要重新分配索引值）。当你处理的数据越来越多时，这是一个重要的考虑因素。 创建字典、引用字典中的值和复制字典使用花括号{}创建字典；使用冒号:分隔键-值对；使用len()计算出字典中键-值对的数量；使用键来引用字典中特定的值，需要字典名称、一对方括号和一个特定的键值（字符串形式）；使用copy()复制字典，需要先在字典名称后面加上copy函数，然后将这个表达式赋给一个新的字典即可: 12345a_dict = &#123;'one':1, 'two':2, 'three':3&#125;print(\"&#123;&#125;\".format(a_dict))print(\"a_dic has &#123;!s&#125; elements\".format(len(a_dict)))print(\"&#123;&#125;\".format(a_dict['two']))copy_dict = a_dict.copy() 复制键、值和项目使用in、not in和get排序pandas数据结构Series 多维数组 字典 标量值 Series类似多维数组 Series类似字典 适量操作与对齐Series标签 DataFramedataframe是由多种类型的列构成的二维标签数据结构 用Series字典或者字典生成DataFrame index和columns属性分别用于访问行、列标签 用多维数组字典、列表字典生成DataFrame 用结构多维数组或记录多维数组生成DataFrame 用列表字典生成DataFrame 用元组字典生成DataFrame 用Series创建DataFrame 备选构建器 DataFrame.from_dict DataFrame.from_records 提取、添加、删除列 用方法链分配新列 参考：pandas中文网","categories":[{"name":"Python","slug":"Python","permalink":"http://ch206265.github.io/categories/Python/"}],"tags":[{"name":"pandas","slug":"pandas","permalink":"http://ch206265.github.io/tags/pandas/"},{"name":"python","slug":"python","permalink":"http://ch206265.github.io/tags/python/"},{"name":"数据处理","slug":"数据处理","permalink":"http://ch206265.github.io/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"}]},{"title":"pandas读取CSV文件","slug":"pandas-readcsv-tocsv","date":"2019-11-27T15:58:25.000Z","updated":"2019-12-16T15:26:48.613Z","comments":true,"path":"2019/11/27/pandas-readcsv-tocsv/","link":"","permalink":"http://ch206265.github.io/2019/11/27/pandas-readcsv-tocsv/","excerpt":"简单记录以下使用python处理空气质量数据的摸索过程。 获取研究区所有地面监测站点信息这个步需要 解决： 对csv文本文件的读取； 对csv文本文件特定的行数据进行筛选； 对筛选出来的数据进行合并； 其实合并这一步可以使用更合适的筛选条件来完成","text":"简单记录以下使用python处理空气质量数据的摸索过程。 获取研究区所有地面监测站点信息这个步需要 解决： 对csv文本文件的读取； 对csv文本文件特定的行数据进行筛选； 对筛选出来的数据进行合并； 其实合并这一步可以使用更合适的筛选条件来完成 此例表示使用read_csv和to_csv对文本文件进行读写 123456789#!/usr/bin/env python3import sysimport pandas as pdinput_file = \"D:/PycharmProjects/DataProcess/testdata.csv\"output_file = \"D:/PycharmProjects/DataProcess/testdata_out.csv\"data_frame = pd.read_csv(input_file)print(data_frame)data_frame.to_csv(output_file, index=False) 此例表示使用loc对某列满足一定条件的所有行进行抽取 12345678910#!/usr/bin/env python3import sysimport pandas as pdinput_file = \"D:/PycharmProjects/DataProcess/testdata.csv\"output_file = \"D:/PycharmProjects/DataProcess/testdata_out.csv\"data_frame = pd.read_csv(input_file)data_frame_value_meet_condition = data_frame.loc[(data_frame['城市'].str.contains('北京')), :]print(data_frame_value_meet_condition)data_frame_value_meet_condition.to_csv(output_file, index=False) 此例表示利用??对loc抽取过单独保存的各个.csv文件进行合并 可以参考以下文章：https://blog.csdn.net/weixin_42338058/article/details/83869146 os.path.join(path1, path2, …) glob.glob(pathname) 用法 123456789101112131415161718192021222324252627#!/usr/bin/env python3import sysimport pandas as pdimport globimport osinput_file = \"D:/PycharmProjects/DataProcess/testdata.csv\"output_file1 = \"D:/PycharmProjects/DataProcess/beijingsite_out.csv\"output_file2 = \"D:/PycharmProjects/DataProcess/tianjinsite_out.csv\"output_file3 = \"D:/PycharmProjects/DataProcess/mergeofsite_out.csv\"data_frame = pd.read_csv(input_file)#data_frame['Cost'] = data_frame['Cost'].str.strip('$').astype(float)#data_frame_value_meets_condition = data_frame.log[data_frame['supplier Name'].str.contains('Z')|(data_frame['Cost'] &gt; 600.0), :]data_frame_value_meet_condition1 = data_frame.loc[(data_frame['城市'].str.contains('北京')), :]data_frame_value_meet_condition2 = data_frame.loc[(data_frame['城市'].str.contains('天津')), :]print(data_frame_value_meet_condition1)data_frame_value_meet_condition1.to_csv(output_file1, index=False)data_frame_value_meet_condition2.to_csv(output_file2, index=False)#all_files = glob.glob(os.path.join(input_file, 'sales_*'）all_files = glob.glob(os.path.join(input_file))all_data_frames = []for file in all_files: data_frame = pd.read_csv(file, index_col=None) all_data_frames.append(data_frame)data_frame_concat = pd.concat(all_data_frames, axis=0, ignore_index=True)data_frame_concat.to_csv(output_file3, index=False) 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485#!/usr/bin/env python3import sysimport pandas as pdimport globimport osinput_file = \"D:/PycharmProjects/DataProcess/站点列表-2018.11.08起.csv\"output_file1 = \"D:/PycharmProjects/DataProcess/河南site/郑州site_out.csv\"output_file2 = \"D:/PycharmProjects/DataProcess/河南site/开封site_out.csv\"output_file3 = \"D:/PycharmProjects/DataProcess/河南site/洛阳site_out.csv\"output_file4 = \"D:/PycharmProjects/DataProcess/河南site/平顶山site_out.csv\"output_file5 = \"D:/PycharmProjects/DataProcess/河南site/安阳site_out.csv\"output_file6 = \"D:/PycharmProjects/DataProcess/河南site/鹤壁site_out.csv\"output_file7 = \"D:/PycharmProjects/DataProcess/河南site/新乡site_out.csv\"output_file8 = \"D:/PycharmProjects/DataProcess/河南site/焦作site_out.csv\"output_file9 = \"D:/PycharmProjects/DataProcess/河南site/濮阳site_out.csv\"output_file10 = \"D:/PycharmProjects/DataProcess/河南site/许昌site_out.csv\"output_file11 = \"D:/PycharmProjects/DataProcess/河南site/漯河site_out.csv\"output_file12 = \"D:/PycharmProjects/DataProcess/河南site/三门峡site_out.csv\"output_file13 = \"D:/PycharmProjects/DataProcess/河南site/南阳site_out.csv\"output_file14 = \"D:/PycharmProjects/DataProcess/河南site/商丘site_out.csv\"output_file15 = \"D:/PycharmProjects/DataProcess/河南site/信阳site_out.csv\"output_file16 = \"D:/PycharmProjects/DataProcess/河南site/周口site_out.csv\"output_file17 = \"D:/PycharmProjects/DataProcess/河南site/驻马店site_out.csv\"output_file18 = \"D:/PycharmProjects/DataProcess/河南site/济源site_out.csv\"# output_file2 = \"D:/PycharmProjects/DataProcess/河南site/巩义site_out.csv\"# output_file2 = \"D:/PycharmProjects/DataProcess/河南site/兰考site_out.csv\"# output_file2 = \"D:/PycharmProjects/DataProcess/河南site/汝州site_out.csv\"# output_file2 = \"D:/PycharmProjects/DataProcess/河南site/滑县site_out.csv\"# output_file2 = \"D:/PycharmProjects/DataProcess/河南site/长垣site_out.csv\"# output_file2 = \"D:/PycharmProjects/DataProcess/河南site/邓州site_out.csv\"# output_file2 = \"D:/PycharmProjects/DataProcess/河南site/永城site_out.csv\"# output_file2 = \"D:/PycharmProjects/DataProcess/河南site/固始site_out.csv\"# output_file2 = \"D:/PycharmProjects/DataProcess/河南site/鹿邑site_out.csv\"# output_file2 = \"D:/PycharmProjects/DataProcess/河南site/新蔡site_out.csv\"output_file19 = \"D:/PycharmProjects/DataProcess/河南site/mergeofsite_out.csv\"data_frame = pd.read_csv(input_file)#data_frame['Cost'] = data_frame['Cost'].str.strip('$').astype(float)#data_frame_value_meets_condition = data_frame.log[data_frame['supplier Name'].str.contains('Z')|(data_frame['Cost'] &gt; 600.0), :]data_frame_value_meet_condition1 = data_frame.loc[(data_frame['城市'].str.contains('郑州')), :]data_frame_value_meet_condition2 = data_frame.loc[(data_frame['城市'].str.contains('开封')), :]data_frame_value_meet_condition3 = data_frame.loc[(data_frame['城市'].str.contains('洛阳')), :]data_frame_value_meet_condition4 = data_frame.loc[(data_frame['城市'].str.contains('平顶山')), :]data_frame_value_meet_condition5 = data_frame.loc[(data_frame['城市'].str.contains('安阳')), :]data_frame_value_meet_condition6 = data_frame.loc[(data_frame['城市'].str.contains('鹤壁')), :]data_frame_value_meet_condition7 = data_frame.loc[(data_frame['城市'].str.contains('新乡')), :]data_frame_value_meet_condition8 = data_frame.loc[(data_frame['城市'].str.contains('焦作')), :]data_frame_value_meet_condition9 = data_frame.loc[(data_frame['城市'].str.contains('濮阳')), :]data_frame_value_meet_condition10 = data_frame.loc[(data_frame['城市'].str.contains('许昌')), :]data_frame_value_meet_condition11 = data_frame.loc[(data_frame['城市'].str.contains('漯河')), :]data_frame_value_meet_condition12 = data_frame.loc[(data_frame['城市'].str.contains('三门峡')), :]data_frame_value_meet_condition13 = data_frame.loc[(data_frame['城市'].str.contains('南阳')), :]data_frame_value_meet_condition14 = data_frame.loc[(data_frame['城市'].str.contains('商丘')), :]data_frame_value_meet_condition15 = data_frame.loc[(data_frame['城市'].str.contains('信阳')), :]data_frame_value_meet_condition16 = data_frame.loc[(data_frame['城市'].str.contains('周口')), :]data_frame_value_meet_condition17 = data_frame.loc[(data_frame['城市'].str.contains('驻马店')), :]data_frame_value_meet_condition18 = data_frame.loc[(data_frame['城市'].str.contains('济源')), :]print(data_frame_value_meet_condition1)data_frame_value_meet_condition1.to_csv(output_file1, index=False)data_frame_value_meet_condition2.to_csv(output_file2, index=False)data_frame_value_meet_condition3.to_csv(output_file3, index=False)data_frame_value_meet_condition4.to_csv(output_file4, index=False)data_frame_value_meet_condition5.to_csv(output_file5, index=False)data_frame_value_meet_condition6.to_csv(output_file6, index=False)data_frame_value_meet_condition7.to_csv(output_file7, index=False)data_frame_value_meet_condition8.to_csv(output_file8, index=False)data_frame_value_meet_condition9.to_csv(output_file9, index=False)data_frame_value_meet_condition10.to_csv(output_file10, index=False)data_frame_value_meet_condition11.to_csv(output_file11, index=False)data_frame_value_meet_condition12.to_csv(output_file12, index=False)data_frame_value_meet_condition13.to_csv(output_file13, index=False)data_frame_value_meet_condition14.to_csv(output_file14, index=False)data_frame_value_meet_condition15.to_csv(output_file15, index=False)data_frame_value_meet_condition16.to_csv(output_file16, index=False)data_frame_value_meet_condition17.to_csv(output_file17, index=False)data_frame_value_meet_condition18.to_csv(output_file18, index=False)#all_files = glob.glob(os.path.join(input_file, 'sales_*'）all_files = glob.glob(os.path.join(input_file，))all_data_frames = []for file in all_files: data_frame = pd.read_csv(file, index_col=None) all_data_frames.append(data_frame)data_frame_concat = pd.concat(all_data_frames, axis=0, ignore_index=True)data_frame_concat.to_csv(output_file19, index=False) 前面两个程序合并失败了，主要是这个语句：all_files = glob.glob(os.path.join(input_file，))用错了正确的如下： 1234567891011121314151617181920212223242526272829#!/usr/bin/env python3import sysimport pandas as pdimport globimport osinput_file = \"D:/PycharmProjects/DataProcess/testdata.csv\"output_file1 = \"D:/PycharmProjects/DataProcess/beitian/beijingsite_out.csv\"output_file2 = \"D:/PycharmProjects/DataProcess/beitian/tianjinsite_out.csv\"output_file3 = \"D:/PycharmProjects/DataProcess/beitian/mergeofsite_out.csv\"data_frame = pd.read_csv(input_file)#data_frame['Cost'] = data_frame['Cost'].str.strip('$').astype(float)#data_frame_value_meets_condition = data_frame.log[data_frame['supplier Name'].str.contains('Z')|(data_frame['Cost'] &gt; 600.0), :]data_frame_value_meet_condition1 = data_frame.loc[(data_frame['城市'].str.contains('北京')), :]data_frame_value_meet_condition2 = data_frame.loc[(data_frame['城市'].str.contains('天津')), :]print(data_frame_value_meet_condition1)data_frame_value_meet_condition1.to_csv(output_file1, index=False)data_frame_value_meet_condition2.to_csv(output_file2, index=False)#all_files = glob.glob(os.path.join(input_file, 'sales_*'）input_path = \"D:/PycharmProjects/DataProcess/beitian\"all_files = glob.glob(os.path.join(input_path, '*.csv'))print(all_files)all_data_frames = []for file in all_files: data_frame = pd.read_csv(file, index_col=None) all_data_frames.append(data_frame)data_frame_concat = pd.concat(all_data_frames, axis=0, ignore_index=True)data_frame_concat.to_csv(output_file3, index=False) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586#!/usr/bin/env python3import sysimport pandas as pdimport globimport osinput_file = \"D:/PycharmProjects/DataProcess/站点列表-2018.11.08起.csv\"output_file1 = \"D:/PycharmProjects/DataProcess/河南site/郑州site_out.csv\"output_file2 = \"D:/PycharmProjects/DataProcess/河南site/开封site_out.csv\"output_file3 = \"D:/PycharmProjects/DataProcess/河南site/洛阳site_out.csv\"output_file4 = \"D:/PycharmProjects/DataProcess/河南site/平顶山site_out.csv\"output_file5 = \"D:/PycharmProjects/DataProcess/河南site/安阳site_out.csv\"output_file6 = \"D:/PycharmProjects/DataProcess/河南site/鹤壁site_out.csv\"output_file7 = \"D:/PycharmProjects/DataProcess/河南site/新乡site_out.csv\"output_file8 = \"D:/PycharmProjects/DataProcess/河南site/焦作site_out.csv\"output_file9 = \"D:/PycharmProjects/DataProcess/河南site/濮阳site_out.csv\"output_file10 = \"D:/PycharmProjects/DataProcess/河南site/许昌site_out.csv\"output_file11 = \"D:/PycharmProjects/DataProcess/河南site/漯河site_out.csv\"output_file12 = \"D:/PycharmProjects/DataProcess/河南site/三门峡site_out.csv\"output_file13 = \"D:/PycharmProjects/DataProcess/河南site/南阳site_out.csv\"output_file14 = \"D:/PycharmProjects/DataProcess/河南site/商丘site_out.csv\"output_file15 = \"D:/PycharmProjects/DataProcess/河南site/信阳site_out.csv\"output_file16 = \"D:/PycharmProjects/DataProcess/河南site/周口site_out.csv\"output_file17 = \"D:/PycharmProjects/DataProcess/河南site/驻马店site_out.csv\"output_file18 = \"D:/PycharmProjects/DataProcess/河南site/济源site_out.csv\"# output_file2 = \"D:/PycharmProjects/DataProcess/河南site/巩义site_out.csv\"# output_file2 = \"D:/PycharmProjects/DataProcess/河南site/兰考site_out.csv\"# output_file2 = \"D:/PycharmProjects/DataProcess/河南site/汝州site_out.csv\"# output_file2 = \"D:/PycharmProjects/DataProcess/河南site/滑县site_out.csv\"# output_file2 = \"D:/PycharmProjects/DataProcess/河南site/长垣site_out.csv\"# output_file2 = \"D:/PycharmProjects/DataProcess/河南site/邓州site_out.csv\"# output_file2 = \"D:/PycharmProjects/DataProcess/河南site/永城site_out.csv\"# output_file2 = \"D:/PycharmProjects/DataProcess/河南site/固始site_out.csv\"# output_file2 = \"D:/PycharmProjects/DataProcess/河南site/鹿邑site_out.csv\"# output_file2 = \"D:/PycharmProjects/DataProcess/河南site/新蔡site_out.csv\"output_file19 = \"D:/PycharmProjects/DataProcess/河南site/mergeofsite_out.csv\"data_frame = pd.read_csv(input_file)#data_frame['Cost'] = data_frame['Cost'].str.strip('$').astype(float)#data_frame_value_meets_condition = data_frame.log[data_frame['supplier Name'].str.contains('Z')|(data_frame['Cost'] &gt; 600.0), :]data_frame_value_meet_condition1 = data_frame.loc[(data_frame['城市'].str.contains('郑州')), :]data_frame_value_meet_condition2 = data_frame.loc[(data_frame['城市'].str.contains('开封')), :]data_frame_value_meet_condition3 = data_frame.loc[(data_frame['城市'].str.contains('洛阳')), :]data_frame_value_meet_condition4 = data_frame.loc[(data_frame['城市'].str.contains('平顶山')), :]data_frame_value_meet_condition5 = data_frame.loc[(data_frame['城市'].str.contains('安阳')), :]data_frame_value_meet_condition6 = data_frame.loc[(data_frame['城市'].str.contains('鹤壁')), :]data_frame_value_meet_condition7 = data_frame.loc[(data_frame['城市'].str.contains('新乡')), :]data_frame_value_meet_condition8 = data_frame.loc[(data_frame['城市'].str.contains('焦作')), :]data_frame_value_meet_condition9 = data_frame.loc[(data_frame['城市'].str.contains('濮阳')), :]data_frame_value_meet_condition10 = data_frame.loc[(data_frame['城市'].str.contains('许昌')), :]data_frame_value_meet_condition11 = data_frame.loc[(data_frame['城市'].str.contains('漯河')), :]data_frame_value_meet_condition12 = data_frame.loc[(data_frame['城市'].str.contains('三门峡')), :]data_frame_value_meet_condition13 = data_frame.loc[(data_frame['城市'].str.contains('南阳')), :]data_frame_value_meet_condition14 = data_frame.loc[(data_frame['城市'].str.contains('商丘')), :]data_frame_value_meet_condition15 = data_frame.loc[(data_frame['城市'].str.contains('信阳')), :]data_frame_value_meet_condition16 = data_frame.loc[(data_frame['城市'].str.contains('周口')), :]data_frame_value_meet_condition17 = data_frame.loc[(data_frame['城市'].str.contains('驻马店')), :]data_frame_value_meet_condition18 = data_frame.loc[(data_frame['城市'].str.contains('济源')), :]print(data_frame_value_meet_condition1)data_frame_value_meet_condition1.to_csv(output_file1, index=False)data_frame_value_meet_condition2.to_csv(output_file2, index=False)data_frame_value_meet_condition3.to_csv(output_file3, index=False)data_frame_value_meet_condition4.to_csv(output_file4, index=False)data_frame_value_meet_condition5.to_csv(output_file5, index=False)data_frame_value_meet_condition6.to_csv(output_file6, index=False)data_frame_value_meet_condition7.to_csv(output_file7, index=False)data_frame_value_meet_condition8.to_csv(output_file8, index=False)data_frame_value_meet_condition9.to_csv(output_file9, index=False)data_frame_value_meet_condition10.to_csv(output_file10, index=False)data_frame_value_meet_condition11.to_csv(output_file11, index=False)data_frame_value_meet_condition12.to_csv(output_file12, index=False)data_frame_value_meet_condition13.to_csv(output_file13, index=False)data_frame_value_meet_condition14.to_csv(output_file14, index=False)data_frame_value_meet_condition15.to_csv(output_file15, index=False)data_frame_value_meet_condition16.to_csv(output_file16, index=False)data_frame_value_meet_condition17.to_csv(output_file17, index=False)data_frame_value_meet_condition18.to_csv(output_file18, index=False)#all_files = glob.glob(os.path.join(input_file, 'sales_*'）input_path = \"D:/PycharmProjects/DataProcess/河南site\"all_files = glob.glob(os.path.join(input_path, '*site_out.csv'))all_data_frames = []for file in all_files: data_frame = pd.read_csv(file, index_col=None) all_data_frames.append(data_frame)data_frame_concat = pd.concat(all_data_frames, axis=0, ignore_index=True)data_frame_concat.to_csv(output_file19, index=True) 根据监测站点编号获取对应的空气质量指标数据这一步需要解决的问题是： 对csv文件中指定列进行抽取 遍历所有csv文件抽取所需数据并分别保存 对抽取的数据文件进行合并 此例表示使用loc对某列的所有行数据进行抽取 123456789#!/usr/bin/env python3import sysimport pandas as pdinput_file = \"D:/PycharmProjects/DataProcess/站点_20180101-20181231/china_sites_20181108.csv\"output_file = \"D:/PycharmProjects/DataProcess/河南air/安阳_20181108_out.csv\"data_frame = pd.read_csv(input_file)data_frame_column_by_name = data_frame.loc[:, ['date', 'hour', 'type', '1818A', '1819A','1820A', '1821A', '1822A', '3141A']]data_frame_column_by_name.to_csv(output_file, index=False) python 中的for循环 123print('my name is')for i in range(5): print('Jimmy five times(' + str(i) + ')') 输出是 123456my name isJimmy five times(0)Jimmy five times(1)Jimmy five times(2)Jimmy five times(3)Jimmy five times(4) 报错：KeyError: &quot;None of [Index([...],\\n dtype=&#39;object&#39;)] are in the [columns]&quot; 安阳： 1234567891011121314151617#!/usr/bin/env python3import sysimport pandas as pdimport ospath1 = \"D:/PycharmProjects/DataProcess/站点_20180101-20181231/\"# for i in os.walk(path1):# PathArr = i# print(PathArr)files = os.listdir(path1)for file in files: # print(file) input_file = \"D:/PycharmProjects/DataProcess/站点_20180101-20181231/\" + file output_file = \"D:/PycharmProjects/DataProcess/河南air/安阳/安阳_\" + file + \"_out.csv\" data_frame = pd.read_csv(input_file) data_frame_column_by_name = data_frame.loc[:, ['date', 'hour', 'type', '1818A', '1819A','1820A', '1821A', '1822A', '3141A']] data_frame_column_by_name.to_csv(output_file, index=False) 最后再根据把安阳市的所有站点的2018年所有数据整合到一起 123456789101112131415#!/usr/bin/env python3import sysimport pandas as pdimport osimport globoutput_file = \"D:/PycharmProjects/DataProcess/河南air/河南air_20180101-20181231/安阳/merge2018.csv\"input_path = \"D:/PycharmProjects/DataProcess/河南air/河南air_20180101-20181231/安阳\"all_files = glob.glob(os.path.join(input_path, '*_out.csv'))all_data_frames = []for file in all_files: data_frame = pd.read_csv(file, index_col=None) all_data_frames.append(data_frame)data_frame_concat = pd.concat(all_data_frames, axis=0, ignore_index=True)data_frame_concat.to_csv(output_file, index=False) 然后在整合的数据中在抽取，只取出PM2.5的小时变化数据 1234567891011121314151617181920212223242526272829303132333435363738#!/usr/bin/env python3import sysimport pandas as pdimport osimport glob# Part0：循环读取2018年365天的安阳的站点数据并按天保存为365个文件path = &quot;D:/PycharmProjects/DataProcess/site_20180101-20181231/&quot;# for i in os.walk(path1):# PathArr = i# print(PathArr)files = os.listdir(path)for file in files: # print(file) input_file = &quot;D:/PycharmProjects/DataProcess/site_20180101-20181231/&quot; + file output_file = &quot;D:/PycharmProjects/DataProcess/HNair/HNair_20180101-20181231/AnYang/AnYang_&quot; + file data_frame = pd.read_csv(input_file) data_frame_column_by_name = data_frame.loc[:, [&apos;date&apos;, &apos;hour&apos;, &apos;type&apos;, &apos;1818A&apos;, &apos;1819A&apos;,&apos;1820A&apos;, &apos;1821A&apos;, &apos;1822A&apos;, &apos;3141A&apos;]] data_frame_column_by_name.to_csv(output_file, index=False)# Part1：把安阳市的所有站点的2018年所有数据整合到一起output_file1 = &quot;D:/PycharmProjects/DataProcess/HNair/HNair_20180101-20181231/AnYang/merge2018.csv&quot;input_path = &quot;D:/PycharmProjects/DataProcess/HNair/HNair_20180101-20181231/AnYang&quot;all_files = glob.glob(os.path.join(input_path, &apos;*.csv&apos;))all_data_frames = []for file in all_files: data_frame = pd.read_csv(file, index_col=None) all_data_frames.append(data_frame)data_frame_concat = pd.concat(all_data_frames, axis=0, ignore_index=True)data_frame_concat.to_csv(output_file1, index=False)# Part2：从安阳所有站点2018年数据中抽取PM2.5的数据input_file1 = output_file1output_file2 = &quot;D:/PycharmProjects/DataProcess/HNair/HNair_20180101-20181231/AnYang/merge2018_PM2.5.csv&quot;data_frame = pd.read_csv(input_file1)data_frame_value_meet_condition = data_frame.loc[data_frame[&apos;type&apos;] == &apos;PM2.5&apos;, :]print(data_frame_value_meet_condition)data_frame_value_meet_condition.to_csv(output_file2, index=False)","categories":[{"name":"Python","slug":"Python","permalink":"http://ch206265.github.io/categories/Python/"}],"tags":[{"name":"pandas","slug":"pandas","permalink":"http://ch206265.github.io/tags/pandas/"},{"name":"python","slug":"python","permalink":"http://ch206265.github.io/tags/python/"},{"name":"数据处理","slug":"数据处理","permalink":"http://ch206265.github.io/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"}]},{"title":"npm install包运行出错","slug":"set-the-password-for-hexo","date":"2019-11-25T08:51:53.000Z","updated":"2019-12-16T15:26:07.706Z","comments":true,"path":"2019/11/25/set-the-password-for-hexo/","link":"","permalink":"http://ch206265.github.io/2019/11/25/set-the-password-for-hexo/","excerpt":"最近想要给博客文章做个加密，一开始也是无从下手，但是还好有篇博文：Hexo 博客加密功能添加 | Hailiang’s Blog这里面介绍了两个博客加密插件hexo-blog-encrypt和hexo-encrypt最初按照介绍，安装hexo-blog-encrypt但是遇到了困难","text":"最近想要给博客文章做个加密，一开始也是无从下手，但是还好有篇博文：Hexo 博客加密功能添加 | Hailiang’s Blog这里面介绍了两个博客加密插件hexo-blog-encrypt和hexo-encrypt最初按照介绍，安装hexo-blog-encrypt但是遇到了困难 123$ npm installnpm WARN babel-eslint@10.0.3 requires a peer of eslint@&gt;= 4.12.1 but none is installed.You must install peer dependencies yourself. 不知道是什么意思，上网搜索了一下，找到了这篇博文：npm install 包运行出错 - 德尼的博客 - CSDN博客 ，直接复制了里面的答案： 1npm install eslint@4.x babel-eslint@8 --save-dev 但是一直成功不了，知道看到了这篇文章，才明白了报错的含义，就是在package.json中缺少了两个依赖： 12\"babel-eslint\": \"^10.0.3\",\"eslint\": \"^4.12.1\" 需要我们手动安装……而之前直接复制的npm install eslint@4.x babel-eslint@8 --save-dev其实也是安装这两个依赖的，但是，它安装好后是直接在package.json中新写一个dependencies，没和原来的格式进行合并。最后，现在虽然装好了，但是也还发现了个bug，就是对于有目录的文章，hexo-blog-encrypt这个插件会使侧边的目录导航栏显示失效。","categories":[{"name":"学习工具","slug":"学习工具","permalink":"http://ch206265.github.io/categories/%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"建站笔记","slug":"建站笔记","permalink":"http://ch206265.github.io/tags/%E5%BB%BA%E7%AB%99%E7%AC%94%E8%AE%B0/"},{"name":"hexo-blog-encrypt","slug":"hexo-blog-encrypt","permalink":"http://ch206265.github.io/tags/hexo-blog-encrypt/"},{"name":"hexo-encrypt","slug":"hexo-encrypt","permalink":"http://ch206265.github.io/tags/hexo-encrypt/"}]},{"title":"初次安装Ubuntu18.04","slug":"first-setup-ubuntu","date":"2019-11-25T08:51:11.000Z","updated":"2019-11-30T08:01:46.700Z","comments":true,"path":"2019/11/25/first-setup-ubuntu/","link":"","permalink":"http://ch206265.github.io/2019/11/25/first-setup-ubuntu/","excerpt":"2019/11/23 15:34 主要解决的问题：1、解决 “明明C盘还有几十G可以使用但是创建压缩卷时可压缩竟然是0”2、解决“安装完之后才知道是UEFI启动模式，Easy BCD新添加条目变成灰色不可用” 一、设备情况双硬盘电脑：固态硬盘（win系统盘）+机械硬盘BIOS模式：UEFI","text":"2019/11/23 15:34 主要解决的问题：1、解决 “明明C盘还有几十G可以使用但是创建压缩卷时可压缩竟然是0”2、解决“安装完之后才知道是UEFI启动模式，Easy BCD新添加条目变成灰色不可用” 一、设备情况双硬盘电脑：固态硬盘（win系统盘）+机械硬盘BIOS模式：UEFI 二、准备工作1、下载Ubuntu镜像我是直接拷贝了同学的；你也可以从下面的网址中下载系统下载 | Ubuntu 2、在磁盘中压缩出未分配的空闲区域安装Ubuntu需要分配四个磁盘分区分别给“/”、“/home”、“swap”和“/boot”。（具体分配体现在安装过程，现在这一步骤只是先把他们需要的磁盘空间给压缩出来）其中，挂载点“/”是Ubuntu系统盘相当于win系统的C盘；挂载点“/home”是用户文件夹，相当于win系统的Users；挂载点“swap”是交换空间，相当于win的虚拟内存；而挂载点“/boot”则是Ubuntu的启动引导空间。（什么是分区/主分区/逻辑分区/挂载点）由于电脑是双硬盘，固态硬盘（win系统盘）+机械硬盘，压缩出分配给这四个挂载点的磁盘空间时需要注意以下几点： 注意1：在机械硬盘和装win系统的固态硬盘上分别压缩出一个空闲区域机械硬盘上压缩出一个较大空闲区域后，在win10系统盘（固态）上再压缩出大约500MB的空闲区域。机械硬盘上压缩出来的空闲空间主要分配给：挂载点“/”、“/home”、“swap”；在装win系统的固态硬盘上压缩出的空间分配给挂载点“/boot”。 为什么不把挂载点“/”、“/home”、“swap”和“/boot”的分配统一放在固态盘或者机械盘？统一放在固态盘就和win系统装在一起了，能不在一起就别再在一起；统一都放在机械硬盘中，“/boot”分区没在win的系统盘，容易开机引导失效，具体描述就在下面⬇ 为什么挂载点“/boot”分区要和win系统盘在一起？参看这篇博文的讲解，如果不这么办，会出现Ubuntu开机时光标一直在左上角闪烁无法进入系统的问题，我按照博文中的描述，一次就安装成功了，没有出现左上角光标一直闪烁开机引导失效的情况。注意2：明明C盘还有几十G可以使用但是创建压缩卷时可压缩竟然是0怎么办一般情况下，我们使用win10自带的磁盘管理功能就可以从磁盘上压缩出空闲空间，但是也有一些例外。明明C盘还有几十G可以使用但是创建压缩卷时可压缩竟然是0？？我遇见了……网上查了一些方法，比如磁盘清理，清了的确不少的东西，但是还不行；又有人说磁盘清理之后要碎片整合，也搞了，还是不行。所以，最后用——DiskGenius了。在我多次使用过程中偶然发现，用过DiskGenius后，再用win10磁盘管理中自带的“压缩卷”功能时，可压缩空间突然变多了，已经不是0了……，这样再调整压缩空间大小的时候就不必用DiskGenius，每次重启进入PE了。3、安装开机引导程序，Easy BCD或者Easy UEFIEasyBCD - DownloadEasyUEFI - Download 4、制作U盘启动盘Create a bootable USB stick on Windows | Ubuntu tutorials 5、进入BIOS中，将开机启动设置为从U盘启动设置方法，参考此链接三、安装过程安装过程主要参考这篇博文：Win10+Ubuntu18.04双系统安装指南（一）（实操真谛） - 索命的博客 - CSDN博客Windows + Ubuntu 16.04 双系统安装详细教程 - flyyufenfei的博客 - CSDN博客简单总结以下需要注意的点有：1、断网安装过程需要断网吗？讲道理都可以，但是断网的话在安装的时候不检查更新了，安装的更快，并且在这篇文章中说到，16.04安装时必须断网（原文说是“拔掉网线”），不然会导致“选地图处安装程序卡死、安装失败”。因此我是断网安装的（但是安装的是18.04），安装成功。2、 键盘布局什么的这些设置按照默认，英语（美国）就行了3、 “更新和其他软件”“更新和其他软件”这一步，选择“最小安装”，去掉“安装Ubuntu时下载更新”，勾选“为图形或无线硬件，以及其他媒体格式安装第三方软件”（在没有网的情况下这么设置，并且这样在安装的过程中就不会自动检查更新了，提高了安装的速度）4、“安装类型”“安装类型”这一步选择“其他选项”自己创建调整分区，随后便进入到自己创建分区的关键环节，需要创建前文提到的“/”、“/home”、“swap”和“/boot”四个分区，前三个建在机械硬盘的那个空闲空间中，“/boot”分区创建在固态硬盘的空闲空间中，其中“/boot”分区比较关键一点，容易出错。在这一步，EFI引导和boot引导的设置有所不同，需要根据自己设置的启动方式确定。总体来讲，如果是Bios的启动模式是UEFI，对应EFI引导，则不需要”/boot”，创建分区的时候“用于”设置为“EFI系统分区”：图片来自：https://blog.csdn.net/flyyufenfei/article/details/79187656Bios的启动模式如果是Legacy，对应的就要设置Boot引导，需要创建“/Boot”分区：图片来自：https://blog.csdn.net/flyyufenfei/article/details/79187656其他分区根据自己需要结合参考文章进行设置，这里不再总结了。6、“安装启动引导器的设备”然后不要直接点击”安装“，还是在进行分区设置的界面左下方，有一个“安装启动引导器的设备”的设置选项。这里如果是EFI引导的话，选择EFI引导对应的分区；若是Boot引导的话，就选择”/boot“分区所在的设备。图片来自：https://blog.csdn.net/flyyufenfei/article/details/791876567、 最后最后会出现一个你配置好的分区表让你检查是否有误，无误后继续；然后会出现个地图让你选择地域（选上海）；然后设置键盘布局，设置设备名称/账号名称/开机密码等；最后进入到安装状态；安装完成后，拔下U盘重启，更改Bios的启动项为原来的“操作系统的启动管理员”。四、使用Easy BCD或者Easy UEFI进行引导设置由于我安装的时候没有意识到自己是UEFI模式，完全按照网上的教程只在固态盘创建了个”/boot“分区，然后参考这篇博文，使用Easy BCD的时候才有所提示，并且新添加条目时都是灰色：（图片来自：https://blog.csdn.net/qiusuoxiaozi/article/details/72807104）此时我以为自己第一次安装要凉了，结果网上搜到有讲，可以使用Easy UEFI进行引导，并按照这篇博客完成了引导设置（只看Easy UEFI的使用这部分就可以了）。但是有一个比较奇怪的地方，我在Easy UEFI中找之前boot分区(或者efi系统分区)所在的那500MB空间时无法选中，但是在固态硬盘中还有一块260MB的efi分区，在这个分区中找到了grubx64.efi（这个貌似是windows的efi引导区）我也不知道为什么……最终重启后出现了让选择启用那个系统的界面，直接回车就进入到了Ubuntu系统，然后自动提示需要更新以下所选择语言的一些东西，具体是什么忘记了……第一次安装就这么“成功”了，限于自己的认识，这可能并不是真正的成功，或许有很多隐藏的小隐患……但是，只能先这样用着了，毕竟目前也没什么问题出现……此外，这只是针对自己遇到的情况的一些总结，并不具有普遍性…… 注：由于我以为在Easy UEFI中选择了那个260MB的分区进行引导，故而500MB的那个没有用了，就把500MB的分区给格式化了，然后悲剧就来了，引导崩溃了，显示Minimal BASH like line editing is supported. For the first word, TAB lists possible command completions. anywhere else TAB lists possible device or file completions.错误，导致我win10和ubuntu两个系统都无法进入了，最后从这篇文章中找到了解决办法，使用bootrepair,但是这个工具也只能让我从新进入到win10中，ubuntu还是没法进入，无奈就重新安装了（除了这次手抽，应该还算是一次安装成功^_^）。重新安装后就注意到自己是UEFI 模式了，就专门在500MB 的分区选择efi系统分区，但是奇怪的是，在用Easy UEFI引导的时候500MB 的那个分区仍然是不可选的，无奈还是选择了260MB的那个…… 五、ubuntu系统安装好后https://blog.csdn.net/Jesse_Mx/article/details/52816928安装Ubuntu后必须要做的几件事(一)","categories":[{"name":"学习工具","slug":"学习工具","permalink":"http://ch206265.github.io/categories/%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://ch206265.github.io/tags/Ubuntu/"},{"name":"Linux","slug":"Linux","permalink":"http://ch206265.github.io/tags/Linux/"}]},{"title":"lean-git","slug":"lean-git","date":"2019-11-25T08:44:31.409Z","updated":"2019-12-16T15:25:19.163Z","comments":true,"path":"2019/11/25/lean-git/","link":"","permalink":"http://ch206265.github.io/2019/11/25/lean-git/","excerpt":"起因 为了实现博客文章的及时更新，需要多端实现Hexo同步，在网上查找的大部分文章都是基于GitHub，创建分支，实现此功能的，因此便简单学习一下git的基本操作，在此做下记录。 初次用到的命令本文主要参考《GitHub入门与实践》这本书，目前使用到的命令是： git status、git branch git add、git add –all、git add –a git commit -m “log_message”、git commit git diff、git diff HEAD git remote add origin sshURL、git remote rm origin git push origin branchname git pull origin branchname","text":"起因 为了实现博客文章的及时更新，需要多端实现Hexo同步，在网上查找的大部分文章都是基于GitHub，创建分支，实现此功能的，因此便简单学习一下git的基本操作，在此做下记录。 初次用到的命令本文主要参考《GitHub入门与实践》这本书，目前使用到的命令是： git status、git branch git add、git add –all、git add –a git commit -m “log_message”、git commit git diff、git diff HEAD git remote add origin sshURL、git remote rm origin git push origin branchname git pull origin branchname 对这些命令的初步认识 git add、git commit、git push之见的关系，以及git diff 和git diff HEAD到底是谁和谁在比较差异。 通过git add、git commit、git push理解git的三个区： ①工作区（working tree）②暂存区（index/stage）③本地仓库区（.git） git diff 和git diff HEAD的区别： git diff 命令可以查看当前工作树与暂存区之间的差别。git diff HEAD命令可以查看工作树和最新提交之间的差别。另外，退出git diff HEAD需要在那个窗口按q git commit -m “logmessage”只是在引号中写一些本次commit的一些备注，简短的一句话；如果写完git commit后回车，那么会进入vim编辑器中，在界面的左上角开始可以记述详细提交信息。 提交格式如下： 第一行：用一行文字简述提交更改的内容 第二行：空行 第三行及以后：记述更改的原因和详细内容 下图是刚进入编辑器的界面，按下字母c就可以进入编辑状态： 按下字母后按照上文提到的提交格式，在左上角开始编辑；编辑完成之后按下Esc，接着连按两次大写的Z，便可退出编辑器： 最后，下面是我在使用这些命令时的一些截图，只是为了长时间不用下次看到后能够快速记起： 此部分建议参考： git diff与git diff HEAD – file - 二楼后座的专栏 - CSDN博客 git的三个区域工作区，缓存区，暂存区 - minolk的博客 - CSDN博客 一些推荐最后推荐一些对git基础操作总结的比较好的文章 Git简易教程笔记（1） - Jesse_Mx的博客 - CSDN博客 Git简易教程笔记（2） - Jesse_Mx的博客 - CSDN博客","categories":[],"tags":[]},{"title":"多终端同步Hexo博客","slug":"Multiterminal-synchronization-of-hexo-blog","date":"2019-11-21T17:14:07.000Z","updated":"2019-12-16T14:51:23.533Z","comments":true,"path":"2019/11/22/Multiterminal-synchronization-of-hexo-blog/","link":"","permalink":"http://ch206265.github.io/2019/11/22/Multiterminal-synchronization-of-hexo-blog/","excerpt":"记录一下实现多终端同步Hexo博客的一些操作，学习的过程中意外学习了一些git的基本操作，并记录在另外一篇博文中。 整体思路根据下面总结的思路配合上面的提到的参考文章，相信如果下次还需要进行这样的操作，也会很快就熟悉了。首先需要知道Hexo在本地和在GitHub上的文件是两个不同的东西。本地的主要是部署文件包括了自己写的所有文章的MarkDown文件，主题文件等等；上传到GitHub中的文件是部署文件渲染过后的文件，我们最终访问GitHubName.github.io看到的个人站点其实就是这些保存在GitHub中渲染过的东西。想要实现多端同步，关键点是让多台电脑上都有最新的部署文件，也就是那个本地文件，因此我们可以利用git实现这一需求。","text":"记录一下实现多终端同步Hexo博客的一些操作，学习的过程中意外学习了一些git的基本操作，并记录在另外一篇博文中。 整体思路根据下面总结的思路配合上面的提到的参考文章，相信如果下次还需要进行这样的操作，也会很快就熟悉了。首先需要知道Hexo在本地和在GitHub上的文件是两个不同的东西。本地的主要是部署文件包括了自己写的所有文章的MarkDown文件，主题文件等等；上传到GitHub中的文件是部署文件渲染过后的文件，我们最终访问GitHubName.github.io看到的个人站点其实就是这些保存在GitHub中渲染过的东西。想要实现多端同步，关键点是让多台电脑上都有最新的部署文件，也就是那个本地文件，因此我们可以利用git实现这一需求。 大致流程 到GitHubName.github.io这个仓库，新建分支命名为hexo（这个新建的branch就是为了存储本地的部署文件），并将新建的hexo分支设置为default分支； 然后在老电脑上（有本地部署文件的电脑）使用git clone，把hexo仓库克隆下来，再把部署文件全部复制粘贴进这个克隆下来的hexo文件夹中（最好使用clone吧，刚开始我是直接把那个仓库的ZIP压缩包下载下来了，但是在某一步一直会报错）； 按照上面的思路分析，我们最终目的是要将hexo的本地部署文件上传到GitHub上，所以按顺序依次使用git init、git add、git diff HEAD、git commit、git remote add origin sshURL 、git push origin hexo等命令，就可以把最新粘贴进分支hexo中的部署文件同步到GitHub中了。这个过程出现的大多数问题应该是由于不熟悉这些git命令造成的。（我刚开始尝试时遇到了很多问题，详见文末） 然后在新电脑上安装git、node.js、Hexo环境、以及生成SSH添加到GitHub。 新电脑上的准备工作就绪之后，把hexo分支git clone下来，然后就可以和在原来电脑上一样进行写作了。写完之后一般按照 git init、git add、git diff HEAD、git commit、git remote add origin sshURL 、git push origin hexo。其中git remote add origin sshURL也不必每次都弄。 上一步只是把最新的部署文件上传到了GitHub中，但是并没有对其渲染，所以还得依次执行Hexo 的命令：hexo clean 、hexo g、hexo s、hexo d。 最后，这样就可以在两台电脑上都写最新的文章并及时发布了。但是在每台电脑上，开始写博客之前，最好都使用git pull origin hexo从GitHub中把最新的部署文件获取下来。 主要参考 利用Hexo在多台电脑上提交和更新github pages博客 -简书如何解决github+Hexo的博客多终端同步问题 - monkey_lzl的博客 -CSDN博客 然后，在新电脑上需要重新安装git、node.js、Hexo环境、以及生成SSH添加到GitHub，这些设置参考下面文章的相应内容即可： hexo史上最全搭建教程 - Fangzh的技术博客 - CSDN博客生成新 SSH 密钥并添加到 ssh-agent - GitHub 帮助 遇到的一些问题 github连接远程仓库时出现Warning: Permanently added the RSA host key for IP address *** …… - comeonbabe_的博客 - CSDN博客 Git提交时提示‘The file will have its original line endings in your working directory’ - 刘俊涛的博客 - 博客园 Git 提示fatal: remote origin already exists错误解决办法 - Ricky - CSDN博客 在gitBash中，复制粘贴的快捷键不是CtrlC/V git push 失败出现error: src refspec master does not match any.解决方案 - 青阳十五的专栏 -CSDN博客 git error - “error: src refspec master does not match any.” -Stack Overflow warning: LF will be replaced by CRLF in 解决办法 -csdn799316120的博客 - CSDN博客 git commit之后进入vim（vi）界面，如何退出 -Amos_luoye的博客 - CSDN博客","categories":[{"name":"学习工具","slug":"学习工具","permalink":"http://ch206265.github.io/categories/%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"git","slug":"git","permalink":"http://ch206265.github.io/tags/git/"},{"name":"hexo","slug":"hexo","permalink":"http://ch206265.github.io/tags/hexo/"},{"name":"建站笔记","slug":"建站笔记","permalink":"http://ch206265.github.io/tags/%E5%BB%BA%E7%AB%99%E7%AC%94%E8%AE%B0/"}]},{"title":"总结-周志华教授如何做研究与写论文","slug":"writing-skills-of-zhou","date":"2019-11-08T17:13:54.000Z","updated":"2019-12-16T14:53:43.415Z","comments":true,"path":"2019/11/09/writing-skills-of-zhou/","link":"","permalink":"http://ch206265.github.io/2019/11/09/writing-skills-of-zhou/","excerpt":"本文由两部分组成，一是对《周志华教授如何做研究与写论文》的总结，二是分享一下彭明辉教授阅读文献方法的流程图。 首先认识什么是研究，研究和研发的区别，其次，做研究，先有话题，再有问题，然后有如何解决问题的想法，最后进行坚实、具体的工作让想法变为现实，写论文就是把这个过程用文字总结一下。 核心思路：Topic-Problem-Idea-Concrete work","text":"本文由两部分组成，一是对《周志华教授如何做研究与写论文》的总结，二是分享一下彭明辉教授阅读文献方法的流程图。 首先认识什么是研究，研究和研发的区别，其次，做研究，先有话题，再有问题，然后有如何解决问题的想法，最后进行坚实、具体的工作让想法变为现实，写论文就是把这个过程用文字总结一下。 核心思路：Topic-Problem-Idea-Concrete work 如何找话题：Topic一级学科划定的研究范围是非广袤，先要进入一个具体的分支学课和领域，并获得必要的了解，即使在一个分支学科和领域中，也有太多的话题 (1)通常老师给你一个topic/然后阅读关于该话题的重要文献，了解该话题的研究历程/研究现状 (2)需要自己找Topic时：找人请教以及自力更生。自力更生时注意要搞清楚自己的领域里最重要的刊物/会议，找来那上面在最近几年的文章，进行阅读，目的时为了知道有哪些topic，读摘要就可以了，可能会花费很多时间 (3)如何选择最适合自己的topic：首先是要自己感兴趣，然后结合自身是否有这方面的知识积累，以及能否获得例如实验数据这样的必要资源 如何产生问题：Problem“问题”是科学研究的心脏 (1)导师给你一个问题 (2)自己产生问题，导师帮你判断。有了问题之后，要搞清楚该问题上已经有过的所有工作，优点是什么，缺点是什么，为什么没有彻底解决问题？自己尝试总结出已有工作的发展线索。 (3)完全自立更生。读发表在重要刊物和会议上的有关自己选定话题的文献，多读一些文献，了解一下有哪些问题是没有解决的，并且关注这个topic上活跃的leading expert的工作、他们的文章中可能会指出一些需要解决的重要问题。宜“小题大做”，忌“大题小做”。对于这个找问题的的过程，是对研究能力极大的锻炼，可能会走很多弯路，有可能一无所成，但是也有可能练就一身硬功夫。 如何产生解决问题的新想法：Ideaidea是要自己产生的，但是和老师讨论和判断idea是必要的。 (1)思考它是不是一个新的idea，是不是合理，是不是有更好的解决办法 剩下的就是concrete workconcrete work不是孤军奋战，遇到不会的，除了自己学习之外，一定要学会与人合作 (1)理论分析，数学功底 (2)试验验证，实验设计能力","categories":[{"name":"生活随笔","slug":"生活随笔","permalink":"http://ch206265.github.io/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"学习方法","slug":"学习方法","permalink":"http://ch206265.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"}]},{"title":"hexo笔记","slug":"preliminary-note-of-hexo","date":"2019-11-08T16:56:24.000Z","updated":"2019-12-16T15:05:11.144Z","comments":true,"path":"2019/11/09/preliminary-note-of-hexo/","link":"","permalink":"http://ch206265.github.io/2019/11/09/preliminary-note-of-hexo/","excerpt":"关于hexo博客的搭建之前参考了很多优秀的博文，当时按照文中的指导大多数想要的功能都可以实现，但是功能以实现我懒癌就犯，时间一久，就不知道当初是怎么操作的了，还得从头搜索。这里先把他们罗列出来，有机会的话再对其进行一些总结。","text":"关于hexo博客的搭建之前参考了很多优秀的博文，当时按照文中的指导大多数想要的功能都可以实现，但是功能以实现我懒癌就犯，时间一久，就不知道当初是怎么操作的了，还得从头搜索。这里先把他们罗列出来，有机会的话再对其进行一些总结。 hexo+github搭建个人博客(超详细教程)主要参照这篇博文下载安装了git、node.js以及使用git初次安装hexo hexo史上最全搭建教程这篇文章从三个方面介绍怎么基于GitHub搭建hexo博客我也对应进行了一些操作。 第一部分：hexo的初级搭建还有部署到github page上，以及个人域名的绑定按照上篇文章安装好git、node.js、hexo后可以参考这篇文章接着， GitHub上建立存储博客的个人仓库 生成SSH添加到GitHub上 将hexo部署到GitHub上，但是后面的个人域名绑定没有做； 第二部分：hexo的基本配置，更换主题，实现多终端工作，以及在coding page部署实现国内外分流 首先，hexo的基本配置 介绍了文件根目录下的config.yml文件； front-matter则是设置markdown博客文件开头，采用统一的yaml格式，用三条短横线分隔，就是用 _ 把它与博客正文分开的那部分，主要是设置文章属性，比如标题title、创建日期date、修改日期updated、标签tags、分类categories、是否开启评论comments等等基本信息(它其实有模板，每次新创建文章是可以自动生成这个文章开头的属性设置，新建文档的头部的模板：scaffold文件夹下的post.md，在这里面修改一下，以后新建的博客文档头部都会是这个样式) _layout，是hexo的布局设置，三种默认布局：post、page、draft，对应的文件夹是source/_posts、source、source/_drafts 我们平时创建新文章使用的hexo new filename 完整版其实应该是hexo new post filename只不过hexo默认的layout布局是post而已 创建草稿的话可以用这个命令hexo new draft filename草稿写完了发布草稿的时候可以hexo publish draft filename 其次，更换主题 GitHub上下载主题； 下载的主题放在根目录的theme文件夹下 在根目录的配置文件config.yml中找到theme关键字的设置，把它改成新添加的主题的名字 _然后每个主题里面也有自己主题的一些配置设置，也在_config.yml文件中，但是这个文件是在主题文件夹目录下面的，和之前的那个在根目录下的还不一样 除了更换主题外，这篇文章在这一部分还介绍了，在菜单栏新增菜单选项、添加RSS订阅等。最后，git分支进行多终端工作以及在coding page上部署实现国内外分流，但是这两部分没有参照这篇文章 第三部分：hexo添加各种功能，包括： 百度搜索和Google搜索的SEO；参考1；参考2；参考3 评论系统，只是介绍了一下，来比力，valine，等，但是我最后用的评论系统是git talk 添加百度统计 文章阅读量统计，leanCloud 引入不蒜子访问量和访问人次统计 这里有一个百度资源站的链接提交，这个和站点的SEO好事有区别的，这个相当于是可以直接提交博文的网址链接。可以直接点击菜单栏右侧的“用户中心”，在那里面会出现 （百度搜索资源平台）然后按照前面的两篇关于网站SEO的文章进行优化即可。需要注意的是Github禁掉了百度的爬虫，使用GitHub建立的博客无法被百度收录，所以在进行验证的时候验证不成功。 貌似想要被收录可用用CDN，让百度蜘蛛从CDN的网址爬取博文；再或者就是双写，在其他博客平台上发布相同的文章，然后给出GitHub博客的链接。 剩下的文章仅供参考，拓宽思路，仅供参考： Hexo even主题博客配置 可能比较有用的就是介绍了一下hexo的文件结构以及各个主题文件的文件结构 给hexo主题添加背景及更改字体颜色（next的Mist主题） hexo 新建一篇文章给它添加分类和标签 hexo添加新菜单 新建文档的头部的模板：scaffold文件夹下的post.md，在这里面修改一下，以后新建的博客文档头部都会是这个样式 解决 Hexo 搭建博客显示不出分类、标签问题 文章的输入密码访问设置 hexo next主题解决无法显示数学公式 Hexo 入门指南（三） - 文章 &amp; 草稿 主要是讲解了文章的title、date、tags、categories等基本属性设置，摘要设置&lt;!--more--&gt;以及草稿设置 Hexo 解决网站名中文乱码 Hexo博客NexT主题开启文章目录和调整样式 使用github OAuth实现用户登录 hexo的next主题个性化教程：打造炫酷网站 关于最开始探索建站的记录基本到这里也就结束了，但是，在这个过程中，也见识了一些十分优秀的个人站点，有的是界面设计的超级漂亮，有的是博客的内容十分吸引人。此外，在这些优秀的个人站中，博主们也会分享一些他们自己的建站经验，也是很好的学习素材。","categories":[{"name":"学习工具","slug":"学习工具","permalink":"http://ch206265.github.io/categories/%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://ch206265.github.io/tags/hexo/"},{"name":"建站笔记","slug":"建站笔记","permalink":"http://ch206265.github.io/tags/%E5%BB%BA%E7%AB%99%E7%AC%94%E8%AE%B0/"}]},{"title":"周总结（2019/10/28）","slug":"周总结（2019-10-28）","date":"2019-11-02T06:56:42.000Z","updated":"2019-11-25T16:30:22.841Z","comments":true,"path":"2019/11/02/周总结（2019-10-28）/","link":"","permalink":"http://ch206265.github.io/2019/11/02/%E5%91%A8%E6%80%BB%E7%BB%93%EF%BC%882019-10-28%EF%BC%89/","excerpt":"虽然在博客上很久没有写这个总结了，但在我平时工作学习中，脑海偶尔灵光一现的时候，我还是会把想要所说的话进行简单记录的。这次主要想总结4件事情，以后要注意改正。 流于形式的打招呼方式首先，我发现，自己打招呼的方式有点流于形式。","text":"虽然在博客上很久没有写这个总结了，但在我平时工作学习中，脑海偶尔灵光一现的时候，我还是会把想要所说的话进行简单记录的。这次主要想总结4件事情，以后要注意改正。 流于形式的打招呼方式首先，我发现，自己打招呼的方式有点流于形式。 如果是刚认识还好，但一直都是，见面抬手然后“嗨”一声，没了下文，久而久之这样很尴尬，但是在这种尴尬的背后其实有更尴尬的事实——无话可说。关于无话可说，之前我反思过，然而这次的无话可说基本就是真的无话可说，但一直用这种流于形式的打招呼方式所展现出来的并不是自己的热情，反而是冷漠，这样久而久之又真的会使彼此之间产生一层隔阂，和自己的初衷完全不同。 真正的交谈应该是走心的，而走心就是要走进生活，无论是工作还是业余，都是生活。 陌生地点干之前从来没干过的公差第二件事，到车站接专家。 之前对车站真的是了解很少，又是大车站，也没有接站的经历。实话实说，我自己去过好多次的火车站，关于出口，我自己都是没有太留心，基本上都是看着指引牌，一路走下来，真的是什么都没有记住。不过好在我是提前去了，在途中问了出租车师傅出站口的情况以及同学他们平时在车站叫滴滴的话在哪个出口比较方便。他们的建议对这次接站真的帮了很大的忙。除了自己搞清楚出站口情况，还有其他的一些细节需要注意。比如专家乘车的班次快要抵达前要提前打电话告知自己在哪个出站口等着他，顺便再确认一下他乘车的班次（或者抵达时间）。再其次，在接站过程中有个小瑕疵，看到接站的班次已经到站了之后，就要认真在出站口等待了，不要被其他事情吸引注意力错过了要接的人。这次接站，刚好在专家出站的这个时段，旁边的旅客有些事情在和出站检票口的工作人员交涉，我就好奇的关注了下他们的谈话，最后专家走到我的跟前问是不是接他的，好尴尬，下次需要注意。最后，一定要问对方的全名，不要只是姓氏，虽然这种接错人的概率很小，但是还是小心为好。 干公差对于时间上的把握第三件事，感觉在机关里面办公务事，有点纠结。 如果你办事比较积极，结果程序流程啥的都是错的，有时候就连通知的人都不清楚具体怎么操作，白费功夫；如果你干事不是很积极，那么，说不定以前正常的流程现在就又变了，所有手续材料还得重新整理，还是白费功夫。所以呀，在这种情况下，还是要擦亮眼睛，判断好事情的轻重缓急，以及难易程度，有时候不是很复杂的事情，比较轻易就能完成的活，就不要再拖了，别让政策有变之时，一切再从头整理。 归根结底还是脸皮薄第四件事情，就是公共场所打电话。 我目前为止大多数接打电话都是出去在走廊或者人少的地方，除非要边打电话听着对方的指导边操作电脑。但是呢，身边也有好多人，接打电话就直接在机房进行了，并且声音很大，当然，基本都是公务，不可能是私人电话。有时候听着他们在公务上和他人打电话，感觉他们外联公关能力挺强的。对比一下自己，感觉可能自己有点极端了，大所有电话都是想要找到一个没有人的地方，充满了浓烈的不自信？感觉除了私人电话外，有时候在公共场所还是可以因公打或接电话的。但是怎么说呢，总归我还是感觉这主要得看周围人的反应，或者实验室的氛围和风气了，这种公共场所可以打电话的并非绝对。（ 2019/10/28 16:07 ）","categories":[{"name":"生活随笔","slug":"生活随笔","permalink":"http://ch206265.github.io/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"总结","slug":"总结","permalink":"http://ch206265.github.io/tags/%E6%80%BB%E7%BB%93/"}]},{"title":"生活需要平衡","slug":"生活","date":"2019-10-08T04:22:52.000Z","updated":"2019-11-25T16:28:53.768Z","comments":true,"path":"2019/10/08/生活/","link":"","permalink":"http://ch206265.github.io/2019/10/08/%E7%94%9F%E6%B4%BB/","excerpt":"关心自己的人一直在关心自己，而我大概却只是把这种关心当成了生活中普普通通的东西，没有好好珍惜。最大的表现就是没有把这些关心听到心里去。父母经常告诉我不要熬夜，那我是否听父母的话呢，好像没有，基本每天都在熬夜，很久都没有早早睡觉的习惯了。","text":"关心自己的人一直在关心自己，而我大概却只是把这种关心当成了生活中普普通通的东西，没有好好珍惜。最大的表现就是没有把这些关心听到心里去。父母经常告诉我不要熬夜，那我是否听父母的话呢，好像没有，基本每天都在熬夜，很久都没有早早睡觉的习惯了。那种基本11点之前就睡觉的感觉貌似高中之后就没有了。小学时候在家中，作息和家里人一致，完成每天的作业之后还能和家人在电视前追剧，这是在我记忆中家庭场景印象比较深的时刻。说起这个，每次能回想起来发生场景是在家的趣事，基本都是一些小时候记忆。其实想一想，自小学之后，自己呆在家中的时间越来越少，而家人一起参加的活动除了晚饭基本再没有其他，我们的生活都被某种因素禁锢或分割，感觉这很是问题，也是我一直想要改变的。其实这种禁锢就是谋生，不单单我们家这样，很多家庭也都是这样。父母做小生意整日奔波，虽然自己就是自己的老板，但是没有见他们给自己放过假。爷爷奶奶也是这样，虽然老人们相继生了大病，以前的工作以现在的身体条件实在无法为继，但也没有完全偃旗息鼓。我和姐姐，小学时候还对成绩没有太大概念，只知道期末成绩考的好的话会收获到亲人的表扬，上初中时有了成绩的排名，从那时起，看着比较靠前的名次，我们的精力自然很少从学习中分离。就这样，大家的生活都有了谋生的方向。社会中每个人的谋生都是不易的，少不了背井离乡，岁月静好的背后是有人在负重前行。但是呢，为了谋生，我们不应该牺牲现在的幸福，就像《瓦尔登湖》中梭罗说的那样，“把大半生的时光花费在挣钱上，目的是期望在一生中最没有价值的一段时光里享受到很成问题的自由。这种情形使我想起那个英国人，开头时跑到印度去发财，希图将来返回英国时可以过着诗人般的生活。其实他应该立刻爬上阁楼去。”幸福的生活也不应该被谋生作为借口而不断侵蚀。不要希冀等一切准备好了才可以，不同的阶段都会有令你烦恼和疲于应对的事情，这样，真正重要的东西只会被一拖再拖，酿成遗憾，况且自己真正准备好了的时刻或许永远不会到来。（ 2019/10/07 15:47 ）","categories":[{"name":"生活随笔","slug":"生活随笔","permalink":"http://ch206265.github.io/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"反思","slug":"反思","permalink":"http://ch206265.github.io/tags/%E5%8F%8D%E6%80%9D/"}]},{"title":"周总结（2019-09-07）","slug":"周总结（2019-09-07）","date":"2019-09-14T13:52:40.000Z","updated":"2019-11-30T08:05:15.661Z","comments":true,"path":"2019/09/14/周总结（2019-09-07）/","link":"","permalink":"http://ch206265.github.io/2019/09/14/%E5%91%A8%E6%80%BB%E7%BB%93%EF%BC%882019-09-07%EF%BC%89/","excerpt":"这个周总结的草稿在一周之前就创建了，当时也有一些想要总结的东西，但只是简单的在纸上记录了一下，准备在周末的时候完善，没想到被拖了又一周，现在的周总结变成了半月谈……","text":"这个周总结的草稿在一周之前就创建了，当时也有一些想要总结的东西，但只是简单的在纸上记录了一下，准备在周末的时候完善，没想到被拖了又一周，现在的周总结变成了半月谈…… 不要把简单的事情复杂化上个星期或者是上两个星期，总体来说还可以，主要是在完成老师布置的任务以及自己的学习之间两方面度过的，偶尔会又出公差，但是也还好。在这过程中，有一些小事，总是断断续续，不能直接了当地完成，牵扯了我比较多的精力。为什么会断断续续呢，有以下几种情况： 事情本身就是要走流程，这个进程不是我能控制的，在走的每个阶段流程中，进行地还算顺利。这类事其实不牵扯太多精力，只需要准备好要提交地材料，然后等。 在办事的过程中，发现了一些小纰漏，然后要修改它们，比较麻烦。这时候，要怎么样修改，我会犹豫不决，简单一点的改法——“这样行不行啊？”；万无一失的改法——“这样好麻烦，还得再找一遍领导签字”，其实倒不是怕自己麻烦，只是还得再麻烦领导……文字写下来之后，感觉是自己想多了……不过，趁早下定决心，确定如何处理问题，比犹犹豫豫半天还不确定更好，尤其是在不是什么特别特别重要的大事面前。想的太多，犹豫不决，不仅给自己徒增思想负担，也耽误其他人的事情。有时候，没有那么多时间来等巧妙的时机以促成最佳解决方案并做出抉择，只需要现在就行动起来，去解决它，不要一直陷入思考和抉择的煎熬当中。 要和他人商议解决事情的时候。此时，我比较犹豫，没有一个果断的处理办法（还是没有上心，没积极地去解决，而因此导致枝节横生）。如过自己真的不方便，那就采用别人的方案，不要再提自己的搞乱别人了，积极配合就行了。要是真的想自己提出办法解决，那就积极用心一点。 关于这一点，可以用下面的话提醒自己一番，虽然有点鸡汤： 什么是悟性？什么是智慧？悟性和智慧就是用最简单的方法来处理、看待切事物。但一些庸人自扰的人总是把简单的事情看复杂了、做复杂了。繁和简其实是一回事，是一回事的两个方面。聪明的人看到的是简单的一面，愚蠢的人看到的是复杂的一面。 所谓看开人生，绝不是悲观，而是积极乐观；不是看破，而是看透；并非什么都不做，而是及时做。 总是想的太多，顾虑太多，真有些庸人自扰的感觉。 交谈要突出重点上次总结说到传话时候的注意事项，其实委托他人帮忙时，也要what,when,where,who,how，交代清楚，以免出现纰漏。 平时和他人交谈时，要注意场合，该简短时简短，务必突出重点，不要前面像讲故事一样说了一堆，最后才蹦出了大家关注的东西，更尴尬的是，前面的一堆和结论的逻辑链接貌似还有问题。 该娓娓道来时，就做好铺垫。除非是坐下来，两个人面对面深入交谈，即使平时随意侃，也尽量避免这样。就像走路聊天，要简短一点，这时候大家基本没有那么多耐心听你的铺垫。碎片化的时间里进行的交谈，就是要突出重点，不然也不会催生那么多的标题党文章。 其次，要让别人听清楚自己说的话，说话声音大一些，不然容易引起误解。 对汇报的内容要负责做汇报的时候，细枝末节尽量少讲，要突出亮点，上干货。当然，比较尴尬的是干货比较少，或没有干货。这时候还必须要汇报，那就讲概念讲思想讲理解，这就比较考验思考的深度了。思考的结果其实也是干货。 还有，做汇报的时候，自己要对PPT上所展示的每一张图片，每一句话负责。图不能乱引用，对于没有深刻理解的话也不要乱引用。如果对自己做的东西还不甚了解，面对他人的质疑和询问，自己还不能给出很好的解释，那只能说明没认真做或者做的还远远不够。 总之，汇报时，要对自己讲的每一句，每一个插图负责，都要能经得起深究。 做好阶段工作成果的整理有时候，时间很紧迫，各种过程材料啊，原始或者中间数据啊，以及最后成果啊，都是七零八落地散在电脑中。但是自己抓紧时间完成任务之后，就选择了放松，没有对完成这些任务产生地零碎地东西进行整理，带到下次利用或修改，或者换电脑，或者给他人分享之时，很是头疼。 所以，完成任务后，先打扫一下战场，做下阶段成果的总结，在好好休息~ 任务协调分配的能力自己的团队领导能力还是太欠缺。可能习惯了经常性的一个人埋头苦干，也没有想过，如果让自己负责一件事情时，该怎么用好身边的帮手们。 应该努力的调整一下，不要总是单干，以后只会有越来越多任务量繁重的事情，不可能自己一个人干下去，也不要总是习惯于他人给自己分配好工作。 平时，自己干一件事情的时候，总是眼前看到了什么活儿，就去做就去干好什么活儿。一件事情，我很少一次性把他干完的打算和决心，往往是慢慢悠悠一点一点干完。（其实有些事情还是及时完成要好，不要一直分成好几步去做，这样就会一直拖着，横生好多枝节，错过好多机会。其实有时候一直拖着，是有些对明天的顾虑，怎么说呢，都是有利有弊……但是至少，可以先把不影响下一步推进的工作做完） 团队协作的话也更偏重于效率，大家聚在一起，分配好任务，短时间内快速完成。这就需要很明确的任务分配，而想要做好任务分配，首先自己要对完成任务有一个总体的认识，有一个清晰的路线。任务在描述上还不能太复杂，尤其是几个人通过网络合作，没有当面沟通交流时。所以，前期自己要把琐碎的东西给梳理通了，把简单好操作的任务分配下去。 所以，面对任务分配，我需要加强的有一下两点： 分配任务前，做好梳理准备工作。其实很多次不能果断地进行任务分配都可以归结为前期地准备工作没有做好，以至于分配任务时，分配不明确，不果决，或者总是有很多顾虑。这点也很好理解，因为并不是所有东西都可以分的，往往是进行到后期，更好分配一点，前期的东西比较琐碎，还需自己要提前处理好，以方便后期有整块的任务分给其他人做。 如果没有很多时间让自己做梳理，做准备，那么交代他人的任务就要尽可能明确和易操作，不要再额外牵涉很多其他东西。 越熟悉的人越无话题可说之前就发现了这个发生在我身上的尴尬现象。往往初次见面的时候可能还说的比较多，但是熟悉了以后，貌似可说的话题就变得很少了，或者话题只是局限于学习和工作。 之前分析的原因是，其他方面的知识涉猎的太少，或者，生活中除了正常的工作状态，基本没有其他业余爱好。这样，我和他人之间自然就缺少了很多可以交流的话题。 发现了问题所在，我似乎并没有认真去解决它。首先我的很多时间用在了刷手机上也并没有加大图书阅读量，其次，几次朋友叫我跑步去我也没有去😓……真是一边感慨着自己某方面的不足，还一边无动于衷…… 计划： 还是要多喝水。 第二天的工作状态要有保证。 挤出来的时间，就要多做些对自己将来有增益，能回味的事情，比如学习积极性不高的时候，多些团建少些无意义的消磨，回寝室后多读书，少刷手机（突然发现kindle有买4年了，但是在上面读完的书好像不超过3本😓） 努力做到不纠结，果断一点，知道自己现在在干什么，下一步要干什么，就像博客的主题一样，清醒地活着。","categories":[{"name":"生活随笔","slug":"生活随笔","permalink":"http://ch206265.github.io/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"反思","slug":"反思","permalink":"http://ch206265.github.io/tags/%E5%8F%8D%E6%80%9D/"}]},{"title":"周总结（2019-08-30）","slug":"周总结（2019-08-30）","date":"2019-08-30T08:55:03.000Z","updated":"2019-11-25T16:29:59.993Z","comments":true,"path":"2019/08/30/周总结（2019-08-30）/","link":"","permalink":"http://ch206265.github.io/2019/08/30/%E5%91%A8%E6%80%BB%E7%BB%93%EF%BC%882019-08-30%EF%BC%89/","excerpt":"距离上次写周总结有一段时间了，想总结的东西也还挺多。 总结： 第一，感觉自己办公差的能力比较差。最集中表现在两方面，问话和回话。回话回不好其实还是问话的问题。 关于问话，我感觉问题可以归结为：如何在对背景不甚了解的情况下问话成功？其实在问话过程中，我最大的问题体现在不会反问，脑子不会转弯，直来直去的，总是习惯于接受，别人说什么就是什么，主动权永远在对方那里。","text":"距离上次写周总结有一段时间了，想总结的东西也还挺多。 总结： 第一，感觉自己办公差的能力比较差。最集中表现在两方面，问话和回话。回话回不好其实还是问话的问题。 关于问话，我感觉问题可以归结为：如何在对背景不甚了解的情况下问话成功？其实在问话过程中，我最大的问题体现在不会反问，脑子不会转弯，直来直去的，总是习惯于接受，别人说什么就是什么，主动权永远在对方那里。今天去财务咨询一件事情，前前后后跑好多趟，总是get不到重点，总是问完之后自己梳理时发现还是有问题。怎么办呢，只有再回去问了，前前后后好多次，自己都不好意思了，被询问的人那边肯定也烦。之所以前前后后询问好多次就是因为没把问题当面搞明白，对于蹦出来的那些意外情况，总是抓不住其关键反问回去。 每次我遇到这种情况，都感觉自己的脑袋像木头疙瘩一样，其实随着年龄的增大，也真的感觉自己越来越缺少灵性。小时候那么调皮捣蛋，现在怎么就变成这样了呢？这或许和我在大学养成的一个习惯有关。大学里，学习新东西，相对于理解的过程，我总是在怎么“记住”他们方面花费很多精力，仿佛，这些东西记在我脑子里了就是我的了，我就会用了一般。当然，输入的过程也有思考，但是思考的很浅，甚至有些思考是为了更好的记住它们。搁在大学时期，或许这些东西记在脑子里了，就可以对付考试了，考试时，只需要从脑子里面取出记住的东西就可以了，严重缺少思考的过程。长期这样，自己的大脑似乎就很适应这种简单的条件反射（这应该就是典型的死读书吧）。最深受其害的一点体会就是考研数学……当年的经历，我只能说，我从来没有在考场上这么蒙蔽过。 但是现在，没有考试了，一切都是实战。当时在时间不自由、资源、工具稀缺的时候，仅仅为了应付考试的学习方式，已经对现在时间、资源和工具都相对自由的我的进一步学习造成严重破坏。 正确的方式？对于自己目前的这个状态，首先对待问题要刨根问底。不管是在学习，还是处事上，有什么不知道的不懂的，要问，不要揣着糊涂装明白！尤其在处事上，对于老师或者长辈交代的事情，有啥疑问就当面大胆地问，不要总是好好好，是是是。对于老师啊领导啊等这些不经常见面但又有要事要找他们的人，自己一定要提前想好下次遇到他们时问些什么，不要偶然的一次见面，支支吾吾，不仅问题描述不清楚，甚至有可能忘记询问一些重要的事情。当面问事情，一定要记得what、when、where、who、how，关键点一定搞清楚，而对于蹦跶出来的意外情况一定要反问一个why。针对意外情况，事情办不成了，最笨的方法就是，别人回复你的每一句话，都先对自己反问一个为什么，自己能够理解的就算了，不能够理解的再反问回去。虽然笨，但是有效，办不砸事，并且这是在培养一种思维习惯。以后经历的事情多了，了解的多了就好了，要努力地去思考去弄明白问题，而不是揣着糊涂装明白，自欺欺人，关键时候害人害己。但是，话说回来，闲聊的时候，别人说起什么你都不知道，不尴尬吗？这是另外一个问题了。 第二，不会表达和展示自己。当需要让别人知道你自己的见解，想法，和别人分享时，要能够写出来，能够讲出来。对应现在的阶段，那就是能够写好论文，能够做好汇报。只有这样，才能更好地让别人知道你在想什么，你在干什么，才能让别人知道你是有付出的，你并没有吃闲饭混日子。反之，如果不能很好的表达自己，而自己又为之付出了那么多，还得不到认可和理解，岂不是委屈。这一方面，除了多争取锻炼的机会，把握好每次的历练之外，还要对每次的展示给予充足的时间准备。一件展示或者汇报，当你对它做了认真充足的准备后，就已经成功了一半。 计划： 保持健康的生活方式，注意饮食健康，多喝水 晚上早点从机房回到寝室，这是对生活的尊重 感觉想要与他人维持或更深地交流和交往，应该建立在工作之外；拥有共同的兴趣爱好才能长久，读书或者运动？","categories":[{"name":"生活随笔","slug":"生活随笔","permalink":"http://ch206265.github.io/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"反思","slug":"反思","permalink":"http://ch206265.github.io/tags/%E5%8F%8D%E6%80%9D/"}]},{"title":"在VScode中编译和调试C和C++代码","slug":"在VScode中编译和调试C和C-代码","date":"2019-08-06T15:01:57.000Z","updated":"2019-11-25T16:36:21.448Z","comments":true,"path":"2019/08/06/在VScode中编译和调试C和C-代码/","link":"","permalink":"http://ch206265.github.io/2019/08/06/%E5%9C%A8VScode%E4%B8%AD%E7%BC%96%E8%AF%91%E5%92%8C%E8%B0%83%E8%AF%95C%E5%92%8CC-%E4%BB%A3%E7%A0%81/","excerpt":"过程如下： 安装VS code安装插件","text":"过程如下： 安装VS code安装插件 下载MinGW并配置环境变量 官网下载[下载] 配置环境变量，参考这篇文章：如何安装MinGW - 简书 讲道理，此时应该就可以运行程序了，接下来是调试 调试（即，配置.vscode文件）注意：文件名和路径名最好全是英文 新建文件，需要调试的源文件放到此文件夹中，然后右键，选择Open with Code 点击debug图标，打开launch.json并修改 该文件夹内，新建文件tasks.json，并完善内容 完工，F5可以进行调试 程序最后加一个getchar();，或者加system(&quot;pause&quot;);等避免调试后黑框闪没 参考资料编译和运行：零基础 | 如何用VS Code写C/C++程序 - 安装与配置 - 简书调试：Visual Studio Code (vscode) 配置C、C++环境/编写运行C、C++（Windows）【真正的小白版】 - 一苇以航 - CSDN博客 Sanarous的个人博客","categories":[{"name":"学习工具","slug":"学习工具","permalink":"http://ch206265.github.io/categories/%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"VScode","slug":"VScode","permalink":"http://ch206265.github.io/tags/VScode/"},{"name":"C/C++","slug":"C-C","permalink":"http://ch206265.github.io/tags/C-C/"}]},{"title":"周总结（2019-08-06）","slug":"周总结（2019-08-06）","date":"2019-08-06T11:51:49.000Z","updated":"2019-11-30T08:04:51.715Z","comments":true,"path":"2019/08/06/周总结（2019-08-06）/","link":"","permalink":"http://ch206265.github.io/2019/08/06/%E5%91%A8%E6%80%BB%E7%BB%93%EF%BC%882019-08-06%EF%BC%89/","excerpt":"所思所想 这周总结目前也没有什么固定的内容要写，就先记录一下的这周自己的所思所想吧。 很早之前就说过，不要想得太多而做的太少。其实，想的太多最主要还是因为想要确定一个明晰的目标和方向，如果认准了目标，剩下的自然就是朝着他往前冲，想的自然也就少了。","text":"所思所想 这周总结目前也没有什么固定的内容要写，就先记录一下的这周自己的所思所想吧。 很早之前就说过，不要想得太多而做的太少。其实，想的太多最主要还是因为想要确定一个明晰的目标和方向，如果认准了目标，剩下的自然就是朝着他往前冲，想的自然也就少了。 而最近一直处于比较迷茫的时期，逛了逛很多关于知乎上原画以及编程的一些问答。虽然感觉浪费了不少的时间，但是也并不是一无所获。在上面，有两条回答令我印象深刻：1、那个被知乎绘画大佬劝退的少年最后哪去了？ 2、自学编程的人，都是怎么找到第一份软件开发工作的？。都是实打实的逆袭。 之前一直在主攻前端和C/C++语言上定夺不了，上半学期自己一直心心念念地想要学习C/C++，但是项目上和它地联系不是很大；后来项目了解地更深了一点，逐渐转向前端，稍微有些眉目时，跟的项目又突然有了变化，又突然和C/C++走的更近了点。按道理，这不是很好的转变吗，现在想想，自己的困惑在哪里？刷了不少知乎，现在也思考的更明确了点，就打C和C++的基础吧。沿着这条路，走下去。 现在，生活由这几部分组成：老师安排的项目任务（积累经验）；自己的研究方向钻研（毕业就业相关）；自学C/C++。平衡好这三方面安排。 下次注意 学习方式。项目驱动式学习。尽量是在完成项目的时候需要学习什么技能，然后再去精深去钻研，刚开始可能不知道的东西太多了，所以，刚开始也不要想着要把所有东西搞懂，只需要把遇到的问题中的大块头，主要矛盾解决了就好。 立即行动。开始一件事前你准备充分当然比较好，但是也不能强求万事都是如此。在真正动手做之前，想的再多，再好也不一定就真的有用。路，是慢慢走出来的。 不要被工具所累，它有时候是次要的。 接受。所有事情都不会白白经历。有时候麻烦并不是麻烦，而是一开始自己就把它定位成了麻烦，被自己推脱，拖成了麻烦事。事情来了，不要嫌，不要怕。要想不就是这点事吗？赶快做完干我的正事！少花些其他的心思。其次，所有编程语言都是要有所涉猎的，思维不要那么二分性，非黑即白。 作息。良好的作息习惯是好好工作学习的保证。手机平时就开启超级省电模式吧。学习工作和并不是全部的生活，不要拿工作上的努力掩盖生活中的懒惰。 今日事今日毕，尽量自己电脑能在晚上睡觉前关机而不是睡眠。 锻炼。每天下午的运动一定要坚持，跑步3公里，5公里，10公里慢慢跑，争取这三年下来，能够和课题组一起跑完半马。 之前浏览一位老哥的博客，他上面有段关于“人与人的纽带”的话， 据不完全概率统计，人一生大约会遇到 2920 万人。 做 IT 这行的，离职入职非常频繁。 也许每天和你交流业务的人，下个月就断绝了往来。 也许你觉得这个人是你的知心朋友，但是不做同一块业务后，你们就没有了任何的聊天话题。 因此，遇到真心朋友后一定要建立一个业务之外的纽带。 如果真是真心朋友的话，你一定能找到这个纽带 确实，也许你觉得这个人是你的知心朋友，那就应该能够建立起“业务”之外的纽带，无论如何，你们之间都不能少了共同话题。有一些比较有营养的共同话题，双方交流过后都能得到提升。之前一直感觉自己不会聊天，找话题的能力实在一般。其实，还是自己涉猎的东西太少，知识面太窄，亦或者是自己对身边的事物大都不感兴趣，事事都不留心。这的确也是自己目前比较欠缺的。想要找共同话题，就先多看书吧，多写写读书笔记，这真的是一个很好的途径。","categories":[{"name":"生活随笔","slug":"生活随笔","permalink":"http://ch206265.github.io/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"反思","slug":"反思","permalink":"http://ch206265.github.io/tags/%E5%8F%8D%E6%80%9D/"}]},{"title":"周总结开篇（2019-07-28）","slug":"周总结开篇（2019-07-28）","date":"2019-07-31T02:15:51.000Z","updated":"2019-11-25T16:30:32.920Z","comments":true,"path":"2019/07/31/周总结开篇（2019-07-28）/","link":"","permalink":"http://ch206265.github.io/2019/07/31/%E5%91%A8%E6%80%BB%E7%BB%93%E5%BC%80%E7%AF%87%EF%BC%882019-07-28%EF%BC%89/","excerpt":"这算是自己在博客上写周总结的开篇，先回忆一下自己关于计划和总结的故事。 上初中时，自己习惯于列日计划清单，总是列的满满的，把清单上的任务一条条的划去，是我最有成就感的时刻。到高中时，我也想维持这个日计划的习惯，但是我似乎没有意识到高中和初中的不同，也没有意识到之前这个日计划中出现的问题。","text":"这算是自己在博客上写周总结的开篇，先回忆一下自己关于计划和总结的故事。 上初中时，自己习惯于列日计划清单，总是列的满满的，把清单上的任务一条条的划去，是我最有成就感的时刻。到高中时，我也想维持这个日计划的习惯，但是我似乎没有意识到高中和初中的不同，也没有意识到之前这个日计划中出现的问题。每次日计划的进行都使我精疲力尽，是的，当时的日计划还是和初中一样“贪婪”。渐渐地，清单上越来越多地东西完不成，或者只是为了完成而完成。有时候虽然划掉了清单上的任务，但是我却并没有那么开心。渐渐的，已计划的习惯就消失了。 高三时，读《人性的弱点》，当时读的英文版，才知道他的原名是How to win friends and influence people，讲的就是人际交往方面的内容。书中有一个令我印象深刻的案例，一个人他每周都会抽出时间，回顾自己上周经历的一些事情，认真思考，哪些处理的得当，哪些欠妥，欠妥的话又该如何改进，下次再遇到类似的情形时该如何应对。 这似乎又有点《刻意练习》的意思，模拟自己经历过的那些令人尴尬的场面，练习该如何应对。不要在同一个地方摔跤，也不要让自己的思想认识总拘泥于一处得不到改变和提升。 大学时读了《高效能人士的七个习惯》，其中提到一词“心灵演练”。其实这和之前了解到的“情景模拟”也大致类似，只不过，心灵演练又上升了个高度。它是要以各个生活场景中的角色为中心，比如以家庭为中心：作为儿女，对待父母我应该怎么做；作为丈夫，对待妻子我该怎么做等等。对各种生活场景进行模拟，并依循内心的良知和个人信条，指导自己的日常行为和决定。 后来，越来越感觉，生活不仅仅是工作和学习。工作上的努力并不能掩盖生活上的懒惰，况且有时候的努力也并非真的努力，只是低效率的体现。制定的计划也不能都是学习和工作上的内容。 以上是计划清单方面地内容，而对自己的反思和总结其实一直都在坚持。之前一直使用有道云笔记，上面记录了无数自己的只言片语，凌乱地躺在那里，但大部分写在自己感到烦心时，断断续续，更像是烦躁时地宣泄，没能很好地组织起来，也没有把感慨的东西深挖。所以这也是今后我的一项长期任务。 博客毕竟是一个开放的平台，不像是在个人云笔记中，偷懒了也只有自己知道。但是，无论有没有人看，都希望自己能坚持下来！","categories":[{"name":"生活随笔","slug":"生活随笔","permalink":"http://ch206265.github.io/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"反思","slug":"反思","permalink":"http://ch206265.github.io/tags/%E5%8F%8D%E6%80%9D/"}]},{"title":"记一次写标书的经历","slug":"记一次写标书的经历","date":"2019-07-26T09:08:20.000Z","updated":"2019-12-16T14:46:51.383Z","comments":true,"path":"2019/07/26/记一次写标书的经历/","link":"","permalink":"http://ch206265.github.io/2019/07/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%86%99%E6%A0%87%E4%B9%A6%E7%9A%84%E7%BB%8F%E5%8E%86/","excerpt":"相关文件 询价文件 目前将询价文件理解为招标文件，在询价文件中一般会规定： 询价公告、询价须知 合同文本样本 具体的采购需求 响应文件样本 评审标准 询价公告和询价须知中，主要会公布招标项目的一些基本情况，比如项目简介、供应商资格要求、报名方式、询价文件的获取方式、响应文件递交地址以及递交截止时间、询价时间地点（即开标时间地点）等基本内容。","text":"相关文件 询价文件 目前将询价文件理解为招标文件，在询价文件中一般会规定： 询价公告、询价须知 合同文本样本 具体的采购需求 响应文件样本 评审标准 询价公告和询价须知中，主要会公布招标项目的一些基本情况，比如项目简介、供应商资格要求、报名方式、询价文件的获取方式、响应文件递交地址以及递交截止时间、询价时间地点（即开标时间地点）等基本内容。 响应文件 目前将响应文件理解为投标文件，在投标文件中一般会有以下内容： 投标函（响应函） 响应一览表，如技术规格响应、合同文本条款响应、价格响应、投标资格响应等 投标服务方案，如技术支持、售后服务方案等 投标人基本情况、投标人资格证明、法定代表人身份证明及授权委托书、同类项目成功执行情况、招标代理费承诺、退投标保证金说明等等一些内容 响应函主要是投标方经研究项目询价文件和其他有关文件后，决定参加该项目的采购活动，后做出负法律责任的一些郑重声明。这里面比较重要的还是投标服务方案这部分，主要包括技术支持资料和售后服务两部分内容。 相关概念 投标人、投标人授权代表 投标人：一般是公司名称 投标人授权代表，也就是法定代表人授权书中的被授权人 招标人、采购代理机构、评标委员会 法人、法人代表、法定代表人区别 法人 法人不是人，是一种社会组织，是一种集合体，是由法律赋予法律人格的组织集合体 设立法人的条件：依法成立、有必要的财产和经费或者必要的经费来源、有自己的名称、组织机构和场所、满足法律规定的其他条件 法定代表人 《民法通则》规定：依照法律或者法人组织章程规定，代表法人行使职权的负责人，是法人的法定代表人。营业执照中的名字是法定代表人。 根据《公司法》相关规定，法定代表人可以是董事长、执行董事，也可以是总经理，这主要看法律或章程如何规，但每个法人只能有一个法定代表人。 法人代表 法人代表，是法人/法定代表人授权办理某个或某些事项的代理人，也可以是法定代表人。 如果单位要办一件事，可以派单位里的任何人去办，只要出具书面证明文件（比如授权委托书等），那么任何一个被单位派出去办事的人都可以叫法人代表，单位也可以根据需要随意随时更换。这个代理人可以是甲、也可以是乙，他不是固定的，而是取决于法人的授权。 日历日、工作日和自然日 日历日一般用在签订合同时使用，合同中按天计算时间的，开始当天不计入，从次日00:00开始计算，期限最后一天的截止时间为当天24:00； 工作日和自然日时互相对应的，工作日一周5天，自然日一周7天。 包组类似于标段，一个包组确定一个中标人 招投标中的违法行为 以他人名义投标 串标 行贿 虚假中标","categories":[{"name":"不会白白经历的事","slug":"不会白白经历的事","permalink":"http://ch206265.github.io/categories/%E4%B8%8D%E4%BC%9A%E7%99%BD%E7%99%BD%E7%BB%8F%E5%8E%86%E7%9A%84%E4%BA%8B/"}],"tags":[{"name":"招投标","slug":"招投标","permalink":"http://ch206265.github.io/tags/%E6%8B%9B%E6%8A%95%E6%A0%87/"}]},{"title":"认识定量遥感","slug":"认识定量遥感","date":"2019-06-13T10:34:35.000Z","updated":"2019-11-30T08:06:13.581Z","comments":true,"path":"2019/06/13/认识定量遥感/","link":"","permalink":"http://ch206265.github.io/2019/06/13/%E8%AE%A4%E8%AF%86%E5%AE%9A%E9%87%8F%E9%81%A5%E6%84%9F/","excerpt":"主要总结一下阅读过博文《从定性遥感到定量遥感——大数据时代的空间数据科学》之后的认识。 遥感，remote sensing，遥远地感知。既然需要传感器从远处感知被观测物体的属性，那么肯定有信使来传递信息，最常见的信使就是电磁波，而传递的这个信息就是地物对电磁波的反射、吸收和透射特性（包含很多，比如反射率（主要）/吸收率/透射率）。无论是定量遥感还是定性遥感，其核心都是电磁波。","text":"主要总结一下阅读过博文《从定性遥感到定量遥感——大数据时代的空间数据科学》之后的认识。 遥感，remote sensing，遥远地感知。既然需要传感器从远处感知被观测物体的属性，那么肯定有信使来传递信息，最常见的信使就是电磁波，而传递的这个信息就是地物对电磁波的反射、吸收和透射特性（包含很多，比如反射率（主要）/吸收率/透射率）。无论是定量遥感还是定性遥感，其核心都是电磁波。 定性遥感初中物理告诉我们，不同色光混合在一起组成了白光。映入眼帘的世界之所以五颜六色，是因为这些物体吸收和透射了一部分色光，而且也反射一部分色光。经它们反射的色光投射到眼睛中，我们就感受到物体的颜色。投射到我们眼睛中的可见光是电磁波，并且只是其中很小的一部分。 遥感传感器（相机）就像我们的眼睛，只不过，除了可见光之外，它还能接收到更多波段的电磁波。可见光进入人眼经过一些生物过程产生了视觉效果，而电磁波进入到遥感传感器（相机）经过一些数字信号的处理过程也产生了遥感图像。 定性遥感，主要指的是就是对遥感影像的定性分析，或者是从几何角度的分析，并不考虑地物的物理属性。比如，对获取的遥感数据作一些简单校正后，利用地面目标的光谱特性作有监督或无监督的最大似然率分类， 或经验判读 。 定量遥感反演当然，遥感图像中包含着丰富的光谱信息，这些光谱信息包含着地物与电磁波之间的相互作用（反射/吸收/透射）。不同的地物对电磁波的作用（反射/吸收/透射）也不同，因此，根据遥感图像中的波普信息定量获取观测目标参量 ，并用这些目标参量，通过链接模型生产出满足用户 (地学或生物学模型运行) 需要的时空尺度和精度的产品，就是定量遥感反演（默认是成像遥感反演）。要想建立起波普信息与地物之间的联系，需要寻找二者之间的关系模型，也就是反演模型。 反演模型主要有物理模型、统计模型或物理与统计模型的耦合模型。基于物理模型的遥感反演具有严格的机理模型。统计模型以及耦合模型对于特定区域或者特定样本的反演结果可能会比较好，但是不具有普遍适应性。 定量遥感，主要聚焦于构成地物状态特征的物理化学要素，以及导致地物目标变化的物理化学动力驱动机制。它强调通过数学的或物理的模型将遥感信息与观测地表目标参量联系起来， 定量地反演或推算出某些地学目标参量。但是，定量遥感反演的真正核心是基于物理模型的反演。此外，目前所使用的物理模型大部分也是简化之后的模型。 定量遥感的一些问题目前，定量遥感存在一些问题，尺度效应和尺度转换的机理、异质像元的真实性检验、多尺度数据的联合应用等方面的研究仍较薄弱。 反演问题， 病态反演——参数求解过程大部分是求解参数大于方程数； 尺度问题，不同的自然现象有不同的最佳观测距离和尺度，需要适当的距离和比例尺，才能有效完整的观察。 尺度效应：由于地球表面空间作为一个巨系统的复杂性，在某一尺度上人们观察到的性质、总结出的原理或规律，在另一尺度上可能有效、可能相似，也可能需要修正。加之遥感观测信息多空间分辨率并有的特点，从定量遥感出发的地学描述必然存在多尺度的问题 尺度转换与多尺度数据联合应用：多尺度 (分辨率等) 的遥感图像能够提供从“点观测”尺度 (代表区间) 到地理现象尺度之间多级差的尺度，但是，遥感图像各有自己的分辨率、幅面、重访周期和波段选择，必须有可靠、便捷、自洽的尺度转换，才能满足用户的需求。 尺度效应研究需要回答两个重要问题： 第一，在像元尺度上的基本物理定律是否仍然适用，适用的条件及如何修正？ 第二，不同分辨率尺度上目标 (地学) 要素存在何种规律及联系，如何进行尺度转换？ 在遥感科学方面，从认识上我们往往觉得搞电磁波与地物的相互作用机理，才算基础研究，所以花了很大力气，作机理模型。那当然是遥感基础研究的一个层次，但是，地球表层的时空异质性是普遍存在的。就算我们零敲碎打，在特定地区，特定的产品，作出一些改进了的模型，能发文章；但对我们解决上述问题究竟能有多大帮助呢？ 由于对遥感观测的尺度效应了解不够， 对一些基本物理定理、定律、概念在遥感像元尺度上的适用性不清，对在一个遥感像元尺度上建立的模型在另一像元尺度的适用性不清， 对用地面测量的点上数据验证像元尺度的遥感反演结果的适用性不清，使得对遥感观测的像元尺度上的信息缺乏理解，难以进行像元尺度之间及其与传统点信息之间的转换。这也是导致海量遥感数据无法有效利用、定量遥感研究缺乏普适性和系统性、遥感应用难以再上新台阶的根本原因之一 。 定量遥感产品的真实性检验 Reference： [1]李小文, 王祎婷. 定量遥感尺度效应刍议[J]. 地理学报, 2013, 68(9).","categories":[{"name":"遥感与图像处理","slug":"遥感与图像处理","permalink":"http://ch206265.github.io/categories/%E9%81%A5%E6%84%9F%E4%B8%8E%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"}],"tags":[{"name":"定量遥感","slug":"定量遥感","permalink":"http://ch206265.github.io/tags/%E5%AE%9A%E9%87%8F%E9%81%A5%E6%84%9F/"}]},{"title":"使用Adobe Illustrated获取图像光滑的图形轮廓","slug":"使用AI获取位图图像光滑的图形轮廓","date":"2019-06-12T09:03:16.000Z","updated":"2019-11-30T08:04:39.825Z","comments":true,"path":"2019/06/12/使用AI获取位图图像光滑的图形轮廓/","link":"","permalink":"http://ch206265.github.io/2019/06/12/%E4%BD%BF%E7%94%A8AI%E8%8E%B7%E5%8F%96%E4%BD%8D%E5%9B%BE%E5%9B%BE%E5%83%8F%E5%85%89%E6%BB%91%E7%9A%84%E5%9B%BE%E5%BD%A2%E8%BD%AE%E5%BB%93/","excerpt":"最近需要将一些地图资源符号化，以便在地图上显示。 在阿里巴巴矢量图标库中能找到大部分比较满意的基础图元符号，然后按找自己的设计思路进行修改，尤其是当需要找一些知名的APP图标时，它们的矢量logo大部分都可以找到。但是也有一些找不到，比如我想在地图上表示水木清华论坛，需要寻找它的logo作为在地图上显示的符号（logo背景统一填充为白色）。","text":"最近需要将一些地图资源符号化，以便在地图上显示。 在阿里巴巴矢量图标库中能找到大部分比较满意的基础图元符号，然后按找自己的设计思路进行修改，尤其是当需要找一些知名的APP图标时，它们的矢量logo大部分都可以找到。但是也有一些找不到，比如我想在地图上表示水木清华论坛，需要寻找它的logo作为在地图上显示的符号（logo背景统一填充为白色）。 在网络上，我只找到了一个比较模糊的水木论坛的jpg图片，并且图片中除了图形符号外，还有一些文字，但是我只需要上面的图形符号。此外，我不会使用上面的钢笔工具，没有办法描边，只能借助于AI 或者PS看看有没有比较傻瓜一点的方式。下面就此总结一下。 PS的快速选择工具快速选择工具可以快速把相似颜色的区域选择出来，能够选出符号的轮廓，但是因为位图符号，都是一些锯齿状的边缘，勾选的边缘不够平滑，效果不好。如果将图像放大，局部修改蚂蚁线，不仅比较费时费力，而且效果也不好，没有办法保证平滑。 Illustrated的图像描摹工具将jpg图像导入到AI中，使用图像描摹——高保真度/低保真度照片/…——扩展 经过这三步，大致就能将图片中图形的轮廓勾选出来，效果比PS的快速选择工具要好，但是总体来讲还是有很多地方可以修改。 右键图像——取消编组，这样就可以分离整张图片上的图形轮廓和文字轮廓，删除不感兴趣的文字轮廓； 使用剪刀工具修剪一些比较大的轮廓偏差，然后使用橡皮擦工具对局部的不够光滑的边缘做一下处理； 然后将背景填充为白色，之后导出为PNG(应该是位图的格式都可以)； 在此把导出的图像导进AI中，重复上面的操作，效果就会越来越好了 效果如下：","categories":[{"name":"学习工具","slug":"学习工具","permalink":"http://ch206265.github.io/categories/%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"符号设计","slug":"符号设计","permalink":"http://ch206265.github.io/tags/%E7%AC%A6%E5%8F%B7%E8%AE%BE%E8%AE%A1/"},{"name":"Illustrated","slug":"Illustrated","permalink":"http://ch206265.github.io/tags/Illustrated/"}]},{"title":"思而不学则殆","slug":"思而不学则殆","date":"2019-06-08T14:07:42.000Z","updated":"2019-11-30T08:05:48.003Z","comments":true,"path":"2019/06/08/思而不学则殆/","link":"","permalink":"http://ch206265.github.io/2019/06/08/%E6%80%9D%E8%80%8C%E4%B8%8D%E5%AD%A6%E5%88%99%E6%AE%86/","excerpt":"为什么今天要写这个呢？其实在接触到博客之前，自己一直使用云笔记，也经常在云笔记里面写一些思考和反思。说“经常”其实也不太对，毕竟在自己目标明确或者“一帆风顺”的时候，根本不会想起来写一些反思，往往都会是在心情或者学习状态比较起伏，目标不明确，总之生活有些混乱的时候才会去写。所以，今天写这个东西，的确是最近感觉遇到了些小问题，需要用文字理一理。","text":"为什么今天要写这个呢？其实在接触到博客之前，自己一直使用云笔记，也经常在云笔记里面写一些思考和反思。说“经常”其实也不太对，毕竟在自己目标明确或者“一帆风顺”的时候，根本不会想起来写一些反思，往往都会是在心情或者学习状态比较起伏，目标不明确，总之生活有些混乱的时候才会去写。所以，今天写这个东西，的确是最近感觉遇到了些小问题，需要用文字理一理。 之前的一些事上学期研一刚开学，自己心中冲劲十足，想要按照自己的计划来弥补一下大学本科四年来的遗憾。不管计划以及实施如何，总之目标就是，研究生毕业时自己要有拿得出手的东西，更准确地说，自己不要当个水货。但是刚一开学，我就始料未及的成为了班长，成为班长之路真的是像设计好的剧本一样巧，真的是无巧不成书，但是这是现实啊！其实如果像大学那样，研究生生涯当个班长锻炼一下也没什么，但是由于学校的原因，在这里当班长就相当于在大学当辅导员一般，尤其是他们对于班长的使唤简直像一个全职秘书一样，对于大学四年一直透明的我，这相当于一上来就遇到了地狱模式的“锻炼”。当时上半学期，我也真是被班级后勤事务，导师，课程以及自己的计划四重大山紧紧压迫，时间严重不足。以我的性格，辞职这个念头一直纠结到学期末，期间也遇到课题任务和自己计划的不一样的困扰。就这样，我的研一上学期结束了，我想要“培养能拿出手的东西”的计划，似乎也一直郁结在心中没有什么进展。 现在不管过程怎么样，在研一下学期刚开学的时候，我终于把班长辞了。导师那边，我也基本默认接受了这个之前不怎么了解的方向。不过当时因为感觉没有转机，我也一直在思考怎么把课任务与自己毕业之后的就业关系起来。就在刚刚有些眉目的情况下，导师又接了新的项目，还和之前自己比较感兴趣的领域有点关系，但是老师学生比较少，正在愁没人做（我们课题组基本每个人的方向都不一样，一人跟一个项目，大师兄更是几乎垮了所有项目带我们），我就主动请缨了。所以，后来……两个课题任务都在做，一段时间内哪个任务比较紧急就做哪个。当时真的在想，为什么自己这么菜，如果自己的能力在本科四年有所磨练，那么现在应该就是大展身手的时候了，哈哈，其实导师对我们都很好，在课题组机会也会比较多但是无奈自己太菜了😔。 目前，随着课程慢慢结束，班长职务的辞职，自己能掌控的时间的确变多了，尤其是没有当班长时来自他们的小骚扰，学习也更加专注了。但是，当外界条件慢慢变好之时，自己的心境却发生了些变化。 其实科研也并没有自己想象中的那样简单，并且由于导师带学生的方式，我们大多都是自己在科研的道路上摸索（其实自己主动的交流也比较少），至少我感觉自己目前还没有跨入科研的大门。再加上现在已经到了学期末，各种课程作业袭来，慢慢的，时间又转移到了课程作业上。自己心心念念的科研，或者培养“能拿得出手的东西”的计划又有点停滞了…… 所以，此时，我好像突然想起来我还有个计划，计划着自己的研究生生涯不要像大学那样什么都没有学到，计划着研究生毕业的时候有能拿得出手的东西。周围的同学都在慢慢的成长，他们似乎都正在形成自己能拿得出手的东西（我又拿别人比较了）。其实我知道尽量不要拿别人比较，做好自己便是，但是，这种比较更像是“见贤思齐”，因为自己本身实在“问心有愧”，没法说服自己不去比较。其实我也发现了，当自己越是心里没底，越是没有目标的时候越喜欢和其他人比较，呵，这个时候比较，结果就是我现在再写这个东西…… 对此，之前是怎么想的之前是咋想的：要有拿得出手的东西。这句话是大一的时候，社团学姐告诉我们这些社团萌新的，我记到了现在。结果是大学四年除了成绩单，我感觉也没啥比较实际的东西能拿得出手，而现在，似乎又要走之前的老路了。只记住要有东西能拿得出手，却不知道究竟要把什么拿出来。 关于这个目标，我一直都是在课题中寻找，希望将课题任务和之后自己毕业找工作需要用到的技能结合起。很遗憾，现在这个新的方向，我还没有找到（按道理讲有点不太可能，后注）~~而之前转走的那个自己不太了解的方向反而找到了一些结合点。我也有想过就按照之前找到的哪些结合点深挖掘下去，但是这样，这个自己主动请缨的新项目岂不是成为了累赘？因为这两个方向相差的有点远。但是按照大师兄之前说的，所有课题任务都是要大家一起做，大家都参与，我也就有些释怀，不要分的那么清楚。或许是我太想把课题任务和就业找工作相结合了。但是这怎么说呢，精力毕竟是有限的，能结合当然是好事。 尽管还是比较纠结，但自己现在最需要做的还是尽量清晰一下目标。是在课题中找结合点，还是两者平行着来，需要考虑一下，然后就一直考虑，越考虑越不知道自己该干什么了…… 该怎么办我刚刚审视了一下自己说的话 很遗憾，现在这个新的方向，我还没有找到 讲道理，这有点不太可能…… 我对自己的分析大致如下： 最近突然意识到自己目标和方向不清晰，一不清晰心里就没底，一心里没底就焦虑，接着就是因为焦虑而想的太多，结果越想越想不出结果，越焦虑。 所以，先缓解一下自己的焦虑吧，目前自己是想的太多，做的太少，已经处于“思而不学则殆”了，知识储备太少，眼界太狭窄，也不会有什么好的思考结果。 如果目标不能在行动之前就清晰了，那就在行动中渐渐把他弄明白，关键是不要停下来，不要陷入想太多干太少的局面。加油！干起来！","categories":[{"name":"生活随笔","slug":"生活随笔","permalink":"http://ch206265.github.io/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"反思","slug":"反思","permalink":"http://ch206265.github.io/tags/%E5%8F%8D%E6%80%9D/"}]},{"title":"从傅里叶变换到小波变换","slug":"从傅里叶变换到小波变换","date":"2019-06-05T12:22:15.000Z","updated":"2019-12-16T15:24:35.939Z","comments":true,"path":"2019/06/05/从傅里叶变换到小波变换/","link":"","permalink":"http://ch206265.github.io/2019/06/05/%E4%BB%8E%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2%E5%88%B0%E5%B0%8F%E6%B3%A2%E5%8F%98%E6%8D%A2/","excerpt":"一般称在时间域内的离散数字信号为原始信号。大多数的信号都是这种基于时间的函数，其对应的图形也就是关于“时间-幅值”的图形。但是，仅有这一种描述形式还远远不够，因为信号的一些重要特征在时间域内并不能够有明显的体现。 如果想要在其他的变换域内表示信号，就必须对信号施加各种数学变换，傅里叶变换/小波变换等都是其中的一种。而任何经过某种数学变换的输出信号则被称为处理信号。","text":"一般称在时间域内的离散数字信号为原始信号。大多数的信号都是这种基于时间的函数，其对应的图形也就是关于“时间-幅值”的图形。但是，仅有这一种描述形式还远远不够，因为信号的一些重要特征在时间域内并不能够有明显的体现。 如果想要在其他的变换域内表示信号，就必须对信号施加各种数学变换，傅里叶变换/小波变换等都是其中的一种。而任何经过某种数学变换的输出信号则被称为处理信号。 傅里叶变换FT傅里叶变换主要是将信号从时间域转换到频率域，信号的一些在时间域内表现的不明显的特征在频率域内会更加明显，更有利于对信号的分析。此外，傅里叶变换（包括小波变换）是一种可逆的数学变换，即它不仅能够将时间域内的信号转换到频率域（频率-幅值），还可以把频率域的信号转换回时间域（时间-幅值）。 但是，对于傅里叶变换在任何给定的时间，人们只能看到时间-幅值和频率-幅值二者之间的一种变化波形。也就是说： 观察时间域信号波形，看不出信号中的频率信息，只能看到信号的全部频率信息经过积分平均后所反映的信号在时刻t的值（可参考傅里叶逆变换公式$f(t)=\\int_{-\\infty}^{+\\infty} \\hat{f}(\\omega) \\mathrm{e}^{\\mathrm{i} 2 \\pi \\omega t} \\mathrm{d} \\omega$） 分析频率域（傅里叶变换域）信号的频谱波形则缺少时间信息，即，信号在某一频率处的值是全部时间域的信号值经过积分平均形成（可参考傅里叶变换公式$\\hat{f}(\\omega)=\\int_{-\\infty}^{+\\infty} f(t) \\mathrm{e}^{-\\mathrm{i} 2 \\pi \\omega t} \\mathrm{d} t$） 再次回顾一下傅里叶变换，它是将时间域的信号转换到了频率域，给出了信号的频谱，描述的是信号的“频率-幅值”波形。通过振幅值可以判断信号中存在多少频率成分（对应振幅值为0的频率成分不存在），发现信号在时间域中发现不了的特征。但是，傅里叶变换并没有告诉我们何种频率成分出现在何时。那么是不是在分析所有信号的时候都需要知道“何种频率成分出现在何时”呢？ 首先，平稳信号。在时间域中，我们称频率成分不随时间变化的信号为平稳信号。对于平稳信号，人们不需要知道其某一频率成分在什么时候出现。因为它的所有频率成分不随时间变化，在所有时刻都是一样的，也即平稳信号的所有频率成分在所有时刻出现。但是，对于非平稳信号，它的频率成分是随时间变化的，人们需要分析其频率和时间的关系也就需要同时知道它的时间和频率信息。这样，使用傅里叶变换分析非平稳信号就不太合适了。 短时傅里叶变换STFT非平稳信号在任一较短的时间间隔内可以近似认为是平稳信号，由此可以想象如果将非平稳信号切分成较短的时间区间，或用一个窗口长度较小的限制函数对原始非平稳信号加以限制，就可以形成一个近似的局部平稳信号，然后就可以在局部使用傅里叶变换进行分析。 这种通过取较短时间间隔或者加窗进行傅里叶变换的方法称为短时傅里叶变换（short time Fourier transform,STFT）又叫做窗口傅里叶变换(windowed Fourier transform,WFT)。所以，信号的短时傅里叶变换不是别的，正是这个信号和窗口函数相乘后的傅里叶变换。$$S T F T_{f}(b, \\omega)=\\int_{-\\infty}^{+\\infty}[f(t) g(t-b)] \\cdot \\mathrm{e}^{-\\mathrm{i} 2 \\pi \\omega t} \\mathrm{d} t$$但是，短时傅里叶变换也具有局限性，且与其窗口函数有关。海森伯测不准原理说明，窗口函数的分辨率单元不可能在时间维和频率维同时达到无限小，即不可能得到信号的时频精确表示，也就是说，人们不可能知道哪一频率成分发生在哪一精确时刻，只能够知道某一披绿范围（即频带）发生在哪个时间间隔。 为了满足平稳性的假设，就必须有足够短的窗口函数，在这个较短的时间间隔内，信号才可以近似认为是平稳的。但是，窗口函数的时间域支撑越短，越适合平稳性假设，也就能获得越好的时间粉笔那缕，但是频率分辨率就越差；而宽的窗口给出了较好的频率分辨率但是时间分辨率变差，并且较宽的窗口也不满足平稳性要求。所以窗口函数的选择问题突出体现了短时傅里叶的变换的局限性 一般来说，实验中观测道德信号，其特定频率成分事先是不知道的，因此，利用短时傅里叶变换对信号进行有效分解时，也不能保证选择到恰当的窗口大小尺寸。 为了解决分析处理非平稳信号时遇到的这种分辨率选择，也即分析确定窗口函数宽度的问题，研究人员需要寻找其他更适合的技术，小波变换就是其中之一。 一个短时傅里叶变换的例子信号$f(t)$的表达式如下：$$f(t)=\\left{\\begin{array}{ll}{\\sin 2 \\pi \\cdot 300 t,} &amp; {t \\in[0,250]} \\ {\\sin 2 \\pi \\cdot 200 t,} &amp; {t \\in[250,500]} \\ {\\sin 2 \\pi \\cdot 100 t,} &amp; {t \\in[500,750]} \\ {\\sin 2 \\pi \\cdot 50 t,} &amp; {t \\in[750,1000]}\\end{array}\\right.$$很明显它是一个非平稳信号，并且它的时间域图像如下： 下图是该信号在在不同窗口下进行短时傅里叶变换的三维图： 从这三组图中可以看出 (a)图的窗口函数最窄，时间分辨率最高（时间轴上对应的窗口宽度最窄），但是频率分辨率较差（频率轴上对应的窗口宽度最宽） (b)和(c)图的窗口函数宽度逐渐变大，时间轴上对应的每一个分析窗口也越来越大，但是相应的，在频率轴上对应的分析窗口的宽度却越来越窄 这说明了短时傅里叶变换的窗口分辨率所潜在的问题，即，窗口函数的分辨率不能在时间维和频率维上同时达到最大。 小波变换WT小波变换的定义如下：$$W T_{f}(a, \\tau)=\\frac{1}{\\sqrt{a}} \\int_{R} f(t) \\psi^{*}\\left(\\frac{t-\\tau}{a}\\right) d t$$ 其中$\\tau$代表平移参数，它表示尺度化后的基本小波沿时间轴移动的中心位置 $a&gt;0$，表示尺度参数，大的尺度对应着信号大范围内的整体概貌，对应较粗的观测；小的尺度则对应局部细节的观测 在短时傅里叶变换中，一旦选定了窗口函数，那么它就有了确定的窗口宽度或支撑。这样，短时傅里叶变换就只能用这单一不变的窗口分辨率去分析信号中的所有频率成分。 小波变换是短时傅里叶变换的发展，它能够针对待分析信号不同的频率成分调整窗口函数的宽度，即能够选择不同的分辨率对不同频率成分进行分析。比如： 在分析信号中的低频成分时，采用较低的时间分辨率（即窗口函数具有较大的时间域窗口宽度）。因为低的频率（大的尺度）对应的信号波形在时间域变化较缓而且持续时间长，用较宽的时间窗口就可以区分不同的频率成分。并且，宽的窗口函数对信号低频信息所能观察的范围更大/采集的样本更多，能更好地把握信号的整体性概貌或整体趋势 在分析高频成分时，采用较高的时间分辨率（即窗口具有较小的时间域窗口宽度）。因为高的频率（小的尺度）对应着信号的细节信息，对应的信号波形在时间域变化较快而且持续时间短，用窄窗口函数才可以区分不同的频率成分。并且，窄窗口有利于在时间域准确定位高频成分发生的时刻瞬间，从而预测信号的剧烈变化","categories":[{"name":"遥感与图像处理","slug":"遥感与图像处理","permalink":"http://ch206265.github.io/categories/%E9%81%A5%E6%84%9F%E4%B8%8E%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"}],"tags":[{"name":"小波变换","slug":"小波变换","permalink":"http://ch206265.github.io/tags/%E5%B0%8F%E6%B3%A2%E5%8F%98%E6%8D%A2/"},{"name":"图形处理","slug":"图形处理","permalink":"http://ch206265.github.io/tags/%E5%9B%BE%E5%BD%A2%E5%A4%84%E7%90%86/"}]}]}