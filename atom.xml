<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>清醒即活着</title>
  
  <subtitle>天下古今之庸人，皆以一懒字致之</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ch206265.github.io/"/>
  <updated>2019-12-16T14:42:35.381Z</updated>
  <id>http://ch206265.github.io/</id>
  
  <author>
    <name>ch206265</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>pandas-datastructure</title>
    <link href="http://ch206265.github.io/2019/11/29/pandas-datastructure/"/>
    <id>http://ch206265.github.io/2019/11/29/pandas-datastructure/</id>
    <published>2019-11-29T02:14:11.000Z</published>
    <updated>2019-12-16T14:42:35.381Z</updated>
    
    <content type="html"><![CDATA[<p>简单了解一下数值、字符串、正则表达式与模式匹配、日期、列表、元组、字典、控制流等概念</p><h2 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h2><p>python中常用的数值类型主要有：整数、浮点数、长整数和复数</p><h3 id="print语句中的-format"><a href="#print语句中的-format" class="headerlink" title="print语句中的.format"></a>print语句中的.format</h3><p>format函数中两个比较重要的 符号：<code>{}</code>和<code>:</code></p><ul><li><code>{}</code>是一个占位符，表示这里将要传入print语句一个具体的值，可以按照默认顺序接受也可以设定接收指定位置的数据；</li><li><code>:</code>是用来分隔传入的值和它的格式。<a id="more"></a></li></ul><p>具体数字格式化以及使用实例参考：<a href="https://www.runoob.com/python/att-string-format.html" target="_blank" rel="noopener">python format 格式化函数</a></p><p>需要知道的是，数值处理时会用到几种标准库模块和内置函数与模块来进行常见的数学计算。其中，标准库模块需要引入才能使用，比如，想要使用<code>math</code>模块中的一些函数：<code>exp</code>、<code>log</code>、<code>sqrt</code>，需要<code>from math import exp, log, sqrt</code>。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串可以包含在单引号、双引号、3个单引号或者3个双引号之间。</p><p>用来管理字符串的标准模块、内置函数和操作符也有很多，常用的操作符和函数包括：<code>+</code>、<code>*</code>、<code>len</code>。</p><p>处理字符串的一个常用标准库模块是string。在string模块中可以使用多个函数，如：<code>split</code>、<code>join</code>、<code>strip</code>、<code>replace</code>和<code>lower、upper、capitalize</code>等来有效管理字符串。</p><h3 id="字符串与引号"><a href="#字符串与引号" class="headerlink" title="字符串与引号"></a>字符串与引号</h3><h4 id="单引号、双引号"><a href="#单引号、双引号" class="headerlink" title="单引号、双引号"></a>单引号、双引号</h4><p>如果想要print输出<code>I&#39;m enjoying learning python</code>这句话，那么单引号，或者双引号的如法区别如下：</p><ul><li><code>print(&quot;Output #14: {0:s}&quot;.format(&#39;I\&#39;m enjoying learning Python.&#39;))</code></li><li><code>print(&quot;Output #14: {0:s}&quot;.format(&quot;I&#39;m enjoying learning Python.&quot;))</code></li></ul><p>即，如果使用单引号来包含z这个字符串的话，就不需要在<code>&quot;I&#39;m&quot;</code>的单引号前面使用反斜杠了。</p><h4 id="长字符串的换行"><a href="#长字符串的换行" class="headerlink" title="长字符串的换行"></a>长字符串的换行</h4><p>使用反斜杠<code>\</code>对长字符串进行换行处理，需要注意的是：</p><ul><li>反斜杠必须是每一行最后一个字符</li></ul><p>如果意外按下一个看不见的空格键，脚本就会抛出语法错误，不能正常运行</p><h4 id="三个单引号和三个双引号"><a href="#三个单引号和三个双引号" class="headerlink" title="三个单引号和三个双引号"></a>三个单引号和三个双引号</h4><p>使用三个单引号或者三个双引号，就是为了避免使用反斜杠对长字符串进行分行的，但是它们之间的的分行效果也有差异：</p><ul><li>反斜杠换行：即使在print中换行了，输出在屏幕上长字符串仍然是一行</li><li>三个单引号或者三个双引号换行：在print中式如何换行的，输出在屏幕上就是怎么换行的</li></ul><h3 id="字符串的一些操作符和内置函数"><a href="#字符串的一些操作符和内置函数" class="headerlink" title="字符串的一些操作符和内置函数"></a>字符串的一些操作符和内置函数</h3><h4 id="操作符"><a href="#操作符" class="headerlink" title="+操作符"></a>+操作符</h4><p>+操作符是将两个z字符串按照原样相加，所以如果想要连接两个字符串成一个句子的话，需要注意在连接出加上空格</p><h4 id="操作符-1"><a href="#操作符-1" class="headerlink" title="*操作符"></a>*操作符</h4><p>*操作符是将字符串重复一定的次数，格式也比较简单，例如<code>&quot;this is a string&quot;*4</code></p><h4 id="内置函数len"><a href="#内置函数len" class="headerlink" title="内置函数len"></a>内置函数len</h4><p>内置函数len用来确定字符串中字符的数量，它会将空格和标点符号也计算在内</p><h3 id="string模块中的一些函数"><a href="#string模块中的一些函数" class="headerlink" title="string模块中的一些函数"></a>string模块中的一些函数</h3><h4 id="split"><a href="#split" class="headerlink" title="split"></a>split</h4><h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><h4 id="strip"><a href="#strip" class="headerlink" title="strip"></a>strip</h4><h4 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h4><h4 id="lower、upper、capitalize"><a href="#lower、upper、capitalize" class="headerlink" title="lower、upper、capitalize"></a>lower、upper、capitalize</h4><h2 id="列表list"><a href="#列表list" class="headerlink" title="列表list"></a>列表list</h2><h3 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h3><p>用方括号创建列表，用<code>len()</code>计算列表中元素的数量，用<code>max()</code>和<code>min()</code>找出最大值和最小值，用<code>count()</code>计算出列表中某个值出现的次数</p><h3 id="列表索引值"><a href="#列表索引值" class="headerlink" title="列表索引值"></a>列表索引值</h3><p>使用列表索引值可以访问列表中的特定元素，其中[0]是第一个元素，[-1]是最后一个元素</p><h3 id="列表切片"><a href="#列表切片" class="headerlink" title="列表切片"></a>列表切片</h3><p>使用列表切片访问列表元素的一个子集，从开头开始切片，可以省略第一个索引值，一直切片到末尾们可以省略第二个索引值，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">print(<span class="string">"&#123;&#125;"</span>.format(a_list[<span class="number">0</span>:<span class="number">2</span>])) <span class="comment"># 1，2 </span></span><br><span class="line">print(<span class="string">"&#123;&#125;"</span>.format(a_list[:<span class="number">2</span>]))<span class="comment"># 1，2</span></span><br><span class="line">print(<span class="string">"&#123;&#125;"</span>.format(a_list[<span class="number">1</span>:<span class="number">3</span>]))<span class="comment"># 2，3</span></span><br></pre></td></tr></table></figure><h3 id="列表复制"><a href="#列表复制" class="headerlink" title="列表复制"></a>列表复制</h3><p>使用<code>[:]</code>复制一个列表，例如，下文中复制列表a_list中的内容给a_new_list，语句为：<code>a_new_list = a_list[:]</code> </p><h3 id="列表连接"><a href="#列表连接" class="headerlink" title="列表连接"></a>列表连接</h3><p>使用<code>+</code>将两个或者更多个列表连接起来 :<code>a_longer_list = a_list + another_list</code> </p><h3 id="使用in和not-in"><a href="#使用in和not-in" class="headerlink" title="使用in和not in"></a>使用in和not in</h3><p>使用<code>in</code>和<code>not in</code>来检查列表中是否有特定元素：<code>a = 2 in a_list</code>或<code>b = 2 not in a_list</code>，这些语句的返回值是<code>True</code>或者<code>False</code></p><h3 id="追加、删除和弹出元素"><a href="#追加、删除和弹出元素" class="headerlink" title="追加、删除和弹出元素"></a>追加、删除和弹出元素</h3><ul><li><p>使用<code>append()</code>向列表末尾追加一个新元素；</p></li><li><p>用<code>remove()</code>从列表中删除一个特定元素；</p></li><li><p>使用<code>pop()</code>从列表末尾删除一个元素；</p></li></ul><h3 id="列表反转"><a href="#列表反转" class="headerlink" title="列表反转"></a>列表反转</h3><p>使用<code>reverse()</code>原地反转一个列表，但是这样会修改原列表；想要反转列表同时又不修改原列表，可以先复制列表，然后对列表副本进行reverse操作。使用格式是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">copy_list = a_list[:]</span><br><span class="line">copy_list.reverse()</span><br><span class="line">print(copy_list)</span><br></pre></td></tr></table></figure><h3 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h3><p>使用<code>sort()</code>对列表进行原地排序，这样会修改原列表；想要排序但同时不修改原列表，可以先复制列表，然后对列表副本进行sort操作。使用的格式和reverse类似：<code>copy_list.sort()</code>，如果是数字排序后则从小到大排列。</p><h3 id="sorted排序函数"><a href="#sorted排序函数" class="headerlink" title="sorted排序函数"></a>sorted排序函数</h3><p>使用sorted()函数对一个列表集合按照列表中某个位置的元素进行排序。与sort()函数不同的是，sorted()函数返回一个新的排好序的列表，并不改变原列表的元素顺序</p><h4 id="eg1-sorted-函数和lambda-函数的配合使用"><a href="#eg1-sorted-函数和lambda-函数的配合使用" class="headerlink" title="eg1:sorted()函数和lambda()函数的配合使用"></a>eg1:sorted()函数和lambda()函数的配合使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_lists = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">3</span>]]</span><br><span class="line">my_lists_sorted_by_index_3 = sorted(my_lists, key=<span class="keyword">lambda</span> index_value:index_value[<span class="number">3</span>])</span><br><span class="line">print(<span class="string">"&#123;&#125;"</span>.format(my_lists_sorted_by_index_3))</span><br></pre></td></tr></table></figure><p>则输出为</p><blockquote><p>[[4, 3, 2, 1], [2, 4, 1, 3], [1, 2, 3, 4]]</p></blockquote><p>在这个示例中，关键字是一个<code>lambda</code>函数，表示使用索引位置为3的值（也就是列表中的第四个元素）对列表进行排序。</p><h4 id="eg2-使用operator模块中的itemgetter函数"><a href="#eg2-使用operator模块中的itemgetter函数" class="headerlink" title="eg2:使用operator模块中的itemgetter函数"></a>eg2:使用operator模块中的itemgetter函数</h4><p>导入operator模块中的itemgetter函数，使用每个列表中多个索引位置的值对列表集合进行排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line">mylist = [[<span class="number">123</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">444</span>], [<span class="number">22</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">444</span>], [<span class="number">354</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">678</span>], [<span class="number">235</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">678</span>],\</span><br><span class="line">         [<span class="number">578</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">290</span>], [<span class="number">461</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">290</span>]]</span><br><span class="line">my_list_sorted_by_index_3_and_0 = sorted(mylist, key=itemgetter(<span class="number">3</span>,<span class="number">0</span>))</span><br><span class="line">print(<span class="string">"&#123;&#125;"</span>.format(my_list_sorted_by_index_3_and_0))</span><br></pre></td></tr></table></figure><p>则输出为</p><blockquote><p>[[461, 1, 1, 290], [578, 1, 1, 290], [22, 6, 6, 444], [123, 2, 2, 444], [235, 5, 5, 678], [354, 4, 4, 678]]</p></blockquote><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>元组除了不能被修改之外其余地方和列表非常相似，应用于列表的函数和操作符，比如：len函数返回元组中元素的个数，元组索引和元组切片可以引用元组中特定的元素，+操作符可以连接多个元组。</p><h3 id="创建元组、元组解包及元组转换成列表（或列表转换成元组）"><a href="#创建元组、元组解包及元组转换成列表（或列表转换成元组）" class="headerlink" title="创建元组、元组解包及元组转换成列表（或列表转换成元组）"></a>创建元组、元组解包及元组转换成列表（或列表转换成元组）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用圆括号创建元组，方括号创建列表</span></span><br><span class="line">my_tuple = (<span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>)</span><br><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment">#使用赋值操作符左边的变量对元组进行解包</span></span><br><span class="line">one, two, three = my_tuple</span><br><span class="line"><span class="comment">#list()将元组转换成列表，tuple()将列表转化成元组</span></span><br><span class="line">print(<span class="string">"&#123;&#125;"</span>.format(tuple(my_list)))</span><br><span class="line">print(<span class="string">"&#123;&#125;"</span>.format(list(my_tuple)))</span><br></pre></td></tr></table></figure><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>python中字典的本质是包含带有唯一标识符的成对信息的列表。</p><h3 id="列表和字典的区别"><a href="#列表和字典的区别" class="headerlink" title="列表和字典的区别"></a>列表和字典的区别</h3><ol><li>在列表中，可以使用被称为<strong>索引</strong>或<strong>索引值</strong>的连续整数来引用某个列表值。在字典中，要引用一个字典值，则可以使用整数、字符串或其他python对象，这些统称为<strong>字典键</strong>。在唯一键值比连续整数更能反映出变量值含义的情况下，这个特点使字典比列表更实用。</li><li>列表中，列表值是隐式排序的，因为索引是连续整数。在字典中，字典值则没有排序，因为索引不仅仅只是数值。你可以为字典中的项目定义排序操作，但是字典确实没有内置排序。</li><li>在列表中，为一个不存在的位置（索引）赋值是非法的。在字典中，则可以在必要的时候创建新的位置（键）。</li><li>因为没有排序，所以当你进行搜索或添加新值时，字典的响应时间更快（当你插入一个新项目时，计算机不需要重新分配索引值）。当你处理的数据越来越多时，这是一个重要的考虑因素。</li></ol><h3 id="创建字典、引用字典中的值和复制字典"><a href="#创建字典、引用字典中的值和复制字典" class="headerlink" title="创建字典、引用字典中的值和复制字典"></a>创建字典、引用字典中的值和复制字典</h3><p>使用花括号<code>{}</code>创建字典；使用冒号<code>:</code>分隔键-值对；使用<code>len()</code>计算出字典中键-值对的数量；使用键来引用字典中特定的值，需要字典名称、一对方括号和一个特定的键值（字符串形式）；使用<code>copy()</code>复制字典，需要先在字典名称后面加上copy函数，然后将这个表达式赋给一个新的字典即可:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a_dict = &#123;<span class="string">'one'</span>:<span class="number">1</span>, <span class="string">'two'</span>:<span class="number">2</span>, <span class="string">'three'</span>:<span class="number">3</span>&#125;</span><br><span class="line">print(<span class="string">"&#123;&#125;"</span>.format(a_dict))</span><br><span class="line">print(<span class="string">"a_dic has &#123;!s&#125; elements"</span>.format(len(a_dict)))</span><br><span class="line">print(<span class="string">"&#123;&#125;"</span>.format(a_dict[<span class="string">'two'</span>]))</span><br><span class="line">copy_dict = a_dict.copy()</span><br></pre></td></tr></table></figure><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><h3 id="键、值和项目"><a href="#键、值和项目" class="headerlink" title="键、值和项目"></a>键、值和项目</h3><h3 id="使用in、not-in和get"><a href="#使用in、not-in和get" class="headerlink" title="使用in、not in和get"></a>使用in、not in和get</h3><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h1 id="pandas数据结构"><a href="#pandas数据结构" class="headerlink" title="pandas数据结构"></a>pandas数据结构</h1><h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul><li>多维数组</li><li>字典</li><li>标量值</li><li>Series类似多维数组</li><li>Series类似字典</li><li>适量操作与对齐Series标签</li></ul><h2 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h2><p>dataframe是由多种类型的列构成的二维标签数据结构</p><ul><li>用<strong>Series字典</strong>或者<strong>字典</strong>生成DataFrame<ul><li>index和columns属性分别用于访问行、列标签</li></ul></li><li>用<strong>多维数组字典</strong>、<strong>列表字典</strong>生成DataFrame</li><li>用<strong>结构多维数组</strong>或<strong>记录多维数组</strong>生成DataFrame</li><li>用<strong>列表字典</strong>生成DataFrame</li><li>用<strong>元组字典</strong>生成DataFrame</li><li>用<strong>Series</strong>创建DataFrame</li><li>备选构建器<ul><li>DataFrame.from_dict</li><li>DataFrame.from_records</li></ul></li><li>提取、添加、删除列</li><li>用方法链分配新列</li></ul><p>参考：<a href="http://www.pypandas.cn/docs/getting_started/dsintro.html#series" target="_blank" rel="noopener">pandas中文网</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单了解一下数值、字符串、正则表达式与模式匹配、日期、列表、元组、字典、控制流等概念&lt;/p&gt;
&lt;h2 id=&quot;数值&quot;&gt;&lt;a href=&quot;#数值&quot; class=&quot;headerlink&quot; title=&quot;数值&quot;&gt;&lt;/a&gt;数值&lt;/h2&gt;&lt;p&gt;python中常用的数值类型主要有：整数、浮点数、长整数和复数&lt;/p&gt;
&lt;h3 id=&quot;print语句中的-format&quot;&gt;&lt;a href=&quot;#print语句中的-format&quot; class=&quot;headerlink&quot; title=&quot;print语句中的.format&quot;&gt;&lt;/a&gt;print语句中的.format&lt;/h3&gt;&lt;p&gt;format函数中两个比较重要的 符号：&lt;code&gt;{}&lt;/code&gt;和&lt;code&gt;:&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{}&lt;/code&gt;是一个占位符，表示这里将要传入print语句一个具体的值，可以按照默认顺序接受也可以设定接收指定位置的数据；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:&lt;/code&gt;是用来分隔传入的值和它的格式。
    
    </summary>
    
      <category term="python" scheme="http://ch206265.github.io/categories/python/"/>
    
    
      <category term="pandas" scheme="http://ch206265.github.io/tags/pandas/"/>
    
      <category term="python" scheme="http://ch206265.github.io/tags/python/"/>
    
      <category term="数据处理" scheme="http://ch206265.github.io/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>npm install包运行出错</title>
    <link href="http://ch206265.github.io/2019/11/25/set-the-password-for-hexo/"/>
    <id>http://ch206265.github.io/2019/11/25/set-the-password-for-hexo/</id>
    <published>2019-11-25T08:51:53.000Z</published>
    <updated>2019-12-16T14:52:49.702Z</updated>
    
    <content type="html"><![CDATA[<p>最近想要给博客文章做个加密，一开始也是无从下手，但是还好有篇博文：<a href="http://zhailiange.com/2017/07/06/hexo-encrypt/" target="_blank" rel="noopener">Hexo 博客加密功能添加 | Hailiang’s Blog</a><br>这里面介绍了两个博客加密插件<code>hexo-blog-encrypt</code>和<code>hexo-encrypt</code><br>最初按照介绍，安装<code>hexo-blog-encrypt</code>但是遇到了困难<br><img src="https://img-blog.csdnimg.cn/20191123211617597.png" alt="在这里插入图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br><span class="line">npm WARN babel-eslint@10.0.3 requires a peer of eslint@&gt;= 4.12.1 but none is installed.</span><br><span class="line">You must install peer dependencies yourself.</span><br></pre></td></tr></table></figure><p>不知道是什么意思，上网搜索了一下，找到了这篇博文：<a href="https://blog.csdn.net/qq_43153418/article/details/88380082" target="_blank" rel="noopener">npm install 包运行出错 - 德尼的博客 - CSDN博客</a> ，直接复制了里面的答案：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install eslint@4.x babel-eslint@8 --save-dev</span><br></pre></td></tr></table></figure><p>但是一直成功不了，知道看到了<a href="https://blog.csdn.net/qq_37336604/article/details/80359808" target="_blank" rel="noopener">这篇文章</a>，才明白了报错的含义，就是在<code>package.json</code>中缺少了两个依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"babel-eslint"</span>: <span class="string">"^10.0.3"</span>,</span><br><span class="line"><span class="string">"eslint"</span>: <span class="string">"^4.12.1"</span></span><br></pre></td></tr></table></figure><p>需要我们手动安装……而之前直接复制的<code>npm install eslint@4.x babel-eslint@8 --save-dev</code><br>其实也是安装这两个依赖的，但是，它安装好后是直接在<code>package.json</code>中新写一个<code>dependencies</code>，没和原来的格式进行合并。<br>最后，现在虽然装好了，但是也还发现了个bug，就是对于有目录的文章，<code>hexo-blog-encrypt</code>这个插件会使侧边的目录导航栏显示失效。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近想要给博客文章做个加密，一开始也是无从下手，但是还好有篇博文：&lt;a href=&quot;http://zhailiange.com/2017/07/06/hexo-encrypt/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo 博客加密功能添加 | 
      
    
    </summary>
    
      <category term="学习工具" scheme="http://ch206265.github.io/categories/%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="建站笔记" scheme="http://ch206265.github.io/tags/%E5%BB%BA%E7%AB%99%E7%AC%94%E8%AE%B0/"/>
    
      <category term="hexo-blog-encrypt" scheme="http://ch206265.github.io/tags/hexo-blog-encrypt/"/>
    
      <category term="hexo-encrypt" scheme="http://ch206265.github.io/tags/hexo-encrypt/"/>
    
  </entry>
  
  <entry>
    <title>初次安装Ubuntu18.04</title>
    <link href="http://ch206265.github.io/2019/11/25/first-setup-ubuntu/"/>
    <id>http://ch206265.github.io/2019/11/25/first-setup-ubuntu/</id>
    <published>2019-11-25T08:51:11.000Z</published>
    <updated>2019-11-30T08:01:46.700Z</updated>
    
    <content type="html"><![CDATA[<p> 2019/11/23 15:34 </p><p> 主要解决的问题：<br>1、解决 “明明C盘还有几十G可以使用但是创建压缩卷时可压缩竟然是0”<br>2、解决“安装完之后才知道是UEFI启动模式，Easy BCD新添加条目变成灰色不可用”</p><h2 id="一、设备情况"><a href="#一、设备情况" class="headerlink" title="一、设备情况"></a>一、设备情况</h2><p>双硬盘电脑：固态硬盘（win系统盘）+机械硬盘<br>BIOS模式：UEFI</p><a id="more"></a><h2 id="二、准备工作"><a href="#二、准备工作" class="headerlink" title="二、准备工作"></a>二、准备工作</h2><h3 id="1、下载Ubuntu镜像"><a href="#1、下载Ubuntu镜像" class="headerlink" title="1、下载Ubuntu镜像"></a>1、下载Ubuntu镜像</h3><p>我是直接拷贝了同学的；你也可以从下面的网址中下载<br><a href="https://cn.ubuntu.com/download" target="_blank" rel="noopener">系统下载 | Ubuntu</a> </p><h3 id="2、在磁盘中压缩出未分配的空闲区域"><a href="#2、在磁盘中压缩出未分配的空闲区域" class="headerlink" title="2、在磁盘中压缩出未分配的空闲区域"></a>2、在磁盘中压缩出未分配的空闲区域</h3><p>安装Ubuntu需要分配四个磁盘分区分别给“/”、“/home”、“swap”和“/boot”。<br>（具体分配体现在安装过程，现在这一步骤只是先把他们需要的磁盘空间给压缩出来）<br>其中，挂载点“/”是Ubuntu系统盘相当于win系统的C盘；<br>挂载点“/home”是用户文件夹，相当于win系统的Users；<br>挂载点“swap”是交换空间，相当于win的虚拟内存；<br>而挂载点“/boot”则是Ubuntu的启动引导空间。<br>（<a href="https://blog.csdn.net/lin353809836/article/details/86747491" target="_blank" rel="noopener">什么是分区/主分区/逻辑分区/挂载点</a>）<br>由于电脑是双硬盘，固态硬盘（win系统盘）+机械硬盘，压缩出分配给这四个挂载点的磁盘空间时需要注意以下几点：</p><h4 id="注意1：在机械硬盘和装win系统的固态硬盘上分别压缩出一个空闲区域"><a href="#注意1：在机械硬盘和装win系统的固态硬盘上分别压缩出一个空闲区域" class="headerlink" title="注意1：在机械硬盘和装win系统的固态硬盘上分别压缩出一个空闲区域"></a>注意1：在机械硬盘和装win系统的固态硬盘上分别压缩出一个空闲区域</h4><p>机械硬盘上压缩出一个较大空闲区域后，在win10系统盘（固态）上再压缩出大约500MB的空闲区域。<br>机械硬盘上压缩出来的空闲空间主要分配给：挂载点“/”、“/home”、“swap”；<br>在装win系统的固态硬盘上压缩出的空间分配给挂载点“/boot”。</p><ul><li>为什么不把挂载点“/”、“/home”、“swap”和“/boot”的分配统一放在固态盘或者机械盘？<br>统一放在固态盘就和win系统装在一起了，能不在一起就别再在一起；<br>统一都放在机械硬盘中，“/boot”分区没在win的系统盘，容易开机引导失效，具体描述就在下面⬇</li><li>为什么挂载点“/boot”分区要和win系统盘在一起？<br>参看<a href="https://blog.csdn.net/qq_24624539/article/details/81775635" target="_blank" rel="noopener">这篇博文</a>的讲解，如果不这么办，会出现Ubuntu开机时光标一直在左上角闪烁无法进入系统的问题，我按照博文中的描述，一次就安装成功了，没有出现左上角光标一直闪烁开机引导失效的情况。<h4 id="注意2：明明C盘还有几十G可以使用但是创建压缩卷时可压缩竟然是0怎么办"><a href="#注意2：明明C盘还有几十G可以使用但是创建压缩卷时可压缩竟然是0怎么办" class="headerlink" title="注意2：明明C盘还有几十G可以使用但是创建压缩卷时可压缩竟然是0怎么办"></a>注意2：明明C盘还有几十G可以使用但是创建压缩卷时可压缩竟然是0怎么办</h4>一般情况下，我们使用<a href="https://jingyan.baidu.com/article/425e69e6bbd0c7be14fc164a.html" target="_blank" rel="noopener">win10自带的磁盘管理功能</a>就可以从磁盘上压缩出空闲空间，但是也有一些例外。<br>明明C盘还有几十G可以使用但是创建压缩卷时可压缩竟然是0？？我遇见了……网上查了一些方法，比如磁盘清理，清了的确不少的东西，但是还不行；又有人说磁盘清理之后要碎片整合，也搞了，还是不行。所以，最后用——DiskGenius了。<br>在我多次使用过程中偶然发现，用过DiskGenius后，再用win10磁盘管理中自带的“压缩卷”功能时，可压缩空间突然变多了，已经不是0了……，这样再调整压缩空间大小的时候就不必用DiskGenius，每次重启进入PE了。<h3 id="3、安装开机引导程序，Easy-BCD或者Easy-UEFI"><a href="#3、安装开机引导程序，Easy-BCD或者Easy-UEFI" class="headerlink" title="3、安装开机引导程序，Easy BCD或者Easy UEFI"></a>3、安装开机引导程序，Easy BCD或者Easy UEFI</h3><a href="https://easybcd.en.softonic.com/" target="_blank" rel="noopener">EasyBCD - Download</a><br><a href="https://easyuefi.en.softonic.com/" target="_blank" rel="noopener">EasyUEFI - Download</a> <h3 id="4、制作U盘启动盘"><a href="#4、制作U盘启动盘" class="headerlink" title="4、制作U盘启动盘"></a>4、制作U盘启动盘</h3><a href="https://tutorials.ubuntu.com/tutorial/tutorial-create-a-usb-stick-on-windows#0" target="_blank" rel="noopener">Create a bootable USB stick on Windows | Ubuntu tutorials</a> <h3 id="5、进入BIOS中，将开机启动设置为从U盘启动"><a href="#5、进入BIOS中，将开机启动设置为从U盘启动" class="headerlink" title="5、进入BIOS中，将开机启动设置为从U盘启动"></a>5、进入BIOS中，将开机启动设置为从U盘启动</h3>设置方法，<a href="https://jingyan.baidu.com/article/1974b289ebb809b4b0f7747d.html" target="_blank" rel="noopener">参考此链接</a><h2 id="三、安装过程"><a href="#三、安装过程" class="headerlink" title="三、安装过程"></a>三、安装过程</h2>安装过程主要参考这篇博文：<br><a href="https://blog.csdn.net/u013052326/article/details/81545449" target="_blank" rel="noopener">Win10+Ubuntu18.04双系统安装指南（一）（实操真谛） - 索命的博客 - CSDN博客</a><br><a href="https://blog.csdn.net/flyyufenfei/article/details/79187656" target="_blank" rel="noopener">Windows + Ubuntu 16.04 双系统安装详细教程 - flyyufenfei的博客 - CSDN博客</a><br>简单总结以下需要注意的点有：<h3 id="1、断网"><a href="#1、断网" class="headerlink" title="1、断网"></a>1、断网</h3>安装过程需要断网吗？讲道理都可以，但是断网的话在安装的时候不检查更新了，安装的更快，并且在<a href="https://blog.csdn.net/qq_24624539/article/details/81775635" target="_blank" rel="noopener">这篇文章</a>中说到，16.04安装时必须断网（原文说是“拔掉网线”），不然会导致“选地图处安装程序卡死、安装失败”。因此我是断网安装的（但是安装的是18.04），安装成功。<h3 id="2、-键盘布局"><a href="#2、-键盘布局" class="headerlink" title="2、 键盘布局"></a>2、 键盘布局</h3>什么的这些设置按照默认，英语（美国）就行了<h3 id="3、-“更新和其他软件”"><a href="#3、-“更新和其他软件”" class="headerlink" title="3、 “更新和其他软件”"></a>3、 “更新和其他软件”</h3>“更新和其他软件”这一步，<br>选择“最小安装”，<br>去掉“安装Ubuntu时下载更新”，<br>勾选“为图形或无线硬件，以及其他媒体格式安装第三方软件”<br>（在没有网的情况下这么设置，并且这样在安装的过程中就不会自动检查更新了，提高了安装的速度）<h3 id="4、“安装类型”"><a href="#4、“安装类型”" class="headerlink" title="4、“安装类型”"></a>4、“安装类型”</h3>“安装类型”这一步选择“其他选项”自己创建调整分区，随后便进入到自己创建分区的关键环节，<br>需要创建前文提到的“/”、“/home”、“swap”和“/boot”四个分区，前三个建在机械硬盘的那个空闲空间中，“/boot”分区创建在固态硬盘的空闲空间中，其中“/boot”分区比较关键一点，容易出错。<br>在这一步，EFI引导和boot引导的设置有所不同，需要根据自己设置的启动方式确定。<br>总体来讲，如果是Bios的启动模式是UEFI，对应EFI引导，则不需要”/boot”，创建分区的时候“用于”设置为“EFI系统分区”：图片来自：<a href="https://blog.csdn.net/flyyufenfei/article/details/79187656" target="_blank" rel="noopener">https://blog.csdn.net/flyyufenfei/article/details/79187656</a><br><img src="https://img-blog.csdnimg.cn/20191123205218727.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoMjA2MjY1,size_16,color_FFFFFF,t_70" alt="图片来自"><br>Bios的启动模式如果是Legacy，对应的就要设置Boot引导，需要创建“/Boot”分区：<br>图片来自：<a href="https://blog.csdn.net/flyyufenfei/article/details/79187656" target="_blank" rel="noopener">https://blog.csdn.net/flyyufenfei/article/details/79187656</a><br><img src="https://img-blog.csdnimg.cn/20191123205312600.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoMjA2MjY1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>其他分区根据自己需要结合参考文章进行设置，这里不再总结了。<h3 id="6、“安装启动引导器的设备”"><a href="#6、“安装启动引导器的设备”" class="headerlink" title="6、“安装启动引导器的设备”"></a>6、“安装启动引导器的设备”</h3>然后不要直接点击”安装“，还是在进行分区设置的界面左下方，有一个“安装启动引导器的设备”的设置选项。<br>这里如果是EFI引导的话，选择EFI引导对应的分区；<br>若是Boot引导的话，就选择”/boot“分区所在的设备。<br>图片来自：<a href="https://blog.csdn.net/flyyufenfei/article/details/79187656" target="_blank" rel="noopener">https://blog.csdn.net/flyyufenfei/article/details/79187656</a><br><img src="https://img-blog.csdnimg.cn/20191123205402915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoMjA2MjY1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h3 id="7、-最后"><a href="#7、-最后" class="headerlink" title="7、 最后"></a>7、 最后</h3>最后会出现一个你配置好的分区表让你检查是否有误，无误后继续；<br>然后会出现个地图让你选择地域（选上海）；<br>然后设置键盘布局，设置设备名称/账号名称/开机密码等；<br>最后进入到安装状态；<br>安装完成后，拔下U盘重启，更改Bios的启动项为原来的“操作系统的启动管理员”。<h2 id="四、使用Easy-BCD或者Easy-UEFI进行引导设置"><a href="#四、使用Easy-BCD或者Easy-UEFI进行引导设置" class="headerlink" title="四、使用Easy BCD或者Easy UEFI进行引导设置"></a>四、使用Easy BCD或者Easy UEFI进行引导设置</h2>由于我安装的时候没有意识到自己是UEFI模式，完全按照网上的教程只在固态盘创建了个”/boot“分区，然后<a href="https://blog.csdn.net/flyyufenfei/article/details/79187656" target="_blank" rel="noopener">参考这篇博文</a>，使用Easy BCD的时候才有所提示，并且新添加条目时都是灰色：<br>（图片来自：<a href="https://blog.csdn.net/qiusuoxiaozi/article/details/72807104）" target="_blank" rel="noopener">https://blog.csdn.net/qiusuoxiaozi/article/details/72807104）</a><br><img src="https://img-blog.csdnimg.cn/20191123205515964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoMjA2MjY1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我以为自己第一次安装要凉了，结果网上搜到有讲，可以使用Easy UEFI进行引导，并按照<a href="https://blog.csdn.net/www_helloworld_com/article/details/84672165" target="_blank" rel="noopener">这篇博客</a>完成了引导设置（只看Easy UEFI的使用这部分就可以了）。<br>但是有一个比较奇怪的地方，我在Easy UEFI中找之前boot分区(或者efi系统分区)所在的那500MB空间时无法选中，但是在固态硬盘中还有一块260MB的efi分区，在这个分区中找到了<code>grubx64.efi</code>（这个貌似是windows的efi引导区）我也不知道为什么……<br>最终重启后出现了让选择启用那个系统的界面，直接回车就进入到了Ubuntu系统，然后自动提示需要更新以下所选择语言的一些东西，具体是什么忘记了……<br>第一次安装就这么“成功”了，限于自己的认识，这可能并不是真正的成功，或许有很多隐藏的小隐患……但是，只能先这样用着了，毕竟目前也没什么问题出现……此外，这只是针对自己遇到的情况的一些总结，并不具有普遍性……</li></ul><p><strong>注</strong>：由于我以为在Easy UEFI中选择了那个260MB的分区进行引导，故而500MB的那个没有用了，就把500MB的分区给格式化了，然后悲剧就来了，引导崩溃了，显示<code>Minimal BASH like line editing is supported. For the first word, TAB lists possible command completions. anywhere else TAB lists possible device or file completions.</code>错误，导致我win10和ubuntu两个系统都无法进入了，最后从<a href="https://blog.csdn.net/heroacool/article/details/50817856" target="_blank" rel="noopener">这篇文章</a>中找到了<a href="https://www.linuxidc.com/Linux/2015-07/120748.htm" target="_blank" rel="noopener">解决办法</a>，使用<code>bootrepair</code>,但是这个工具也只能让我从新进入到win10中，ubuntu还是没法进入，无奈就重新安装了（除了这次手抽，应该还算是一次安装成功<code>^_^</code>）。重新安装后就注意到自己是UEFI 模式了，就专门在500MB 的分区选择<code>efi系统分区</code>，但是奇怪的是，在用Easy UEFI引导的时候500MB 的那个分区仍然是不可选的，无奈还是选择了260MB的那个……</p><h2 id="五、ubuntu系统安装好后"><a href="#五、ubuntu系统安装好后" class="headerlink" title="五、ubuntu系统安装好后"></a>五、ubuntu系统安装好后</h2><p><a href="https://blog.csdn.net/Jesse_Mx/article/details/52816928" target="_blank" rel="noopener">https://blog.csdn.net/Jesse_Mx/article/details/52816928</a><br><a href="https://blog.csdn.net/day_to_die/article/details/78689999" target="_blank" rel="noopener">安装Ubuntu后必须要做的几件事(一)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 2019/11/23 15:34 &lt;/p&gt;
&lt;p&gt; 主要解决的问题：&lt;br&gt;1、解决 “明明C盘还有几十G可以使用但是创建压缩卷时可压缩竟然是0”&lt;br&gt;2、解决“安装完之后才知道是UEFI启动模式，Easy BCD新添加条目变成灰色不可用”&lt;/p&gt;
&lt;h2 id=&quot;一、设备情况&quot;&gt;&lt;a href=&quot;#一、设备情况&quot; class=&quot;headerlink&quot; title=&quot;一、设备情况&quot;&gt;&lt;/a&gt;一、设备情况&lt;/h2&gt;&lt;p&gt;双硬盘电脑：固态硬盘（win系统盘）+机械硬盘&lt;br&gt;BIOS模式：UEFI&lt;/p&gt;
    
    </summary>
    
      <category term="学习工具" scheme="http://ch206265.github.io/categories/%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Ubuntu" scheme="http://ch206265.github.io/tags/Ubuntu/"/>
    
      <category term="Linux" scheme="http://ch206265.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>lean-git</title>
    <link href="http://ch206265.github.io/2019/11/25/lean-git/"/>
    <id>http://ch206265.github.io/2019/11/25/lean-git/</id>
    <published>2019-11-25T08:44:31.409Z</published>
    <updated>2019-12-16T15:10:57.072Z</updated>
    
    <content type="html"><![CDATA[<p>起因</p><p>为了实现博客文章的及时更新，需要多端实现Hexo同步，在网上查找的大部分文章都是基于GitHub，创建分支，实现此功能的，因此便简单学习一下git的基本操作，在此做下记录。</p><h2 id="初次用到的命令"><a href="#初次用到的命令" class="headerlink" title="初次用到的命令"></a>初次用到的命令</h2><p>本文主要参考《GitHub入门与实践》这本书，目前使用到的命令是：</p><ol><li><p><strong>git status、git branch</strong></p></li><li><p><strong>git add、git add –all、git add –a</strong></p></li><li><p><strong>git commit -m “log_message”、git commit</strong></p></li><li><p><strong>git diff、git diff HEAD</strong></p></li><li><p><strong>git remote add origin sshURL、git remote rm origin</strong></p></li><li><p><strong>git push origin branchname</strong></p></li><li><p><strong>git pull origin branchname</strong></p></li></ol><h2 id="对这些命令的初步认识"><a href="#对这些命令的初步认识" class="headerlink" title="对这些命令的初步认识"></a>对这些命令的初步认识</h2><ol><li><p>git add、git commit、git push之见的关系，以及git diff 和git diff HEAD到底是谁和谁在比较差异。</p><p><strong>通过git add、git commit、git push理解git的三个区：</strong></p><p>①工作区（working tree）②暂存区（index/stage）③本地仓库区（.git）</p><img src="https://img-blog.csdnimg.cn/2019112520480633.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoMjA2MjY1,size_16,color_FFFFFF,t_70" width="65%"><p><strong>git diff 和git diff HEAD的区别：</strong></p><p>git diff 命令可以查看当前工作树与暂存区之间的差别。<br>git diff HEAD命令可以查看工作树和最新提交之间的差别。<br>另外，退出git diff HEAD需要在那个窗口按<code>q</code></p></li><li><p>git commit -m “logmessage”只是在引号中写一些本次commit的一些备注，简短的一句话；如果写完git commit后回车，那么会进入vim编辑器中，在界面的左上角开始可以记述详细提交信息。</p><p>提交格式如下：</p><blockquote><p>第一行：用一行文字简述提交更改的内容</p><p>第二行：空行</p><p>第三行及以后：记述更改的原因和详细内容</p></blockquote></li></ol><p>下图是刚进入编辑器的界面，按下字母c就可以进入编辑状态：<br>   <img src="https://img-blog.csdnimg.cn/2019112521034670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoMjA2MjY1,size_16,color_FFFFFF,t_70" width="65%"><br>  按下字母后按照上文提到的提交格式，在左上角开始编辑；编辑完成之后按下Esc，接着连按两次大写的Z，便可退出编辑器：<br>   <img src="https://img-blog.csdnimg.cn/2019112521041458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoMjA2MjY1,size_16,color_FFFFFF,t_70" width="65%"></p><p><strong>最后，下面是我在使用这些命令时的一些截图，只是为了长时间不用下次看到后能够快速记起：</strong><br>   <img src="https://img-blog.csdnimg.cn/20191125205028291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoMjA2MjY1,size_16,color_FFFFFF,t_70" width="65%"><br>   <img src="https://img-blog.csdnimg.cn/20191125205043489.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoMjA2MjY1,size_16,color_FFFFFF,t_70" width="65%"><br>   <img src="https://img-blog.csdnimg.cn/20191125205104115.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoMjA2MjY1,size_16,color_FFFFFF,t_70" width="65%"><br>   <img src="https://img-blog.csdnimg.cn/20191125210226785.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoMjA2MjY1,size_16,color_FFFFFF,t_70" width="65%"><br>      <img src="https://img-blog.csdnimg.cn/20191125211331185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoMjA2MjY1,size_16,color_FFFFFF,t_70" title="上图是测试一下git add之前working tree和暂存区(stage/index)的差别" width="65%"><br>      <img src="https://img-blog.csdnimg.cn/20191125205904917.png" title="上图是测试一下git add之后working tree和暂存区(stage/index)的差别——没有差别" width="65%"><br>     <img src="https://img-blog.csdnimg.cn/20191125205256244.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoMjA2MjY1,size_16,color_FFFFFF,t_70" title="上图是测试一下git commit之前working tree和最新提交的差别" width="65%"><br>        <img src="https://img-blog.csdnimg.cn/20191125205317428.png" title="上图是测试一下git commit之后working tree和最新提交的差别——没差别" width="65%"></p><blockquote><p>此部分建议参考：</p><ul><li><a href="https://blog.csdn.net/u013485584/article/details/53303858" target="_blank" rel="noopener">git diff与git diff HEAD – file - 二楼后座的专栏 - CSDN博客</a></li><li><a href="https://blog.csdn.net/minolk/article/details/81777467" target="_blank" rel="noopener">git的三个区域工作区，缓存区，暂存区 - minolk的博客 - CSDN博客</a></li></ul></blockquote><h2 id="一些推荐"><a href="#一些推荐" class="headerlink" title="一些推荐"></a>一些推荐</h2><p>最后推荐一些对git基础操作总结的比较好的文章</p><p><a href="https://blog.csdn.net/Jesse_Mx/article/details/78059733" target="_blank" rel="noopener">Git简易教程笔记（1） - Jesse_Mx的博客 - CSDN博客</a></p><p><a href="https://blog.csdn.net/Jesse_Mx/article/details/78158790" target="_blank" rel="noopener">Git简易教程笔记（2） - Jesse_Mx的博客 - CSDN博客</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;起因&lt;/p&gt;
&lt;p&gt;为了实现博客文章的及时更新，需要多端实现Hexo同步，在网上查找的大部分文章都是基于GitHub，创建分支，实现此功能的，因此便简单学习一下git的基本操作，在此做下记录。&lt;/p&gt;
&lt;h2 id=&quot;初次用到的命令&quot;&gt;&lt;a href=&quot;#初次用到的命令&quot; 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>多终端同步Hexo博客</title>
    <link href="http://ch206265.github.io/2019/11/22/Multiterminal-synchronization-of-hexo-blog/"/>
    <id>http://ch206265.github.io/2019/11/22/Multiterminal-synchronization-of-hexo-blog/</id>
    <published>2019-11-21T17:14:07.000Z</published>
    <updated>2019-12-16T14:51:23.533Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下实现多终端同步Hexo博客的一些操作，学习的过程中意外学习了一些git的基本操作，并记录在另外一篇博文中。</p><h2 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h2><p>根据下面总结的思路配合上面的提到的参考文章，相信如果下次还需要进行这样的操作，也会很快就熟悉了。<br><strong>首先需要知道Hexo在本地和在GitHub上的文件是两个不同的东西。本地的主要是部署文件包括了自己写的所有文章的MarkDown文件，主题文件等等；上传到GitHub中的文件是部署文件渲染过后的文件，我们最终访问GitHubName.github.io看到的个人站点其实就是这些保存在GitHub中渲染过的东西。想要实现多端同步，关键点是让多台电脑上都有最新的部署文件，也就是那个本地文件，因此我们可以利用git实现这一需求。</strong></p><a id="more"></a><h2 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h2><ol><li><p>到GitHubName.github.io这个仓库，新建分支命名为hexo（这个新建的branch就是为了存储本地的部署文件），并将新建的hexo分支设置为default分支；</p></li><li><p>然后在老电脑上（有本地部署文件的电脑）使用git clone，把hexo仓库克隆下来，再把部署文件全部复制粘贴进这个克隆下来的hexo文件夹中（最好使用clone吧，刚开始我是直接把那个仓库的ZIP压缩包下载下来了，但是在某一步一直会报错）；</p></li><li><p>按照上面的思路分析，我们最终目的是要将hexo的本地部署文件上传到GitHub上，所以按顺序依次使用git init、git add、git diff HEAD、git commit、git remote add origin sshURL 、git push origin hexo等命令，就可以把最新粘贴进分支hexo中的部署文件同步到GitHub中了。这个过程出现的大多数问题应该是由于不熟悉这些git命令造成的。（我刚开始尝试时遇到了很多问题，详见文末）</p></li><li><p>然后在新电脑上安装git、node.js、Hexo环境、以及生成SSH添加到GitHub。</p></li><li><p>新电脑上的准备工作就绪之后，把hexo分支git clone下来，然后就可以和在原来电脑上一样进行写作了。写完之后一般按照 git init、git add、git diff HEAD、git commit、git remote add origin sshURL 、git push origin hexo。其中git remote add origin sshURL也不必每次都弄。</p></li><li><p>上一步只是把最新的部署文件上传到了GitHub中，但是并没有对其渲染，所以还得依次执行Hexo 的命令：hexo clean 、hexo g、hexo s、hexo d。</p></li><li><p>最后，这样就可以在两台电脑上都写最新的文章并及时发布了。但是在每台电脑上，开始写博客之前，最好都使用git pull origin hexo从GitHub中把最新的部署文件获取下来。</p></li></ol><h2 id="主要参考"><a href="#主要参考" class="headerlink" title="主要参考"></a>主要参考</h2><blockquote><p><a href="https://www.jianshu.com/p/0b1fccce74e0" target="_blank" rel="noopener">利用Hexo在多台电脑上提交和更新github pages博客 -简书</a><br><a href="https://blog.csdn.net/monkey_lzl/article/details/60870891" target="_blank" rel="noopener">如何解决github+Hexo的博客多终端同步问题 - monkey_lzl的博客 -CSDN博客</a></p></blockquote><p>然后，在新电脑上需要重新安装git、node.js、Hexo环境、以及生成SSH添加到GitHub，这些设置参考下面文章的相应内容即可：</p><blockquote><p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029" target="_blank" rel="noopener">hexo史上最全搭建教程 - Fangzh的技术博客 - CSDN博客</a><br><a href="https://help.github.com/cn/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent" target="_blank" rel="noopener">生成新 SSH 密钥并添加到 ssh-agent - GitHub 帮助</a></p></blockquote><h2 id="遇到的一些问题"><a href="#遇到的一些问题" class="headerlink" title="遇到的一些问题"></a>遇到的一些问题</h2><ol><li><a href="https://blog.csdn.net/comeonbabe_/article/details/80244854" target="_blank" rel="noopener">github连接远程仓库时出现Warning: Permanently added the RSA host key for IP address <strong><strong>***</strong></strong> …… - comeonbabe_的博客 - CSDN博客</a> </li><li><a href="https://www.cnblogs.com/lovebing/p/7121754.html" target="_blank" rel="noopener">Git提交时提示‘The file will have its original line endings in your working directory’ - 刘俊涛的博客 - 博客园</a>  </li><li><a href="https://blog.csdn.net/top_code/article/details/50381432" target="_blank" rel="noopener">Git 提示fatal: remote origin already exists错误解决办法 - Ricky - CSDN博客</a>  </li><li>在gitBash中，复制粘贴的快捷键不是CtrlC/V </li><li><a href="https://blog.csdn.net/yemoweiliang/article/details/52980658" target="_blank" rel="noopener">git push 失败出现error: src refspec master does not match any.解决方案 - 青阳十五的专栏 -CSDN博客</a>  </li><li><a href="https://stackoverflow.com/questions/23957836/git-error-error-src-refspec-master-does-not-match-any" target="_blank" rel="noopener">git error - “error: src refspec master does not match any.” -Stack Overflow</a>  </li><li><a href="https://blog.csdn.net/csdn799316120/article/details/79565579" target="_blank" rel="noopener">warning: LF will be replaced by CRLF in 解决办法 -csdn799316120的博客 - CSDN博客</a>  </li><li><a href="https://blog.csdn.net/Amos_luoye/article/details/88292438" target="_blank" rel="noopener">git commit之后进入vim（vi）界面，如何退出 -Amos_luoye的博客 - CSDN博客</a>  </li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下实现多终端同步Hexo博客的一些操作，学习的过程中意外学习了一些git的基本操作，并记录在另外一篇博文中。&lt;/p&gt;
&lt;h2 id=&quot;整体思路&quot;&gt;&lt;a href=&quot;#整体思路&quot; class=&quot;headerlink&quot; title=&quot;整体思路&quot;&gt;&lt;/a&gt;整体思路&lt;/h2&gt;&lt;p&gt;根据下面总结的思路配合上面的提到的参考文章，相信如果下次还需要进行这样的操作，也会很快就熟悉了。&lt;br&gt;&lt;strong&gt;首先需要知道Hexo在本地和在GitHub上的文件是两个不同的东西。本地的主要是部署文件包括了自己写的所有文章的MarkDown文件，主题文件等等；上传到GitHub中的文件是部署文件渲染过后的文件，我们最终访问GitHubName.github.io看到的个人站点其实就是这些保存在GitHub中渲染过的东西。想要实现多端同步，关键点是让多台电脑上都有最新的部署文件，也就是那个本地文件，因此我们可以利用git实现这一需求。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="学习工具" scheme="http://ch206265.github.io/categories/%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="http://ch206265.github.io/tags/git/"/>
    
      <category term="hexo" scheme="http://ch206265.github.io/tags/hexo/"/>
    
      <category term="建站笔记" scheme="http://ch206265.github.io/tags/%E5%BB%BA%E7%AB%99%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>总结-周志华教授如何做研究与写论文</title>
    <link href="http://ch206265.github.io/2019/11/09/writing-skills-of-zhou/"/>
    <id>http://ch206265.github.io/2019/11/09/writing-skills-of-zhou/</id>
    <published>2019-11-08T17:13:54.000Z</published>
    <updated>2019-12-16T14:53:43.415Z</updated>
    
    <content type="html"><![CDATA[<p>本文由两部分组成，一是对《周志华教授如何做研究与写论文》的总结，二是分享一下彭明辉教授阅读文献方法的流程图。</p><p>首先认识什么是研究，研究和研发的区别，其次，做研究，先有<strong>话题</strong>，再有<strong>问题</strong>，然后有如何解决问题的<strong>想法</strong>，最后进行坚实、具体的工作让想法变为现实，写论文就是把这个过程用文字总结一下。</p><p><strong>核心思路：Topic-Problem-Idea-Concrete work</strong><a id="more"></a></p><h2 id="如何找话题：Topic"><a href="#如何找话题：Topic" class="headerlink" title="如何找话题：Topic"></a>如何找话题：<strong>Topic</strong></h2><p>一级学科划定的研究范围是非广袤，先要进入一个具体的分支学课和领域，并获得必要的了解，即使在一个分支学科和领域中，也有太多的话题</p><p>(1)通常老师给你一个topic/然后阅读关于该话题的重要文献，了解该话题的研究历程/研究现状</p><p>(2)需要自己找Topic时：找人请教以及自力更生。自力更生时注意要搞清楚自己的领域里最重要的刊物/会议，找来那上面在最近几年的文章，进行阅读，目的时为了知道有哪些topic，读摘要就可以了，可能会花费很多时间</p><p>(3)如何选择最适合自己的topic：首先是要自己感兴趣，然后结合自身是否有这方面的知识积累，以及能否获得例如实验数据这样的必要资源</p><h2 id="如何产生问题：Problem"><a href="#如何产生问题：Problem" class="headerlink" title="如何产生问题：Problem"></a>如何产生问题：<strong>Problem</strong></h2><p>“问题”是科学研究的心脏</p><p>(1)导师给你一个问题</p><p>(2)自己产生问题，导师帮你判断。有了问题之后，要搞清楚该问题上已经有过的所有工作，优点是什么，缺点是什么，为什么没有彻底解决问题？自己尝试总结出已有工作的发展线索。</p><p>(3)完全自立更生。读发表在重要刊物和会议上的有关自己选定话题的文献，多读一些文献，了解一下有哪些问题是没有解决的，并且关注这个topic上活跃的leading expert的工作、他们的文章中可能会指出一些需要解决的重要问题。宜“小题大做”，忌“大题小做”。对于这个找问题的的过程，是对研究能力极大的锻炼，可能会走很多弯路，有可能一无所成，但是也有可能练就一身硬功夫。</p><h2 id="如何产生解决问题的新想法：Idea"><a href="#如何产生解决问题的新想法：Idea" class="headerlink" title="如何产生解决问题的新想法：Idea"></a>如何产生解决问题的新想法：<strong>Idea</strong></h2><p>idea是要自己产生的，但是和老师讨论和判断idea是必要的。</p><p>(1)思考它是不是一个新的idea，是不是合理，是不是有更好的解决办法</p><h2 id="剩下的就是concrete-work"><a href="#剩下的就是concrete-work" class="headerlink" title="剩下的就是concrete work"></a>剩下的就是<strong>concrete work</strong></h2><p>concrete work不是孤军奋战，遇到不会的，除了自己学习之外，一定要学会与人合作</p><p>(1)理论分析，数学功底</p><p>(2)试验验证，实验设计能力</p><img src="https://raw.githubusercontent.com/ch206265/BlogPictures/master/20191109012112.png" alt="彭明辉教授文献阅读流程图" width="67%;" />]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文由两部分组成，一是对《周志华教授如何做研究与写论文》的总结，二是分享一下彭明辉教授阅读文献方法的流程图。&lt;/p&gt;
&lt;p&gt;首先认识什么是研究，研究和研发的区别，其次，做研究，先有&lt;strong&gt;话题&lt;/strong&gt;，再有&lt;strong&gt;问题&lt;/strong&gt;，然后有如何解决问题的&lt;strong&gt;想法&lt;/strong&gt;，最后进行坚实、具体的工作让想法变为现实，写论文就是把这个过程用文字总结一下。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;核心思路：Topic-Problem-Idea-Concrete work&lt;/strong&gt;
    
    </summary>
    
      <category term="生活随笔" scheme="http://ch206265.github.io/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="学习方法" scheme="http://ch206265.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>hexo笔记</title>
    <link href="http://ch206265.github.io/2019/11/09/preliminary-note-of-hexo/"/>
    <id>http://ch206265.github.io/2019/11/09/preliminary-note-of-hexo/</id>
    <published>2019-11-08T16:56:24.000Z</published>
    <updated>2019-12-16T15:05:11.144Z</updated>
    
    <content type="html"><![CDATA[<p>关于hexo博客的搭建之前参考了很多优秀的博文，当时按照文中的指导大多数想要的功能都可以实现，但是功能以实现我懒癌就犯，时间一久，就不知道当初是怎么操作的了，还得从头搜索。这里先把他们罗列出来，有机会的话再对其进行一些总结。</p><a id="more"></a><h2 id="hexo-github搭建个人博客-超详细教程"><a href="#hexo-github搭建个人博客-超详细教程" class="headerlink" title="hexo+github搭建个人博客(超详细教程)"></a><a href="https://blog.csdn.net/AinUser/article/details/77609180" target="_blank" rel="noopener">hexo+github搭建个人博客(超详细教程)</a></h2><p>主要参照这篇博文下载安装了git、node.js以及使用git初次安装hexo</p><h2 id="hexo史上最全搭建教程"><a href="#hexo史上最全搭建教程" class="headerlink" title="hexo史上最全搭建教程"></a><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029" target="_blank" rel="noopener">hexo史上最全搭建教程</a></h2><p>这篇文章从三个方面介绍怎么基于GitHub搭建hexo博客我也对应进行了一些操作。</p><h3 id="第一部分：hexo的初级搭建还有部署到github-page上，以及个人域名的绑定"><a href="#第一部分：hexo的初级搭建还有部署到github-page上，以及个人域名的绑定" class="headerlink" title="第一部分：hexo的初级搭建还有部署到github page上，以及个人域名的绑定"></a>第一部分：hexo的初级搭建还有部署到github page上，以及个人域名的绑定</h3><p>按照上篇文章安装好git、node.js、hexo后可以参考这篇文章接着，</p><ol><li><p>GitHub上建立存储博客的个人仓库</p></li><li><p>生成SSH添加到GitHub上</p></li><li><p>将hexo部署到GitHub上，但是后面的个人域名绑定没有做；</p></li></ol><h3 id="第二部分：hexo的基本配置，更换主题，实现多终端工作，以及在coding-page部署实现国内外分流"><a href="#第二部分：hexo的基本配置，更换主题，实现多终端工作，以及在coding-page部署实现国内外分流" class="headerlink" title="第二部分：hexo的基本配置，更换主题，实现多终端工作，以及在coding page部署实现国内外分流"></a>第二部分：hexo的基本配置，更换主题，实现多终端工作，以及在coding page部署实现国内外分流</h3><ol><li>首先，hexo的基本配置<ul><li>介绍了文件根目录下的<em>config.yml文件；</em></li><li><em>front-matter则是设置markdown博客文件开头，采用统一的yaml格式，用三条短横线分隔，就是用</em> _ <em>把它与博客正文分开的那部分，主要是设置文章属性，比如标题title、创建日期date、修改日期updated、标签tags、分类categories、是否开启评论comments等等基本信息(它其实有模板，每次新创建文章是可以自动生成这个文章开头的属性设置，新建文档的头部的模板：scaffold文件夹下的post.md，在这里面修改一下，以后新建的博客文档头部都会是这个样式)</em></li><li>_layout，是hexo的布局设置，三种默认布局：post、page、draft，对应的文件夹是source/_posts、source、source/_drafts</li></ul></li></ol><blockquote><p>我们平时创建新文章使用的<code>hexo new filename</code> 完整版其实应该是<code>hexo new post filename</code>只不过hexo默认的layout布局是post而已</p></blockquote><blockquote><p>创建草稿的话可以用这个命令<code>hexo new draft filename</code>草稿写完了发布草稿的时候可以<code>hexo publish draft filename</code></p></blockquote><ol start="2"><li>其次，更换主题<ul><li>GitHub上下载主题；</li><li>下载的主题放在根目录的theme文件夹下</li><li>在根目录的配置文件<em>config.yml中找到theme关键字的设置，把它改成新添加的主题的名字</em></li><li>_然后每个主题里面也有自己主题的一些配置设置，也在_config.yml文件中，但是这个文件是在主题文件夹目录下面的，和之前的那个在根目录下的还不一样</li></ul></li></ol><blockquote><p>除了更换主题外，这篇文章在这一部分还介绍了，在菜单栏新增菜单选项、添加RSS订阅等。<strong>最后，git分支进行多终端工作以及在coding page上部署实现国内外分流</strong>，但是这两部分没有参照这篇文章</p></blockquote><h3 id="第三部分：hexo添加各种功能，包括："><a href="#第三部分：hexo添加各种功能，包括：" class="headerlink" title="第三部分：hexo添加各种功能，包括："></a>第三部分：hexo添加各种功能，包括：</h3><ol><li><p>百度搜索和Google搜索的SEO；<a href="http://visugar.com/2017/08/01/20170801HexoPlugins/" target="_blank" rel="noopener">参考1</a>；<a href="https://www.jianshu.com/p/9be9b4786f97" target="_blank" rel="noopener">参考2</a>；<a href="https://www.cnblogs.com/coderzhw/p/11109333.html" target="_blank" rel="noopener">参考3</a></p></li><li><p>评论系统，只是介绍了一下，来比力，valine，等，但是我最后用的评论系统是<a href="https://blog.csdn.net/madridcrls7/article/details/80871596" target="_blank" rel="noopener">git talk</a></p></li><li><p>添加百度统计</p></li><li><p>文章阅读量统计，leanCloud</p></li><li><p>引入不蒜子访问量和访问人次统计</p></li></ol><p><img src="https://raw.githubusercontent.com/ch206265/BlogPictures/master/20191109010522.png" alt="百度资源站的链接提交"></p><p>这里有一个百度资源站的链接提交，这个和站点的SEO好事有区别的，这个相当于是可以直接提交博文的网址链接。可以直接点击菜单栏右侧的“用户中心”，在那里面会出现</p><p><img src="https://raw.githubusercontent.com/ch206265/BlogPictures/master/20191109010532.png" alt="百度收录"></p><p>（<a href="https://ziyuan.baidu.com/site/siteadd" target="_blank" rel="noopener">百度搜索资源平台</a>）然后按照前面的两篇关于网站SEO的文章进行优化即可。需要注意的是Github禁掉了百度的爬虫，使用GitHub建立的博客无法被百度收录，所以在进行验证的时候验证不成功。</p><p><img src="https://raw.githubusercontent.com/ch206265/BlogPictures/master/20191109010722.png" alt="验证失败"></p><p>貌似想要被收录可用用CDN，让百度蜘蛛从CDN的网址爬取博文；再或者就是双写，在其他博客平台上发布相同的文章，然后给出GitHub博客的链接。</p><p>剩下的文章仅供参考，拓宽思路，仅供参考：</p><blockquote><ul><li><a href="https://blog.csdn.net/meifannao789456/article/details/81673816" target="_blank" rel="noopener">Hexo even主题博客配置</a> </li></ul><blockquote><p>可能比较有用的就是介绍了一下hexo的文件结构以及各个主题文件的文件结构</p></blockquote><ul><li><p><a href="https://blog.csdn.net/weixin_40837922/article/details/88047241" target="_blank" rel="noopener">给hexo主题添加背景及更改字体颜色（next的Mist主题）</a></p></li><li><p><a href="https://blog.csdn.net/qq_25560423/article/details/53785411" target="_blank" rel="noopener">hexo 新建一篇文章给它添加分类和标签</a></p></li><li><p><a href="https://blog.csdn.net/weixin_44539392/article/details/86621999" target="_blank" rel="noopener">hexo添加新菜单</a></p></li></ul><blockquote><p> 新建文档的头部的模板：scaffold文件夹下的post.md，在这里面修改一下，以后新建的博客文档头部都会是这个样式</p></blockquote><ul><li><a href="https://blog.csdn.net/Wonz5130/article/details/84666519" target="_blank" rel="noopener">解决 Hexo 搭建博客显示不出分类、标签问题</a></li><li><a href="https://blog.csdn.net/kunkun5love/article/details/79130956" target="_blank" rel="noopener">文章的输入密码访问设置</a></li><li><a href="https://blog.csdn.net/yexiaohhjk/article/details/82526604" target="_blank" rel="noopener">hexo next主题解决无法显示数学公式</a></li><li><a href="https://blog.csdn.net/wizardforcel/article/details/40684575" target="_blank" rel="noopener">Hexo 入门指南（三） - 文章 &amp; 草稿</a></li></ul><blockquote><p>主要是讲解了文章的title、date、tags、categories等基本属性设置，摘要设置<code>&lt;!--more--&gt;</code>以及草稿设置</p></blockquote><ul><li><p><a href="https://blog.csdn.net/qq_21808961/article/details/84475555" target="_blank" rel="noopener">Hexo 解决网站名中文乱码</a></p></li><li><p><a href="https://blog.csdn.net/wugenqiang/article/details/88609066" target="_blank" rel="noopener">Hexo博客NexT主题开启文章目录和调整样式</a></p></li><li><p><a href="https://blog.csdn.net/kobe24lmlps/article/details/80838329" target="_blank" rel="noopener">使用github OAuth实现用户登录</a></p></li><li><p><a href="https://blog.csdn.net/qq_33699981/article/details/72716951" target="_blank" rel="noopener">hexo的next主题个性化教程：打造炫酷网站</a></p></li></ul></blockquote><p>关于最开始探索建站的记录基本到这里也就结束了，但是，在这个过程中，也见识了一些十分优秀的个人站点，有的是界面设计的超级漂亮，有的是博客的内容十分吸引人。此外，在这些优秀的个人站中，博主们也会分享一些他们自己的建站经验，也是很好的学习素材。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于hexo博客的搭建之前参考了很多优秀的博文，当时按照文中的指导大多数想要的功能都可以实现，但是功能以实现我懒癌就犯，时间一久，就不知道当初是怎么操作的了，还得从头搜索。这里先把他们罗列出来，有机会的话再对其进行一些总结。&lt;/p&gt;
    
    </summary>
    
      <category term="学习工具" scheme="http://ch206265.github.io/categories/%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="hexo" scheme="http://ch206265.github.io/tags/hexo/"/>
    
      <category term="建站笔记" scheme="http://ch206265.github.io/tags/%E5%BB%BA%E7%AB%99%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>周总结（2019/10/28）</title>
    <link href="http://ch206265.github.io/2019/11/02/%E5%91%A8%E6%80%BB%E7%BB%93%EF%BC%882019-10-28%EF%BC%89/"/>
    <id>http://ch206265.github.io/2019/11/02/周总结（2019-10-28）/</id>
    <published>2019-11-02T06:56:42.000Z</published>
    <updated>2019-11-25T16:30:22.841Z</updated>
    
    <content type="html"><![CDATA[<p>虽然在博客上很久没有写这个总结了，但在我平时工作学习中，脑海偶尔灵光一现的时候，我还是会把想要所说的话进行简单记录的。这次主要想总结4件事情，以后要注意改正。</p><h2 id="流于形式的打招呼方式"><a href="#流于形式的打招呼方式" class="headerlink" title="流于形式的打招呼方式"></a>流于形式的打招呼方式</h2><p>首先，我发现，自己打招呼的方式有点流于形式。<a id="more"></a></p><p>如果是刚认识还好，但一直都是，见面抬手然后“嗨”一声，没了下文，久而久之这样很尴尬，但是在这种尴尬的背后其实有更尴尬的事实——无话可说。关于无话可说，之前我反思过，然而这次的无话可说基本就是真的无话可说，但一直用这种流于形式的打招呼方式所展现出来的并不是自己的热情，反而是冷漠，这样久而久之又真的会使彼此之间产生一层隔阂，和自己的初衷完全不同。</p><p>真正的交谈应该是走心的，而走心就是要走进生活，无论是工作还是业余，都是生活。</p><h2 id="陌生地点干之前从来没干过的公差"><a href="#陌生地点干之前从来没干过的公差" class="headerlink" title="陌生地点干之前从来没干过的公差"></a>陌生地点干之前从来没干过的公差</h2><p>第二件事，到车站接专家。</p><p>之前对车站真的是了解很少，又是大车站，也没有接站的经历。实话实说，我自己去过好多次的火车站，关于出口，我自己都是没有太留心，基本上都是看着指引牌，一路走下来，真的是什么都没有记住。不过好在我是提前去了，在途中问了出租车师傅出站口的情况以及同学他们平时在车站叫滴滴的话在哪个出口比较方便。他们的建议对这次接站真的帮了很大的忙。除了自己搞清楚出站口情况，还有其他的一些细节需要注意。比如专家乘车的班次快要抵达前要提前打电话告知自己在哪个出站口等着他，顺便再确认一下他乘车的班次（或者抵达时间）。再其次，在接站过程中有个小瑕疵，看到接站的班次已经到站了之后，就要认真在出站口等待了，不要被其他事情吸引注意力错过了要接的人。这次接站，刚好在专家出站的这个时段，旁边的旅客有些事情在和出站检票口的工作人员交涉，我就好奇的关注了下他们的谈话，最后专家走到我的跟前问是不是接他的，好尴尬，下次需要注意。最后，一定要问对方的全名，不要只是姓氏，虽然这种接错人的概率很小，但是还是小心为好。</p><h2 id="干公差对于时间上的把握"><a href="#干公差对于时间上的把握" class="headerlink" title="干公差对于时间上的把握"></a>干公差对于时间上的把握</h2><p>第三件事，感觉在机关里面办公务事，有点纠结。</p><p>如果你办事比较积极，结果程序流程啥的都是错的，有时候就连通知的人都不清楚具体怎么操作，白费功夫；如果你干事不是很积极，那么，说不定以前正常的流程现在就又变了，所有手续材料还得重新整理，还是白费功夫。所以呀，在这种情况下，还是要擦亮眼睛，判断好事情的轻重缓急，以及难易程度，有时候不是很复杂的事情，比较轻易就能完成的活，就不要再拖了，别让政策有变之时，一切再从头整理。</p><h2 id="归根结底还是脸皮薄"><a href="#归根结底还是脸皮薄" class="headerlink" title="归根结底还是脸皮薄"></a>归根结底还是脸皮薄</h2><p>第四件事情，就是公共场所打电话。</p><p>我目前为止大多数接打电话都是出去在走廊或者人少的地方，除非要边打电话听着对方的指导边操作电脑。但是呢，身边也有好多人，接打电话就直接在机房进行了，并且声音很大，当然，基本都是公务，不可能是私人电话。有时候听着他们在公务上和他人打电话，感觉他们外联公关能力挺强的。对比一下自己，感觉可能自己有点极端了，大所有电话都是想要找到一个没有人的地方，充满了浓烈的不自信？感觉除了私人电话外，有时候在公共场所还是可以因公打或接电话的。但是怎么说呢，总归我还是感觉这主要得看周围人的反应，或者实验室的氛围和风气了，这种公共场所可以打电话的并非绝对。（ 2019/10/28 16:07 ）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然在博客上很久没有写这个总结了，但在我平时工作学习中，脑海偶尔灵光一现的时候，我还是会把想要所说的话进行简单记录的。这次主要想总结4件事情，以后要注意改正。&lt;/p&gt;
&lt;h2 id=&quot;流于形式的打招呼方式&quot;&gt;&lt;a href=&quot;#流于形式的打招呼方式&quot; class=&quot;headerlink&quot; title=&quot;流于形式的打招呼方式&quot;&gt;&lt;/a&gt;流于形式的打招呼方式&lt;/h2&gt;&lt;p&gt;首先，我发现，自己打招呼的方式有点流于形式。
    
    </summary>
    
      <category term="生活随笔" scheme="http://ch206265.github.io/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="总结" scheme="http://ch206265.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>生活需要平衡</title>
    <link href="http://ch206265.github.io/2019/10/08/%E7%94%9F%E6%B4%BB/"/>
    <id>http://ch206265.github.io/2019/10/08/生活/</id>
    <published>2019-10-08T04:22:52.000Z</published>
    <updated>2019-11-25T16:28:53.768Z</updated>
    
    <content type="html"><![CDATA[<p>关心自己的人一直在关心自己，而我大概却只是把这种关心当成了生活中普普通通的东西，没有好好珍惜。最大的表现就是没有把这些关心听到心里去。父母经常告诉我不要熬夜，那我是否听父母的话呢，好像没有，基本每天都在熬夜，很久都没有早早睡觉的习惯了。<a id="more"></a><br>那种基本11点之前就睡觉的感觉貌似高中之后就没有了。小学时候在家中，作息和家里人一致，完成每天的作业之后还能和家人在电视前追剧，这是在我记忆中家庭场景印象比较深的时刻。说起这个，每次能回想起来发生场景是在家的趣事，基本都是一些小时候记忆。其实想一想，自小学之后，自己呆在家中的时间越来越少，而家人一起参加的活动除了晚饭基本再没有其他，我们的生活都被某种因素禁锢或分割，感觉这很是问题，也是我一直想要改变的。其实这种禁锢就是谋生，不单单我们家这样，很多家庭也都是这样。<br>父母做小生意整日奔波，虽然自己就是自己的老板，但是没有见他们给自己放过假。爷爷奶奶也是这样，虽然老人们相继生了大病，以前的工作以现在的身体条件实在无法为继，但也没有完全偃旗息鼓。我和姐姐，小学时候还对成绩没有太大概念，只知道期末成绩考的好的话会收获到亲人的表扬，上初中时有了成绩的排名，从那时起，看着比较靠前的名次，我们的精力自然很少从学习中分离。就这样，大家的生活都有了谋生的方向。<br>社会中每个人的谋生都是不易的，少不了背井离乡，岁月静好的背后是有人在负重前行。但是呢，为了谋生，我们不应该牺牲现在的幸福，就像《瓦尔登湖》中梭罗说的那样，“把大半生的时光花费在挣钱上，目的是期望在一生中最没有价值的一段时光里享受到很成问题的自由。这种情形使我想起那个英国人，开头时跑到印度去发财，希图将来返回英国时可以过着诗人般的生活。其实他应该立刻爬上阁楼去。”幸福的生活也不应该被谋生作为借口而不断侵蚀。不要希冀等一切准备好了才可以，不同的阶段都会有令你烦恼和疲于应对的事情，这样，真正重要的东西只会被一拖再拖，酿成遗憾，况且自己真正准备好了的时刻或许永远不会到来。（ 2019/10/07 15:47 ）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关心自己的人一直在关心自己，而我大概却只是把这种关心当成了生活中普普通通的东西，没有好好珍惜。最大的表现就是没有把这些关心听到心里去。父母经常告诉我不要熬夜，那我是否听父母的话呢，好像没有，基本每天都在熬夜，很久都没有早早睡觉的习惯了。
    
    </summary>
    
      <category term="生活随笔" scheme="http://ch206265.github.io/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="反思" scheme="http://ch206265.github.io/tags/%E5%8F%8D%E6%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>周总结（2019-09-07）</title>
    <link href="http://ch206265.github.io/2019/09/14/%E5%91%A8%E6%80%BB%E7%BB%93%EF%BC%882019-09-07%EF%BC%89/"/>
    <id>http://ch206265.github.io/2019/09/14/周总结（2019-09-07）/</id>
    <published>2019-09-14T13:52:40.000Z</published>
    <updated>2019-11-30T08:05:15.661Z</updated>
    
    <content type="html"><![CDATA[<p>这个周总结的草稿在一周之前就创建了，当时也有一些想要总结的东西，但只是简单的在纸上记录了一下，准备在周末的时候完善，没想到被拖了又一周，现在的周总结变成了半月谈……<a id="more"></a></p><h2 id="不要把简单的事情复杂化"><a href="#不要把简单的事情复杂化" class="headerlink" title="不要把简单的事情复杂化"></a>不要把简单的事情复杂化</h2><p>上个星期或者是上两个星期，总体来说还可以，主要是在完成老师布置的任务以及自己的学习之间两方面度过的，偶尔会又出公差，但是也还好。在这过程中，有一些小事，总是断断续续，不能直接了当地完成，牵扯了我比较多的精力。为什么会断断续续呢，有以下几种情况：</p><ol><li><p>事情本身就是要走流程，这个进程不是我能控制的，在走的每个阶段流程中，进行地还算顺利。这类事其实不牵扯太多精力，只需要准备好要提交地材料，然后等。</p></li><li><p>在办事的过程中，发现了一些小纰漏，然后要修改它们，比较麻烦。这时候，要怎么样修改，我会犹豫不决，简单一点的改法——“这样行不行啊？”；万无一失的改法——“这样好麻烦，还得再找一遍领导签字”，其实倒不是怕自己麻烦，只是还得再麻烦领导……文字写下来之后，感觉是自己想多了……不过，趁早下定决心，确定如何处理问题，比犹犹豫豫半天还不确定更好，尤其是在不是什么特别特别重要的大事面前。想的太多，犹豫不决，不仅给自己徒增思想负担，也耽误其他人的事情。有时候，没有那么多时间来等巧妙的时机以促成最佳解决方案并做出抉择，只需要现在就行动起来，去解决它，不要一直陷入思考和抉择的煎熬当中。</p></li><li><p>要和他人商议解决事情的时候。此时，我比较犹豫，没有一个果断的处理办法（还是没有上心，没积极地去解决，而因此导致枝节横生）。如过自己真的不方便，那就采用别人的方案，不要再提自己的搞乱别人了，积极配合就行了。要是真的想自己提出办法解决，那就积极用心一点。</p><p>关于这一点，可以用下面的话提醒自己一番，虽然有点鸡汤：</p><blockquote><p>什么是悟性？什么是智慧？悟性和智慧就是用最简单的方法来处理、看待切事物。但一些庸人自扰的人总是把简单的事情看复杂了、做复杂了。繁和简其实是一回事，是一回事的两个方面。聪明的人看到的是简单的一面，愚蠢的人看到的是复杂的一面。</p><p>所谓看开人生，绝不是悲观，而是积极乐观；不是看破，而是看透；并非什么都不做，而是及时做。</p></blockquote><p>总是想的太多，顾虑太多，真有些庸人自扰的感觉。</p></li></ol><h2 id="交谈要突出重点"><a href="#交谈要突出重点" class="headerlink" title="交谈要突出重点"></a>交谈要突出重点</h2><p>上次总结说到传话时候的注意事项，其实委托他人帮忙时，也要what,when,where,who,how，交代清楚，以免出现纰漏。</p><p>平时和他人交谈时，要注意场合，该简短时简短，务必突出<strong>重点</strong>，不要前面像讲故事一样说了一堆，最后才蹦出了大家关注的东西，更尴尬的是，前面的一堆和结论的<strong>逻辑</strong>链接貌似还有问题。</p><p>该娓娓道来时，就做好铺垫。除非是坐下来，两个人面对面深入交谈，即使平时随意侃，也尽量避免这样。就像走路聊天，要简短一点，这时候大家基本没有那么多耐心听你的铺垫。碎片化的时间里进行的交谈，就是要突出重点，不然也不会催生那么多的标题党文章。</p><p>其次，要让别人听清楚自己说的话，说话声音大一些，不然容易引起误解。</p><h2 id="对汇报的内容要负责"><a href="#对汇报的内容要负责" class="headerlink" title="对汇报的内容要负责"></a>对汇报的内容要负责</h2><p>做汇报的时候，细枝末节尽量少讲，要突出亮点，上干货。当然，比较尴尬的是干货比较少，或没有干货。这时候还必须要汇报，那就讲概念讲思想讲理解，这就比较考验思考的深度了。思考的结果其实也是干货。</p><p>还有，做汇报的时候，自己要对PPT上所展示的每一张图片，每一句话负责。图不能乱引用，对于没有深刻理解的话也不要乱引用。如果对自己做的东西还不甚了解，面对他人的质疑和询问，自己还不能给出很好的解释，那只能说明没认真做或者做的还远远不够。</p><p>总之，汇报时，要对自己讲的每一句，每一个插图负责，都要能经得起深究。</p><h2 id="做好阶段工作成果的整理"><a href="#做好阶段工作成果的整理" class="headerlink" title="做好阶段工作成果的整理"></a>做好阶段工作成果的整理</h2><p>有时候，时间很紧迫，各种过程材料啊，原始或者中间数据啊，以及最后成果啊，都是七零八落地散在电脑中。但是自己抓紧时间完成任务之后，就选择了放松，没有对完成这些任务产生地零碎地东西进行整理，带到下次利用或修改，或者换电脑，或者给他人分享之时，很是头疼。</p><p>所以，完成任务后，先打扫一下战场，做下阶段成果的总结，在好好休息~</p><h2 id="任务协调分配的能力"><a href="#任务协调分配的能力" class="headerlink" title="任务协调分配的能力"></a>任务协调分配的能力</h2><p>自己的团队领导能力还是太欠缺。可能习惯了经常性的一个人埋头苦干，也没有想过，如果让自己负责一件事情时，该怎么用好身边的帮手们。</p><p>应该努力的调整一下，不要总是单干，以后只会有越来越多任务量繁重的事情，不可能自己一个人干下去，也不要总是习惯于他人给自己分配好工作。</p><p>平时，自己干一件事情的时候，总是眼前看到了什么活儿，就去做就去干好什么活儿。一件事情，我很少一次性把他干完的打算和决心，往往是慢慢悠悠一点一点干完。（其实有些事情还是及时完成要好，不要一直分成好几步去做，这样就会一直拖着，横生好多枝节，错过好多机会。其实有时候一直拖着，是有些对明天的顾虑，怎么说呢，都是有利有弊……但是至少，可以先把不影响下一步推进的工作做完）</p><p>团队协作的话也更偏重于效率，大家聚在一起，分配好任务，短时间内快速完成。这就需要很明确的任务分配，而想要做好任务分配，首先自己要对完成任务有一个总体的认识，有一个清晰的路线。任务在描述上还不能太复杂，尤其是几个人通过网络合作，没有当面沟通交流时。所以，前期自己要把琐碎的东西给梳理通了，把简单好操作的任务分配下去。</p><p>所以，面对任务分配，我需要加强的有一下两点：</p><ol><li>分配任务前，<strong>做好梳理准备工作</strong>。其实很多次不能果断地进行任务分配都可以归结为前期地准备工作没有做好，以至于分配任务时，分配不明确，不果决，或者总是有很多顾虑。这点也很好理解，因为并不是所有东西都可以分的，往往是进行到后期，更好分配一点，前期的东西比较琐碎，还需自己要提前处理好，以方便后期有整块的任务分给其他人做。</li><li>如果没有很多时间让自己做梳理，做准备，那么交代他人的任务就要尽可能<strong>明确</strong>和<strong>易操作</strong>，不要再额外牵涉很多其他东西。</li></ol><h2 id="越熟悉的人越无话题可说"><a href="#越熟悉的人越无话题可说" class="headerlink" title="越熟悉的人越无话题可说"></a>越熟悉的人越无话题可说</h2><p>之前就发现了这个发生在我身上的尴尬现象。往往初次见面的时候可能还说的比较多，但是熟悉了以后，貌似可说的话题就变得很少了，或者话题只是局限于学习和工作。</p><p>之前分析的原因是，其他方面的知识涉猎的太少，或者，生活中除了正常的工作状态，基本没有其他业余爱好。这样，我和他人之间自然就缺少了很多可以交流的话题。</p><p>发现了问题所在，我似乎并没有认真去解决它。首先我的很多时间用在了刷手机上也并没有加大图书阅读量，其次，几次朋友叫我跑步去我也没有去😓……真是一边感慨着自己某方面的不足，还一边无动于衷……</p><h2 id="计划："><a href="#计划：" class="headerlink" title="计划："></a>计划：</h2><ol><li>还是要多喝水。</li><li>第二天的工作状态要有保证。</li><li>挤出来的时间，就要多做些对自己将来有增益，能回味的事情，比如学习积极性不高的时候，多些团建少些无意义的消磨，回寝室后多读书，少刷手机（突然发现kindle有买4年了，但是在上面读完的书好像不超过3本😓）</li><li>努力做到不纠结，果断一点，知道自己现在在干什么，下一步要干什么，就像博客的主题一样，清醒地活着。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个周总结的草稿在一周之前就创建了，当时也有一些想要总结的东西，但只是简单的在纸上记录了一下，准备在周末的时候完善，没想到被拖了又一周，现在的周总结变成了半月谈……
    
    </summary>
    
      <category term="生活随笔" scheme="http://ch206265.github.io/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="反思" scheme="http://ch206265.github.io/tags/%E5%8F%8D%E6%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>周总结（2019-08-30）</title>
    <link href="http://ch206265.github.io/2019/08/30/%E5%91%A8%E6%80%BB%E7%BB%93%EF%BC%882019-08-30%EF%BC%89/"/>
    <id>http://ch206265.github.io/2019/08/30/周总结（2019-08-30）/</id>
    <published>2019-08-30T08:55:03.000Z</published>
    <updated>2019-11-25T16:29:59.993Z</updated>
    
    <content type="html"><![CDATA[<p>距离上次写周总结有一段时间了，想总结的东西也还挺多。</p><p>总结：</p><p>第一，感觉自己办公差的能力比较差。最集中表现在两方面，问话和回话。回话回不好其实还是问话的问题。</p><p>关于问话，我感觉问题可以归结为：如何在对背景不甚了解的情况下问话成功？其实在问话过程中，我最大的问题体现在不会反问，脑子不会转弯，直来直去的，总是习惯于接受，别人说什么就是什么，主动权永远在对方那里。<a id="more"></a>今天去财务咨询一件事情，前前后后跑好多趟，总是get不到重点，总是问完之后自己梳理时发现还是有问题。怎么办呢，只有再回去问了，前前后后好多次，自己都不好意思了，被询问的人那边肯定也烦。之所以前前后后询问好多次就是因为没把问题当面搞明白，对于蹦出来的那些意外情况，总是抓不住其关键反问回去。</p><p>每次我遇到这种情况，都感觉自己的脑袋像木头疙瘩一样，其实随着年龄的增大，也真的感觉自己越来越缺少灵性。小时候那么调皮捣蛋，现在怎么就变成这样了呢？这或许和我在大学养成的一个习惯有关。大学里，学习新东西，相对于理解的过程，我总是在怎么“记住”他们方面花费很多精力，仿佛，这些东西记在我脑子里了就是我的了，我就会用了一般。当然，输入的过程也有思考，但是思考的很浅，甚至有些思考是为了更好的记住它们。搁在大学时期，或许这些东西记在脑子里了，就可以对付考试了，考试时，只需要从脑子里面取出记住的东西就可以了，严重缺少思考的过程。长期这样，自己的大脑似乎就很适应这种简单的条件反射（这应该就是典型的死读书吧）。最深受其害的一点体会就是考研数学……当年的经历，我只能说，我从来没有在考场上这么蒙蔽过。</p><p>但是现在，没有考试了，一切都是实战。当时在时间不自由、资源、工具稀缺的时候，仅仅为了应付考试的学习方式，已经对现在时间、资源和工具都相对自由的我的进一步学习造成严重破坏。</p><p>正确的方式？对于自己目前的这个状态，首先对待问题要<strong>刨根问底</strong>。不管是在学习，还是处事上，有什么不知道的不懂的，要问，不要揣着糊涂装明白！尤其在处事上，对于老师或者长辈交代的事情，有啥疑问就当面大胆地问，不要总是好好好，是是是。对于老师啊领导啊等这些不经常见面但又有要事要找他们的人，自己一定要提前想好下次遇到他们时问些什么，不要偶然的一次见面，支支吾吾，不仅问题描述不清楚，甚至有可能忘记询问一些重要的事情。当面问事情，一定要记得what、when、where、who、how，关键点一定搞清楚，而对于蹦跶出来的意外情况一定要反问一个why。针对意外情况，事情办不成了，最笨的方法就是，别人回复你的每一句话，都先对自己反问一个为什么，自己能够理解的就算了，不能够理解的再反问回去。虽然笨，但是有效，办不砸事，并且这是在培养一种思维习惯。以后经历的事情多了，了解的多了就好了，要努力地去思考去弄明白问题，而不是揣着糊涂装明白，自欺欺人，关键时候害人害己。但是，话说回来，闲聊的时候，别人说起什么你都不知道，不尴尬吗？这是另外一个问题了。</p><p>第二，不会表达和展示自己。当需要让别人知道你自己的见解，想法，和别人分享时，要能够写出来，能够讲出来。对应现在的阶段，那就是能够写好论文，能够做好汇报。只有这样，才能更好地让别人知道你在想什么，你在干什么，才能让别人知道你是有付出的，你并没有吃闲饭混日子。反之，如果不能很好的表达自己，而自己又为之付出了那么多，还得不到认可和理解，岂不是委屈。这一方面，除了多争取锻炼的机会，把握好每次的历练之外，还要对每次的展示给予充足的时间准备。一件展示或者汇报，当你对它做了认真充足的准备后，就已经成功了一半。</p><p>计划：</p><ol><li>保持健康的生活方式，注意饮食健康，多喝水</li><li>晚上早点从机房回到寝室，这是对生活的尊重</li><li>感觉想要与他人维持或更深地交流和交往，应该建立在工作之外；拥有共同的兴趣爱好才能长久，读书或者运动？</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;距离上次写周总结有一段时间了，想总结的东西也还挺多。&lt;/p&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;p&gt;第一，感觉自己办公差的能力比较差。最集中表现在两方面，问话和回话。回话回不好其实还是问话的问题。&lt;/p&gt;
&lt;p&gt;关于问话，我感觉问题可以归结为：如何在对背景不甚了解的情况下问话成功？其实在问话过程中，我最大的问题体现在不会反问，脑子不会转弯，直来直去的，总是习惯于接受，别人说什么就是什么，主动权永远在对方那里。
    
    </summary>
    
      <category term="生活随笔" scheme="http://ch206265.github.io/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="反思" scheme="http://ch206265.github.io/tags/%E5%8F%8D%E6%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>在VScode中编译和调试C和C++代码</title>
    <link href="http://ch206265.github.io/2019/08/06/%E5%9C%A8VScode%E4%B8%AD%E7%BC%96%E8%AF%91%E5%92%8C%E8%B0%83%E8%AF%95C%E5%92%8CC-%E4%BB%A3%E7%A0%81/"/>
    <id>http://ch206265.github.io/2019/08/06/在VScode中编译和调试C和C-代码/</id>
    <published>2019-08-06T15:01:57.000Z</published>
    <updated>2019-11-25T16:36:21.448Z</updated>
    
    <content type="html"><![CDATA[<p>过程如下：</p><h2 id="安装VS-code"><a href="#安装VS-code" class="headerlink" title="安装VS code"></a>安装VS code</h2><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p><img src="https://raw.githubusercontent.com/ch206265/BlogPictures/master/20190806230417.png" alt="chinese(Simplified) Language pack for VScode"><a id="more"></a><br><img src="https://raw.githubusercontent.com/ch206265/BlogPictures/master/20190806230510.png" alt="C/C++"><br><img src="https://raw.githubusercontent.com/ch206265/BlogPictures/master/20190806230541.png" alt="Code Runner"></p><h2 id="下载MinGW并配置环境变量"><a href="#下载MinGW并配置环境变量" class="headerlink" title="下载MinGW并配置环境变量"></a>下载MinGW并配置环境变量</h2><ul><li>官网下载<a href="https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/8.1.0/threads-posix/seh/?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">[下载]</a></li><li>配置环境变量，参考这篇文章：<a href="https://www.jianshu.com/p/ee1ccb0a3062" target="_blank" rel="noopener">如何安装MinGW - 简书</a></li></ul><p><strong>讲道理，此时应该就可以运行程序了，接下来是调试</strong></p><h2 id="调试（即，配置-vscode文件）"><a href="#调试（即，配置-vscode文件）" class="headerlink" title="调试（即，配置.vscode文件）"></a>调试（即，配置.vscode文件）</h2><p>注意：文件名和路径名最好全是英文</p><ul><li>新建文件，需要调试的源文件放到此文件夹中，然后右键，选择<code>Open with Code</code></li><li>点击debug图标，打开launch.json并修改</li><li>该文件夹内，新建文件<code>tasks.json</code>，并完善内容</li></ul><h2 id="完工，F5可以进行调试"><a href="#完工，F5可以进行调试" class="headerlink" title="完工，F5可以进行调试"></a>完工，F5可以进行调试</h2><ul><li>程序最后加一个<code>getchar();</code>，或者加<code>system(&quot;pause&quot;);</code>等避免调试后黑框闪没</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>编译和运行：<a href="https://www.jianshu.com/p/86313c6a1e0e" target="_blank" rel="noopener">零基础 | 如何用VS Code写C/C++程序 - 安装与配置 - 简书</a><br>调试：<a href="https://blog.csdn.net/bat67/article/details/81268581" target="_blank" rel="noopener">Visual Studio Code (vscode) 配置C、C++环境/编写运行C、C++（Windows）【真正的小白版】 - 一苇以航 - CSDN博客</a> </p><p><a href="https://bestzuo.cn" target="_blank" rel="noopener" class="LinkCard">Sanarous的个人博客</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;过程如下：&lt;/p&gt;
&lt;h2 id=&quot;安装VS-code&quot;&gt;&lt;a href=&quot;#安装VS-code&quot; class=&quot;headerlink&quot; title=&quot;安装VS code&quot;&gt;&lt;/a&gt;安装VS code&lt;/h2&gt;&lt;h2 id=&quot;安装插件&quot;&gt;&lt;a href=&quot;#安装插件&quot; class=&quot;headerlink&quot; title=&quot;安装插件&quot;&gt;&lt;/a&gt;安装插件&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ch206265/BlogPictures/master/20190806230417.png&quot; alt=&quot;chinese(Simplified) Language pack for VScode&quot;&gt;
    
    </summary>
    
      <category term="学习工具" scheme="http://ch206265.github.io/categories/%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="VScode" scheme="http://ch206265.github.io/tags/VScode/"/>
    
      <category term="C/C++" scheme="http://ch206265.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>周总结（2019-08-06）</title>
    <link href="http://ch206265.github.io/2019/08/06/%E5%91%A8%E6%80%BB%E7%BB%93%EF%BC%882019-08-06%EF%BC%89/"/>
    <id>http://ch206265.github.io/2019/08/06/周总结（2019-08-06）/</id>
    <published>2019-08-06T11:51:49.000Z</published>
    <updated>2019-11-30T08:04:51.715Z</updated>
    
    <content type="html"><![CDATA[<h2 id="所思所想"><a href="#所思所想" class="headerlink" title="所思所想"></a>所思所想</h2><p> 这周总结目前也没有什么固定的内容要写，就先记录一下的这周自己的所思所想吧。</p><p>很早之前就说过，不要想得太多而做的太少。其实，想的太多最主要还是因为想要确定一个明晰的目标和方向，如果认准了目标，剩下的自然就是朝着他往前冲，想的自然也就少了。<a id="more"></a></p><p>而最近一直处于比较迷茫的时期，逛了逛很多关于知乎上原画以及编程的一些问答。虽然感觉浪费了不少的时间，但是也并不是一无所获。在上面，有两条回答令我印象深刻：1、<a href="https://zhuanlan.zhihu.com/p/70907978" target="_blank" rel="noopener">那个被知乎绘画大佬劝退的少年最后哪去了？</a> 2、<a href="https://www.zhihu.com/question/25034235/answer/756334105" target="_blank" rel="noopener">自学编程的人，都是怎么找到第一份软件开发工作的？</a>。都是实打实的逆袭。</p><p>之前一直在主攻前端和C/C++语言上定夺不了，上半学期自己一直心心念念地想要学习C/C++，但是项目上和它地联系不是很大；后来项目了解地更深了一点，逐渐转向前端，稍微有些眉目时，跟的项目又突然有了变化，又突然和C/C++走的更近了点。按道理，这不是很好的转变吗，现在想想，自己的困惑在哪里？刷了不少知乎，现在也思考的更明确了点，就打C和C++的基础吧。沿着这条路，走下去。</p><p>现在，生活由这几部分组成：老师安排的项目任务（积累经验）；自己的研究方向钻研（毕业就业相关）；自学C/C++。平衡好这三方面安排。</p><h2 id="下次注意"><a href="#下次注意" class="headerlink" title="下次注意"></a>下次注意</h2><ul><li><p>学习方式。项目驱动式学习。尽量是在完成项目的时候需要学习什么技能，然后再去精深去钻研，刚开始可能不知道的东西太多了，所以，刚开始也不要想着要把所有东西搞懂，只需要把遇到的问题中的大块头，主要矛盾解决了就好。</p></li><li><p>立即行动。开始一件事前你准备充分当然比较好，但是也不能强求万事都是如此。在真正动手做之前，想的再多，再好也不一定就真的有用。路，是慢慢走出来的。</p></li><li><p>不要被工具所累，它有时候是次要的。</p></li><li><p>接受。所有事情都不会白白经历。有时候麻烦并不是麻烦，而是一开始自己就把它定位成了麻烦，被自己推脱，拖成了麻烦事。事情来了，不要嫌，不要怕。要想不就是这点事吗？赶快做完干我的正事！少花些其他的心思。其次，所有编程语言都是要有所涉猎的，思维不要那么二分性，非黑即白。</p></li><li><p>作息。良好的作息习惯是好好工作学习的保证。手机平时就开启超级省电模式吧。学习工作和并不是全部的生活，不要拿工作上的努力掩盖生活中的懒惰。</p></li><li><p>今日事今日毕，尽量自己电脑能在晚上睡觉前关机而不是睡眠。</p></li><li><p>锻炼。每天下午的运动一定要坚持，跑步3公里，5公里，10公里慢慢跑，争取这三年下来，能够和课题组一起跑完半马。</p></li><li><p>之前浏览一位老哥的博客，他上面有段关于“人与人的纽带”的话，</p><blockquote><p>据不完全概率统计，人一生大约会遇到 2920 万人。</p><p>做 IT 这行的，离职入职非常频繁。</p><p>也许每天和你交流业务的人，下个月就断绝了往来。</p><p>也许你觉得这个人是你的知心朋友，但是不做同一块业务后，你们就没有了任何的聊天话题。</p><p>因此，遇到真心朋友后一定要建立一个业务之外的纽带。</p><p>如果真是真心朋友的话，你一定能找到这个纽带</p></blockquote><p>确实，也许你觉得这个人是你的知心朋友，那就应该能够建立起“业务”之外的纽带，无论如何，你们之间都不能少了共同话题。有一些比较有营养的共同话题，双方交流过后都能得到提升。之前一直感觉自己不会聊天，找话题的能力实在一般。其实，还是自己涉猎的东西太少，知识面太窄，亦或者是自己对身边的事物大都不感兴趣，事事都不留心。这的确也是自己目前比较欠缺的。想要找共同话题，就先多看书吧，多写写读书笔记，这真的是一个很好的途径。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;所思所想&quot;&gt;&lt;a href=&quot;#所思所想&quot; class=&quot;headerlink&quot; title=&quot;所思所想&quot;&gt;&lt;/a&gt;所思所想&lt;/h2&gt;&lt;p&gt; 这周总结目前也没有什么固定的内容要写，就先记录一下的这周自己的所思所想吧。&lt;/p&gt;
&lt;p&gt;很早之前就说过，不要想得太多而做的太少。其实，想的太多最主要还是因为想要确定一个明晰的目标和方向，如果认准了目标，剩下的自然就是朝着他往前冲，想的自然也就少了。
    
    </summary>
    
      <category term="生活随笔" scheme="http://ch206265.github.io/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="反思" scheme="http://ch206265.github.io/tags/%E5%8F%8D%E6%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>周总结开篇（2019-07-28）</title>
    <link href="http://ch206265.github.io/2019/07/31/%E5%91%A8%E6%80%BB%E7%BB%93%E5%BC%80%E7%AF%87%EF%BC%882019-07-28%EF%BC%89/"/>
    <id>http://ch206265.github.io/2019/07/31/周总结开篇（2019-07-28）/</id>
    <published>2019-07-31T02:15:51.000Z</published>
    <updated>2019-11-25T16:30:32.920Z</updated>
    
    <content type="html"><![CDATA[<p>这算是自己在博客上写周总结的开篇，先回忆一下自己关于<strong>计划</strong>和<strong>总结</strong>的故事。</p><p>上初中时，自己习惯于列日计划清单，总是列的满满的，把清单上的任务一条条的划去，是我最有成就感的时刻。到高中时，我也想维持这个日计划的习惯，但是我似乎没有意识到高中和初中的不同，也没有意识到之前这个日计划中出现的问题。<a id="more"></a>每次日计划的进行都使我精疲力尽，是的，当时的日计划还是和初中一样“贪婪”。渐渐地，清单上越来越多地东西完不成，或者只是为了完成而完成。有时候虽然划掉了清单上的任务，但是我却并没有那么开心。渐渐的，已计划的习惯就消失了。</p><p>高三时，读《人性的弱点》，当时读的英文版，才知道他的原名是<em>How to win friends and influence people</em>，讲的就是人际交往方面的内容。书中有一个令我印象深刻的案例，一个人他每周都会抽出时间，回顾自己上周经历的一些事情，认真思考，哪些处理的得当，哪些欠妥，欠妥的话又该如何改进，下次再遇到类似的情形时该如何应对。</p><p>这似乎又有点《刻意练习》的意思，模拟自己经历过的那些令人尴尬的场面，练习该如何应对。不要在同一个地方摔跤，也不要让自己的思想认识总拘泥于一处得不到改变和提升。</p><p>大学时读了《高效能人士的七个习惯》，其中提到一词“心灵演练”。其实这和之前了解到的“情景模拟”也大致类似，只不过，心灵演练又上升了个高度。它是要以各个生活场景中的角色为中心，比如以家庭为中心：作为儿女，对待父母我应该怎么做；作为丈夫，对待妻子我该怎么做等等。对各种生活场景进行模拟，并依循内心的良知和个人信条，指导自己的日常行为和决定。</p><p>后来，越来越感觉，生活不仅仅是工作和学习。工作上的努力并不能掩盖生活上的懒惰，况且有时候的努力也并非真的努力，只是低效率的体现。制定的计划也不能都是学习和工作上的内容。</p><p>以上是计划清单方面地内容，而对自己的反思和总结其实一直都在坚持。之前一直使用有道云笔记，上面记录了无数自己的只言片语，凌乱地躺在那里，但大部分写在自己感到烦心时，断断续续，更像是烦躁时地宣泄，没能很好地组织起来，也没有把感慨的东西深挖。所以这也是今后我的一项长期任务。</p><p>博客毕竟是一个开放的平台，不像是在个人云笔记中，偷懒了也只有自己知道。但是，无论有没有人看，都希望自己能坚持下来！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这算是自己在博客上写周总结的开篇，先回忆一下自己关于&lt;strong&gt;计划&lt;/strong&gt;和&lt;strong&gt;总结&lt;/strong&gt;的故事。&lt;/p&gt;
&lt;p&gt;上初中时，自己习惯于列日计划清单，总是列的满满的，把清单上的任务一条条的划去，是我最有成就感的时刻。到高中时，我也想维持这个日计划的习惯，但是我似乎没有意识到高中和初中的不同，也没有意识到之前这个日计划中出现的问题。
    
    </summary>
    
      <category term="生活随笔" scheme="http://ch206265.github.io/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="反思" scheme="http://ch206265.github.io/tags/%E5%8F%8D%E6%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>记一次写标书的经历</title>
    <link href="http://ch206265.github.io/2019/07/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%86%99%E6%A0%87%E4%B9%A6%E7%9A%84%E7%BB%8F%E5%8E%86/"/>
    <id>http://ch206265.github.io/2019/07/26/记一次写标书的经历/</id>
    <published>2019-07-26T09:08:20.000Z</published>
    <updated>2019-12-16T14:46:51.383Z</updated>
    
    <content type="html"><![CDATA[<h2 id="相关文件"><a href="#相关文件" class="headerlink" title="相关文件"></a>相关文件</h2><ol><li><p>询价文件<br> 目前将询价文件理解为招标文件，在询价文件中一般会规定：</p><ul><li><p>询价公告、询价须知</p></li><li><p>合同文本样本</p></li><li><p>具体的采购需求</p></li><li><p>响应文件样本</p></li><li><p>评审标准</p><blockquote><p>询价公告和询价须知中，主要会公布招标项目的一些基本情况，比如项目简介、供应商资格要求、报名方式、询价文件的获取方式、响应文件递交地址以及递交截止时间、询价时间地点（即开标时间地点）等基本内容。</p></blockquote><a id="more"></a></li></ul></li><li><p>响应文件<br> 目前将响应文件理解为投标文件，在投标文件中一般会有以下内容：</p><ul><li>投标函（响应函）</li><li>响应一览表，如技术规格响应、合同文本条款响应、价格响应、投标资格响应等</li><li>投标服务方案，如技术支持、售后服务方案等</li><li>投标人基本情况、投标人资格证明、法定代表人身份证明及授权委托书、同类项目成功执行情况、招标代理费承诺、退投标保证金说明等等一些内容<blockquote><p>响应函主要是投标方经研究项目询价文件和其他有关文件后，决定参加该项目的采购活动，后做出负法律责任的一些郑重声明。这里面比较重要的还是投标服务方案这部分，主要包括技术支持资料和售后服务两部分内容。</p></blockquote></li></ul></li></ol><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><ol><li>投标人、投标人授权代表</li></ol><ul><li>投标人：一般是公司名称</li><li>投标人授权代表，也就是法定代表人授权书中的被授权人</li></ul><ol start="2"><li><p>招标人、采购代理机构、评标委员会</p></li><li><p><a href="https://baijiahao.baidu.com/s?id=1616443207126852529&wfr=spider&for=pc" target="_blank" rel="noopener">法人、法人代表、法定代表人区别</a></p></li></ol><p><strong>法人</strong></p><ul><li>法人不是人，是一种社会组织，是一种集合体，是由法律赋予法律人格的组织集合体</li><li>设立法人的条件：依法成立、有必要的财产和经费或者必要的经费来源、有自己的名称、组织机构和场所、满足法律规定的其他条件</li></ul><p><strong>法定代表人</strong></p><ul><li>《<a href="https://baike.baidu.com/item/民法通则/2088441" target="_blank" rel="noopener">民法通则</a>》规定：依照法律或者法人组织章程规定，代表法人行使职权的负责人，是法人的法定代表人。营业执照中的名字是法定代表人。</li><li>根据《公司法》相关规定，法定代表人可以是董事长、执行董事，也可以是总经理，这主要看法律或章程如何规，但每个法人只能有一个法定代表人。</li></ul><p><strong>法人代表</strong></p><ul><li>法人代表，是法人/法定代表人授权办理某个或某些事项的代理人，也可以是法定代表人。</li><li>如果单位要办一件事，可以派单位里的任何人去办，只要出具书面证明文件（比如授权委托书等），那么任何一个被单位派出去办事的人都可以叫法人代表，单位也可以根据需要随意随时更换。这个代理人可以是甲、也可以是乙，他不是固定的，而是取决于法人的授权。</li></ul><ol start="4"><li><p>日历日、工作日和自然日</p><ul><li>日历日一般用在签订合同时使用，合同中按天计算时间的，开始当天不计入，从次日00:00开始计算，期限最后一天的截止时间为当天24:00；</li><li>工作日和自然日时互相对应的，工作日一周5天，自然日一周7天。</li></ul></li><li><p>包组<br>类似于标段，一个包组确定一个中标人</p></li><li><p>招投标中的违法行为</p></li></ol><ul><li><a href="https://www.sohu.com/a/239006853_100120059" target="_blank" rel="noopener">以他人名义投标</a></li><li><a href="http://www.qianjia.com/html/2018-02/01_284295.html" target="_blank" rel="noopener">串标</a></li><li>行贿</li><li><a href="https://www.sohu.com/a/239006853_100120059" target="_blank" rel="noopener">虚假中标</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;相关文件&quot;&gt;&lt;a href=&quot;#相关文件&quot; class=&quot;headerlink&quot; title=&quot;相关文件&quot;&gt;&lt;/a&gt;相关文件&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;询价文件&lt;br&gt; 目前将询价文件理解为招标文件，在询价文件中一般会规定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;询价公告、询价须知&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;合同文本样本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;具体的采购需求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;响应文件样本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;评审标准&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;询价公告和询价须知中，主要会公布招标项目的一些基本情况，比如项目简介、供应商资格要求、报名方式、询价文件的获取方式、响应文件递交地址以及递交截止时间、询价时间地点（即开标时间地点）等基本内容。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="不会白白经历的事" scheme="http://ch206265.github.io/categories/%E4%B8%8D%E4%BC%9A%E7%99%BD%E7%99%BD%E7%BB%8F%E5%8E%86%E7%9A%84%E4%BA%8B/"/>
    
    
      <category term="招投标" scheme="http://ch206265.github.io/tags/%E6%8B%9B%E6%8A%95%E6%A0%87/"/>
    
  </entry>
  
  <entry>
    <title>认识定量遥感</title>
    <link href="http://ch206265.github.io/2019/06/13/%E8%AE%A4%E8%AF%86%E5%AE%9A%E9%87%8F%E9%81%A5%E6%84%9F/"/>
    <id>http://ch206265.github.io/2019/06/13/认识定量遥感/</id>
    <published>2019-06-13T10:34:35.000Z</published>
    <updated>2019-11-30T08:06:13.581Z</updated>
    
    <content type="html"><![CDATA[<p>主要总结一下阅读过博文<a href="https://blog.csdn.net/ESA_DSQ/article/details/70475470" target="_blank" rel="noopener">《从定性遥感到定量遥感——大数据时代的空间数据科学》</a>之后的认识。</p><p>遥感，remote sensing，遥远地感知。既然需要传感器从远处感知被观测物体的属性，那么肯定有信使来传递信息，最常见的信使就是电磁波，而传递的这个信息就是地物对电磁波的反射、吸收和透射特性（包含很多，比如反射率（主要）/吸收率/透射率）。无论是定量遥感还是定性遥感，其核心都是<strong>电磁波</strong>。</p><a id="more"></a><h2 id="定性遥感"><a href="#定性遥感" class="headerlink" title="定性遥感"></a>定性遥感</h2><p>初中物理告诉我们，不同色光混合在一起组成了白光。映入眼帘的世界之所以五颜六色，是因为这些物体吸收和透射了一部分色光，而且也反射一部分色光。经它们反射的色光投射到眼睛中，我们就感受到物体的颜色。投射到我们眼睛中的可见光是电磁波，并且只是其中很小的一部分。</p><p>遥感传感器（相机）就像我们的眼睛，只不过，除了可见光之外，它还能接收到更多波段的电磁波。可见光进入人眼经过一些生物过程产生了视觉效果，而电磁波进入到遥感传感器（相机）经过一些数字信号的处理过程也产生了遥感图像。</p><p>定性遥感，主要指的是就是对遥感影像的定性分析，或者是从几何角度的分析，并不考虑地物的物理属性。比如，对获取的遥感数据作一些简单校正后，利用地面目标的光谱特性作有监督或无监督的最大似然率分类， 或经验判读 。</p><h2 id="定量遥感反演"><a href="#定量遥感反演" class="headerlink" title="定量遥感反演"></a>定量遥感反演</h2><p>当然，遥感图像中包含着丰富的光谱信息，这些光谱信息包含着地物与电磁波之间的相互作用（反射/吸收/透射）。不同的地物对电磁波的作用（反射/吸收/透射）也不同，因此，根据遥感图像中的波普信息定量获取观测目标参量 ，并用这些目标参量，通过链接模型生产出满足用户 (地学或生物学模型运行) 需要的时空尺度和精度的产品，就是定量遥感反演（默认是成像遥感反演）。要想建立起波普信息与地物之间的联系，需要寻找二者之间的关系模型，也就是反演模型。</p><p>反演模型主要有物理模型、统计模型或物理与统计模型的耦合模型。基于物理模型的遥感反演具有严格的机理模型。统计模型以及耦合模型对于特定区域或者特定样本的反演结果可能会比较好，但是不具有普遍适应性。</p><p>定量遥感，主要聚焦于构成地物状态特征的物理化学要素，以及导致地物目标变化的物理化学动力驱动机制。它强调通过<strong>数学的或物理的模型</strong>将遥感信息与观测地表目标参量联系起来， 定量地反演或推算出某些地学目标参量。但是，定量遥感反演的真正核心是基于物理模型的反演。此外，目前所使用的物理模型大部分也是简化之后的模型。</p><h2 id="定量遥感的一些问题"><a href="#定量遥感的一些问题" class="headerlink" title="定量遥感的一些问题"></a>定量遥感的一些问题</h2><p>目前，定量遥感存在一些问题，尺度效应和尺度转换的机理、异质像元的真实性检验、多尺度数据的联合应用等方面的研究仍较薄弱。</p><ol><li><p>反演问题，</p><ul><li>病态反演——参数求解过程大部分是求解参数大于方程数； </li></ul></li><li><p>尺度问题，不同的自然现象有不同的最佳观测距离和尺度，需要适当的距离和比例尺，才能有效完整的观察。 </p><ul><li><p>尺度效应：由于地球表面空间作为一个巨系统的复杂性，在某一尺度上人们观察到的性质、总结出的原理或规律，在另一尺度上可能有效、可能相似，也可能需要修正。加之遥感观测信息多空间分辨率并有的特点，从定量遥感出发的地学描述必然存在多尺度的问题 </p></li><li><p>尺度转换与多尺度数据联合应用：多尺度 (分辨率等) 的遥感图像能够提供从“点观测”尺度 (代表区间) 到地理现象尺度之间多级差的尺度，但是，遥感图像各有自己的分辨率、幅面、重访周期和波段选择，必须有可靠、便捷、自洽的尺度转换，才能满足用户的需求。 </p></li><li><p>尺度效应研究需要回答两个重要问题： 第一，在像元尺度上的基本物理定律是否仍然适用，适用的条件及如何修正？ 第二，不同分辨率尺度上目标 (地学) 要素存在何种规律及联系，如何进行尺度转换？ </p></li></ul></li></ol><blockquote><p> 在遥感科学方面，从认识上我们往往觉得搞电磁波与地物的相互作用机理，才算基础研究，所以花了很大力气，作机理模型。那当然是遥感基础研究的一个层次，但是，地球表层的时空异质性是普遍存在的。就算我们零敲碎打，在特定地区，特定的产品，作出一些改进了的模型，能发文章；但对我们解决上述问题究竟能有多大帮助呢？</p></blockquote><blockquote><p>由于对遥感观测的尺度效应了解不够， 对一些基本物理定理、定律、概念在遥感像元尺度上的适用性不清，对在一个遥感像元尺度上建立的模型在另一像元尺度的适用性不清， 对用地面测量的点上数据验证像元尺度的遥感反演结果的适用性不清，使得对遥感观测的像元尺度上的信息缺乏理解，难以进行像元尺度之间及其与传统点信息之间的转换。这也是导致海量遥感数据无法有效利用、定量遥感研究缺乏普适性和系统性、遥感应用难以再上新台阶的根本原因之一 。</p></blockquote><ol start="3"><li>定量遥感产品的真实性检验 </li></ol><p>Reference：</p><p><a href="http://xueshu.baidu.com/usercenter/paper/show?paperid=da99e3d781a1c5f028669d1d535bdc1d&site=xueshu_se" target="_blank" rel="noopener">[1]李小文, 王祎婷. 定量遥感尺度效应刍议[J]. 地理学报, 2013, 68(9).</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要总结一下阅读过博文&lt;a href=&quot;https://blog.csdn.net/ESA_DSQ/article/details/70475470&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《从定性遥感到定量遥感——大数据时代的空间数据科学》&lt;/a&gt;之后的认识。&lt;/p&gt;
&lt;p&gt;遥感，remote sensing，遥远地感知。既然需要传感器从远处感知被观测物体的属性，那么肯定有信使来传递信息，最常见的信使就是电磁波，而传递的这个信息就是地物对电磁波的反射、吸收和透射特性（包含很多，比如反射率（主要）/吸收率/透射率）。无论是定量遥感还是定性遥感，其核心都是&lt;strong&gt;电磁波&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="遥感与图像处理" scheme="http://ch206265.github.io/categories/%E9%81%A5%E6%84%9F%E4%B8%8E%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
      <category term="定量遥感" scheme="http://ch206265.github.io/tags/%E5%AE%9A%E9%87%8F%E9%81%A5%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>使用Adobe Illustrated获取图像光滑的图形轮廓</title>
    <link href="http://ch206265.github.io/2019/06/12/%E4%BD%BF%E7%94%A8AI%E8%8E%B7%E5%8F%96%E4%BD%8D%E5%9B%BE%E5%9B%BE%E5%83%8F%E5%85%89%E6%BB%91%E7%9A%84%E5%9B%BE%E5%BD%A2%E8%BD%AE%E5%BB%93/"/>
    <id>http://ch206265.github.io/2019/06/12/使用AI获取位图图像光滑的图形轮廓/</id>
    <published>2019-06-12T09:03:16.000Z</published>
    <updated>2019-11-30T08:04:39.825Z</updated>
    
    <content type="html"><![CDATA[<p>最近需要将一些地图资源符号化，以便在地图上显示。</p><p>在<a href="[https://www.iconfont.cn](https://www.iconfont.cn/">阿里巴巴矢量图标库</a>中能找到大部分比较满意的基础图元符号，然后按找自己的设计思路进行修改，尤其是当需要找一些知名的APP图标时，它们的矢量logo大部分都可以找到。但是也有一些找不到，比如我想在地图上表示<code>水木清华论坛</code>，需要寻找它的logo作为在地图上显示的符号（logo背景统一填充为白色）。<a id="more"></a></p><p>在网络上，我只找到了一个比较模糊的<code>水木论坛</code>的jpg图片，并且图片中除了图形符号外，还有一些文字，但是我只需要上面的图形符号。此外，我不会使用上面的钢笔工具，没有办法描边，只能借助于AI 或者PS看看有没有比较傻瓜一点的方式。下面就此总结一下。</p><h2 id="PS的快速选择工具"><a href="#PS的快速选择工具" class="headerlink" title="PS的快速选择工具"></a>PS的快速选择工具</h2><p>快速选择工具可以快速把相似颜色的区域选择出来，能够选出符号的轮廓，但是因为位图符号，都是一些锯齿状的边缘，勾选的边缘不够平滑，效果不好。如果将图像放大，局部修改蚂蚁线，不仅比较费时费力，而且效果也不好，没有办法保证平滑。</p><h2 id="Illustrated的图像描摹工具"><a href="#Illustrated的图像描摹工具" class="headerlink" title="Illustrated的图像描摹工具"></a>Illustrated的图像描摹工具</h2><p>将jpg图像导入到AI中，使用图像描摹——高保真度/低保真度照片/…——扩展</p><p>经过这三步，大致就能将图片中图形的轮廓勾选出来，效果比PS的快速选择工具要好，但是总体来讲还是有很多地方可以修改。</p><ul><li>右键图像——取消编组，这样就可以分离整张图片上的图形轮廓和文字轮廓，删除不感兴趣的文字轮廓；</li><li>使用剪刀工具修剪一些比较大的轮廓偏差，然后使用橡皮擦工具对局部的不够光滑的边缘做一下处理；</li><li>然后将背景填充为白色，之后导出为PNG(应该是位图的格式都可以)；</li><li>在此把导出的图像导进AI中，重复上面的操作，效果就会越来越好了</li></ul><p>效果如下：</p><center>    <img src="https://raw.githubusercontent.com/ch206265/BlogPictures/master/20190803212246.png?token=AJD4OPUZ3243DLNGL3VNX3C5IWFOG" width="80%" /></center>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近需要将一些地图资源符号化，以便在地图上显示。&lt;/p&gt;
&lt;p&gt;在&lt;a href=&quot;[https://www.iconfont.cn](https://www.iconfont.cn/&quot;&gt;阿里巴巴矢量图标库&lt;/a&gt;中能找到大部分比较满意的基础图元符号，然后按找自己的设计思路进行修改，尤其是当需要找一些知名的APP图标时，它们的矢量logo大部分都可以找到。但是也有一些找不到，比如我想在地图上表示&lt;code&gt;水木清华论坛&lt;/code&gt;，需要寻找它的logo作为在地图上显示的符号（logo背景统一填充为白色）。
    
    </summary>
    
      <category term="学习工具" scheme="http://ch206265.github.io/categories/%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="符号设计" scheme="http://ch206265.github.io/tags/%E7%AC%A6%E5%8F%B7%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="Illustrated" scheme="http://ch206265.github.io/tags/Illustrated/"/>
    
  </entry>
  
  <entry>
    <title>思而不学则殆</title>
    <link href="http://ch206265.github.io/2019/06/08/%E6%80%9D%E8%80%8C%E4%B8%8D%E5%AD%A6%E5%88%99%E6%AE%86/"/>
    <id>http://ch206265.github.io/2019/06/08/思而不学则殆/</id>
    <published>2019-06-08T14:07:42.000Z</published>
    <updated>2019-11-30T08:05:48.003Z</updated>
    
    <content type="html"><![CDATA[<p>为什么今天要写这个呢？其实在接触到博客之前，自己一直使用云笔记，也经常在云笔记里面写一些思考和反思。说“经常”其实也不太对，毕竟在自己目标明确或者“一帆风顺”的时候，根本不会想起来写一些反思，往往都会是在心情或者学习状态比较起伏，目标不明确，总之生活有些混乱的时候才会去写。所以，今天写这个东西，的确是最近感觉遇到了些小问题，需要用文字理一理。<a id="more"></a></p><h2 id="之前的一些事"><a href="#之前的一些事" class="headerlink" title="之前的一些事"></a>之前的一些事</h2><p>上学期研一刚开学，自己心中冲劲十足，想要按照自己的计划来弥补一下大学本科四年来的遗憾。不管计划以及实施如何，总之目标就是，研究生毕业时自己要有拿得出手的东西，更准确地说，自己不要当个水货。但是刚一开学，我就始料未及的成为了班长，成为班长之路真的是像设计好的剧本一样巧，真的是无巧不成书，但是这是现实啊！其实如果像大学那样，研究生生涯当个班长锻炼一下也没什么，但是由于学校的原因，在这里当班长就相当于在大学当辅导员一般，尤其是他们对于班长的使唤简直像一个全职秘书一样，对于大学四年一直透明的我，这相当于一上来就遇到了地狱模式的“锻炼”。当时上半学期，我也真是被班级后勤事务，导师，课程以及自己的计划四重大山紧紧压迫，时间严重不足。以我的性格，辞职这个念头一直纠结到学期末，期间也遇到课题任务和自己计划的不一样的困扰。就这样，我的研一上学期结束了，我想要“培养能拿出手的东西”的计划，似乎也一直郁结在心中没有什么进展。</p><h2 id="现在"><a href="#现在" class="headerlink" title="现在"></a>现在</h2><p>不管过程怎么样，在研一下学期刚开学的时候，我终于把班长辞了。导师那边，我也基本默认接受了这个之前不怎么了解的方向。不过当时因为感觉没有转机，我也一直在思考怎么把课任务与自己毕业之后的就业关系起来。就在刚刚有些眉目的情况下，导师又接了新的项目，还和之前自己比较感兴趣的领域有点关系，但是老师学生比较少，正在愁没人做（我们课题组基本每个人的方向都不一样，一人跟一个项目，大师兄更是几乎垮了所有项目带我们），我就主动请缨了。所以，后来……两个课题任务都在做，一段时间内哪个任务比较紧急就做哪个。当时真的在想，为什么自己这么菜，如果自己的能力在本科四年有所磨练，那么现在应该就是大展身手的时候了，哈哈，其实导师对我们都很好，在课题组机会也会比较多但是无奈自己太菜了😔。</p><p>目前，随着课程慢慢结束，班长职务的辞职，自己能掌控的时间的确变多了，尤其是没有当班长时来自他们的小骚扰，学习也更加专注了。但是，当外界条件慢慢变好之时，自己的心境却发生了些变化。</p><p>其实科研也并没有自己想象中的那样简单，并且由于导师带学生的方式，我们大多都是自己在科研的道路上摸索（其实自己主动的交流也比较少），至少我感觉自己目前还没有跨入科研的大门。再加上现在已经到了学期末，各种课程作业袭来，慢慢的，时间又转移到了课程作业上。自己心心念念的科研，或者培养“能拿得出手的东西”的计划又有点停滞了……</p><p>所以，此时，我好像突然想起来我还有个计划，计划着自己的研究生生涯不要像大学那样什么都没有学到，计划着研究生毕业的时候有能拿得出手的东西。周围的同学都在慢慢的成长，他们似乎都正在形成自己能拿得出手的东西（我又拿别人比较了）。其实我知道尽量不要拿别人比较，做好自己便是，但是，这种比较更像是“见贤思齐”，因为自己本身实在“问心有愧”，没法说服自己不去比较。其实我也发现了，当自己越是心里没底，越是没有目标的时候越喜欢和其他人比较，呵，这个时候比较，结果就是我现在再写这个东西……</p><h2 id="对此，之前是怎么想的"><a href="#对此，之前是怎么想的" class="headerlink" title="对此，之前是怎么想的"></a>对此，之前是怎么想的</h2><p>之前是咋想的：要有拿得出手的东西。这句话是大一的时候，社团学姐告诉我们这些社团萌新的，我记到了现在。结果是大学四年除了成绩单，我感觉也没啥比较实际的东西能拿得出手，而现在，似乎又要走之前的老路了。<strong>只记住要有东西能拿得出手，却不知道究竟要把什么拿出来。</strong></p><p>关于这个目标，我一直都是在课题中寻找，希望将课题任务和之后自己毕业找工作需要用到的技能结合起。很遗憾，现在这个新的方向，我还没有找到（按道理讲有点不太可能，后注）~~而之前转走的那个自己不太了解的方向反而找到了一些结合点。我也有想过就按照之前找到的哪些结合点深挖掘下去，但是这样，这个自己主动请缨的新项目岂不是成为了累赘？因为这两个方向相差的有点远。但是按照大师兄之前说的，所有课题任务都是要大家一起做，大家都参与，我也就有些释怀，不要分的那么清楚。或许是我太想把课题任务和就业找工作相结合了。但是这怎么说呢，精力毕竟是有限的，能结合当然是好事。</p><p>尽管还是比较纠结，但自己现在最需要做的还是尽量清晰一下目标。是在课题中找结合点，还是两者平行着来，需要考虑一下，然后就一直考虑，越考虑越不知道自己该干什么了……</p><h2 id="该怎么办"><a href="#该怎么办" class="headerlink" title="该怎么办"></a>该怎么办</h2><p>我刚刚审视了一下自己说的话 </p><blockquote><p>很遗憾，现在这个新的方向，我还没有找到</p></blockquote><p>讲道理，这有点不太可能……</p><p>我对自己的分析大致如下：</p><p>最近突然意识到自己目标和方向不清晰，一不清晰心里就没底，一心里没底就焦虑，接着就是因为焦虑而想的太多，结果越想越想不出结果，越焦虑。</p><p>所以，先缓解一下自己的焦虑吧，目前自己是想的太多，做的太少，已经处于“思而不学则殆”了，知识储备太少，眼界太狭窄，也不会有什么好的思考结果。</p><p>如果目标不能在行动之前就清晰了，那就在行动中渐渐把他弄明白，关键是不要停下来，不要陷入想太多干太少的局面。加油！干起来！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为什么今天要写这个呢？其实在接触到博客之前，自己一直使用云笔记，也经常在云笔记里面写一些思考和反思。说“经常”其实也不太对，毕竟在自己目标明确或者“一帆风顺”的时候，根本不会想起来写一些反思，往往都会是在心情或者学习状态比较起伏，目标不明确，总之生活有些混乱的时候才会去写。所以，今天写这个东西，的确是最近感觉遇到了些小问题，需要用文字理一理。
    
    </summary>
    
      <category term="生活随笔" scheme="http://ch206265.github.io/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="反思" scheme="http://ch206265.github.io/tags/%E5%8F%8D%E6%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>从傅里叶变换到小波变换</title>
    <link href="http://ch206265.github.io/2019/06/05/%E4%BB%8E%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2%E5%88%B0%E5%B0%8F%E6%B3%A2%E5%8F%98%E6%8D%A2/"/>
    <id>http://ch206265.github.io/2019/06/05/从傅里叶变换到小波变换/</id>
    <published>2019-06-05T12:22:15.000Z</published>
    <updated>2019-12-16T15:09:02.483Z</updated>
    
    <content type="html"><![CDATA[<p>一般称在时间域内的离散数字信号为原始信号。大多数的信号都是这种基于时间的函数，其对应的图形也就是关于“时间-幅值”的图形。但是，仅有这一种描述形式还远远不够，因为信号的一些重要特征在时间域内并不能够有明显的体现。</p><p>如果想要在其他的变换域内表示信号，就必须对信号施加各种数学变换，傅里叶变换/小波变换等都是其中的一种。而任何经过某种数学变换的输出信号则被称为处理信号。</p><a id="more"></a><h2 id="傅里叶变换FT"><a href="#傅里叶变换FT" class="headerlink" title="傅里叶变换FT"></a>傅里叶变换FT</h2><p><strong>傅里叶变换</strong>主要是将信号从时间域转换到频率域，信号的一些在时间域内表现的不明显的特征在频率域内会更加明显，更有利于对信号的分析。此外，傅里叶变换（包括小波变换）是一种可逆的数学变换，即它不仅能够将时间域内的信号转换到频率域（频率-幅值），还可以把频率域的信号转换回时间域（时间-幅值）。</p><p>但是，对于傅里叶变换在任何给定的时间，人们只能看到时间-幅值和频率-幅值二者之间的一种变化波形。也就是说：</p><ul><li>观察时间域信号波形，看不出信号中的频率信息，只能看到信号的全部频率信息经过积分平均后所反映的信号在时刻t的值（可参考傅里叶逆变换公式$f(t)=\int_{-\infty}^{+\infty} \hat{f}(\omega) \mathrm{e}^{\mathrm{i} 2 \pi \omega t} \mathrm{d} \omega$）</li><li>分析频率域（傅里叶变换域）信号的频谱波形则缺少时间信息，即，信号在某一频率处的值是全部时间域的信号值经过积分平均形成（可参考傅里叶变换公式$\hat{f}(\omega)=\int_{-\infty}^{+\infty} f(t) \mathrm{e}^{-\mathrm{i} 2 \pi \omega t} \mathrm{d} t$）</li></ul><p>再次回顾一下傅里叶变换，它是将时间域的信号转换到了频率域，给出了信号的频谱，描述的是信号的“频率-幅值”波形。通过振幅值可以判断信号中存在多少频率成分（对应振幅值为0的频率成分不存在），发现信号在时间域中发现不了的特征。但是，傅里叶变换并没有告诉我们何种频率成分出现在何时。那么是不是在分析所有信号的时候都需要知道“何种频率成分出现在何时”呢？</p><p>首先，平稳信号。在时间域中，我们称频率成分不随时间变化的信号为平稳信号。对于平稳信号，人们不需要知道其某一频率成分在什么时候出现。因为它的所有频率成分不随时间变化，在所有时刻都是一样的，也即平稳信号的所有频率成分在所有时刻出现。但是，对于非平稳信号，它的频率成分是随时间变化的，人们需要分析其频率和时间的关系也就需要同时知道它的时间和频率信息。这样，使用傅里叶变换分析非平稳信号就不太合适了。</p><h2 id="短时傅里叶变换STFT"><a href="#短时傅里叶变换STFT" class="headerlink" title="短时傅里叶变换STFT"></a>短时傅里叶变换STFT</h2><p>非平稳信号在任一较短的时间间隔内可以近似认为是平稳信号，由此可以想象如果将非平稳信号切分成较短的时间区间，或用一个窗口长度较小的限制函数对原始非平稳信号加以限制，就可以形成一个近似的局部平稳信号，然后就可以在局部使用傅里叶变换进行分析。</p><p>这种通过取较短时间间隔或者加窗进行傅里叶变换的方法称为<strong>短时傅里叶变换</strong>（short time Fourier transform,STFT）又叫做<strong>窗口傅里叶变换</strong>(windowed Fourier transform,WFT)。所以，信号的短时傅里叶变换不是别的，正是这个信号和窗口函数相乘后的傅里叶变换。<br>$$<br>S T F T_{f}(b, \omega)=\int_{-\infty}^{+\infty}[f(t) g(t-b)] \cdot \mathrm{e}^{-\mathrm{i} 2 \pi \omega t} \mathrm{d} t<br>$$<br>但是，短时傅里叶变换也具有局限性，且与其窗口函数有关。<strong>海森伯测不准原理</strong>说明，窗口函数的分辨率单元不可能在时间维和频率维同时达到无限小，即不可能得到信号的时频精确表示，也就是说，人们不可能知道哪一频率成分发生在哪一精确时刻，只能够知道某一披绿范围（即频带）发生在哪个时间间隔。</p><p>为了满足平稳性的假设，就必须有足够短的窗口函数，在这个较短的时间间隔内，信号才可以近似认为是平稳的。但是，窗口函数的时间域支撑越短，越适合平稳性假设，也就能获得越好的时间粉笔那缕，但是频率分辨率就越差；而宽的窗口给出了较好的频率分辨率但是时间分辨率变差，并且较宽的窗口也不满足平稳性要求。所以窗口函数的选择问题突出体现了短时傅里叶的变换的局限性</p><p>一般来说，实验中观测道德信号，其特定频率成分事先是不知道的，因此，利用短时傅里叶变换对信号进行有效分解时，也不能保证选择到恰当的窗口大小尺寸。</p><p>为了解决分析处理非平稳信号时遇到的这种分辨率选择，也即分析确定窗口函数宽度的问题，研究人员需要寻找其他更适合的技术，小波变换就是其中之一。</p><h3 id="一个短时傅里叶变换的例子"><a href="#一个短时傅里叶变换的例子" class="headerlink" title="一个短时傅里叶变换的例子"></a>一个短时傅里叶变换的例子</h3><p>信号$f(t)$的表达式如下：<br>$$<br>f(t)=\left{\begin{array}{ll}{\sin 2 \pi \cdot 300 t,} &amp; {t \in[0,250]} \ {\sin 2 \pi \cdot 200 t,} &amp; {t \in[250,500]} \ {\sin 2 \pi \cdot 100 t,} &amp; {t \in[500,750]} \ {\sin 2 \pi \cdot 50 t,} &amp; {t \in[750,1000]}\end{array}\right.<br>$$<br>很明显它是一个非平稳信号，并且它的时间域图像如下：</p> <img src="https://raw.githubusercontent.com/ch206265/BlogPictures/master/20190803212320.png?token=AJD4OPQ4ZNHNBJ2ULHMYGBC5IWFQ4" alt="1559820115294.png"   width="60%"/><p>下图是该信号在在不同窗口下进行短时傅里叶变换的三维图：<br><img src="https://raw.githubusercontent.com/ch206265/BlogPictures/master/20190803212156.png?token=AJD4OPQB2QBPFXBVSR7CWFS5IWFLK"  width="60%" /></p><p>从这三组图中可以看出</p><ul><li><code>(a)</code>图的窗口函数最窄，时间分辨率最高（时间轴上对应的窗口宽度最窄），但是频率分辨率较差（频率轴上对应的窗口宽度最宽）</li><li><code>(b)</code>和<code>(c)</code>图的窗口函数宽度逐渐变大，时间轴上对应的每一个分析窗口也越来越大，但是相应的，在频率轴上对应的分析窗口的宽度却越来越窄</li></ul><p>这说明了短时傅里叶变换的窗口分辨率所潜在的问题，即，窗口函数的分辨率不能在时间维和频率维上同时达到最大。</p><h2 id="小波变换WT"><a href="#小波变换WT" class="headerlink" title="小波变换WT"></a>小波变换WT</h2><p>小波变换的定义如下：<br>$$<br>W T_{f}(a, \tau)=\frac{1}{\sqrt{a}} \int_{R} f(t) \psi^{*}\left(\frac{t-\tau}{a}\right) d t<br>$$</p><ul><li>其中$\tau$代表平移参数，它表示尺度化后的基本小波沿时间轴移动的中心位置</li><li>$a&gt;0$，表示尺度参数，大的尺度对应着信号大范围内的整体概貌，对应较粗的观测；小的尺度则对应局部细节的观测</li></ul><p>在短时傅里叶变换中，一旦选定了窗口函数，那么它就有了确定的窗口宽度或支撑。这样，短时傅里叶变换就只能用这单一不变的窗口分辨率去分析信号中的所有频率成分。</p><p>小波变换是短时傅里叶变换的发展，它能够针对待分析信号不同的频率成分调整窗口函数的宽度，即能够选择不同的分辨率对不同频率成分进行分析。比如：</p><ul><li>在分析信号中的低频成分时，采用较低的时间分辨率（即窗口函数具有较大的时间域窗口宽度）。因为低的频率（大的尺度）对应的信号波形在时间域变化较缓而且持续时间长，用较宽的时间窗口就可以区分不同的频率成分。并且，宽的窗口函数对信号低频信息所能观察的范围更大/采集的样本更多，能更好地把握信号的整体性概貌或整体趋势</li><li>在分析高频成分时，采用较高的时间分辨率（即窗口具有较小的时间域窗口宽度）。因为高的频率（小的尺度）对应着信号的细节信息，对应的信号波形在时间域变化较快而且持续时间短，用窄窗口函数才可以区分不同的频率成分。并且，窄窗口有利于在时间域准确定位高频成分发生的时刻瞬间，从而预测信号的剧烈变化</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一般称在时间域内的离散数字信号为原始信号。大多数的信号都是这种基于时间的函数，其对应的图形也就是关于“时间-幅值”的图形。但是，仅有这一种描述形式还远远不够，因为信号的一些重要特征在时间域内并不能够有明显的体现。&lt;/p&gt;
&lt;p&gt;如果想要在其他的变换域内表示信号，就必须对信号施加各种数学变换，傅里叶变换/小波变换等都是其中的一种。而任何经过某种数学变换的输出信号则被称为处理信号。&lt;/p&gt;
    
    </summary>
    
      <category term="遥感与图像处理" scheme="http://ch206265.github.io/categories/%E9%81%A5%E6%84%9F%E4%B8%8E%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
      <category term="小波变换" scheme="http://ch206265.github.io/tags/%E5%B0%8F%E6%B3%A2%E5%8F%98%E6%8D%A2/"/>
    
      <category term="图形处理" scheme="http://ch206265.github.io/tags/%E5%9B%BE%E5%BD%A2%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
</feed>
